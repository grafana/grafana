# This workflow creates a new PR in Grafana which is triggered after a release is completed.
# It should include all code changes that are needed after a release is done. This includes the changelog update and
# version bumps, but could include more in the future.
# Please refrain from including any processes that do not result in code changes in this workflow. Instead, they should
# either be triggered in the release promotion process or in the release comms process (that is triggered by merging
# this PR).
name: Grafana Release PR
on:
  workflow_dispatch:
    inputs:
      previous_version:
        type: string
        required: false
        description: 'The release version (semver, git tag, branch or commit) to use for comparison'
      version:
        required: true
        type: string
        description: The version of Grafana that is being released
      target:
        required: true
        type: string
        description: The release branch pattern (eg v9.5.x) that these changes are being merged into
      backport:
        required: false
        type: string
        description: Branch to backport these changes to
      dry_run:
        required: false
        default: false
        type: boolean
      latest:
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

jobs:
  push-changelog-to-main:
    permissions:
      contents: write
      pull-requests: write
    name: Create PR to main to update the changelog
    uses: ./.github/workflows/changelog.yml
    with:
      previous_version: ${{inputs.previous_version}}
      version: ${{ inputs.version }}
      latest: ${{ inputs.latest }}
      dry_run: ${{ inputs.dry_run }}
      target: main

  create-prs:
    permissions:
      contents: write
      pull-requests: write
    name: Create Release PR
    runs-on: ubuntu-latest
    if: github.repository == 'grafana/grafana'
    env:
      VERSION: ${{ inputs.version }}
      LATEST: ${{ inputs.latest }}
      DRY_RUN: ${{ inputs.dry_run }}
    steps:
      - name: "Get vault secrets"
        id: vault-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault
          repo_secrets: |
            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY
      - name: Get release branch
        id: branch
        uses: grafana/grafana-github-actions-go/latest-release-branch@main # zizmor: ignore[unpinned-uses]
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ownerRepo: 'grafana/grafana'
          pattern: ${{ inputs.target }}
      - name: Checkout Grafana
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: Checkout Grafana (main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: '0'
          fetch-tags: 'false'
          path: .grafana-main
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: Setup nodejs environment
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Configure git user
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local --add --bool push.autoSetupRemote true

      - name: Create branch
        run: git checkout -b "release/${{ github.run_id }}/$VERSION"
      - name: Generate changelog token
        id: generate_changelog_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}
          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}
      - name: Generate changelog
        id: changelog
        uses: ./.grafana-main/.github/actions/changelog
        with:
          github_token: ${{ steps.generate_changelog_token.outputs.token }}
          target: v${{ env.VERSION }}
          output_file: changelog_items.md
      - name: Patch CHANGELOG.md
        run: |
          # Prepare CHANGELOG.md content with version delimiters
          (
            echo
            echo "# $VERSION ($(date '+%F'))"
            echo
            cat changelog_items.md
          ) > CHANGELOG.part

          # Check if a version exists in the changelog
          if grep -q "<!-- $VERSION START" CHANGELOG.md ; then
            # Replace the content between START and END delimiters
            echo "Version $VERSION is found in the CHANGELOG.md, patching contents..."
            sed -i -e "/$VERSION START/,/$VERSION END/{//!d;}" \
                   -e "/$VERSION START/r CHANGELOG.part" CHANGELOG.md
          else
            # Prepend changelog part to the main changelog file
            echo "Version $VERSION not found in the CHANGELOG.md"
            (
              echo "<!-- $VERSION START -->"
              cat CHANGELOG.part
              echo "<!-- $VERSION END -->"
              cat CHANGELOG.md
            ) > CHANGELOG.tmp
            mv CHANGELOG.tmp CHANGELOG.md
          fi

          rm -f CHANGELOG.part changelog_items.md

          git diff CHANGELOG.md
      - name: "Prettify CHANGELOG.md"
        run: npx prettier --write CHANGELOG.md
      - name: Commit CHANGELOG.md changes
        run: git add CHANGELOG.md && git commit --allow-empty -m "Update changelog" CHANGELOG.md

      - name: Update package.json versions
        uses: ./.grafana-main/pkg/build/actions/bump-version
        with:
          version: 'patch'

      - name: Add package.json changes
        run: |
          git add package.json lerna.json yarn.lock packages public
          test -e e2e/test-plugins && git add e2e/test-plugins
          git commit -m "Update version to $VERSION"

      - name: Git push
        if: ${{ inputs.dry_run }} != true
        run: git push --set-upstream origin "release/${{ github.run_id }}/$VERSION"

      - name: Create PR without backports
        if: "${{ inputs.backport == '' }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ steps.branch.outputs.branch }}
        run: |
          LATEST_FLAG=""
          if [ "$LATEST" = "true" ]; then
            LATEST_FLAG='-l "release/latest"'
          fi
          gh pr create \
            $LATEST_FLAG \
            -l "no-changelog" \
            --dry-run="$DRY_RUN" \
            -B "$BRANCH" \
            --title "Release: $VERSION" \
            --body "These code changes must be merged after a release is complete"

      - name: Create PR with backports
        if: "${{ inputs.backport != '' }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ steps.branch.outputs.branch }}
        run: |
          LATEST_FLAG=""
          if [ "$LATEST" = "true" ]; then
            LATEST_FLAG='-l "release/latest"'
          fi
          gh pr create \
            $LATEST_FLAG \
            -l "product-approved" \
            -l "no-changelog" \
            --dry-run="$DRY_RUN" \
            -B "$BRANCH" \
            --title "Release: $VERSION" \
            --body "These code changes must be merged after a release is complete"
