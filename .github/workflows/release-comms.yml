# This workflow runs whenever the release PR is merged. It includes post-release communication processes like
# posting to slack, the website, community forums, etc.
# Only things that happen after a release is completed and all of the necessary code changes (like the changelog) are made.
name: Post-release
on:
  workflow_dispatch:
    inputs:
      dry_run:
        required: false
        default: true
      version:
        required: true
      latest:
        type: bool
        default: false
  pull_request:
    types:
    - closed
    branches:
    - 'main'
    - 'v*.*.*'

jobs:
  setup:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')) }}
    name: Setup and establish latest
    outputs:
      version: ${{ steps.output.outputs.version }}
      dry_run: ${{ steps.output.outputs.dry_run }}
      latest: ${{ steps.output.outputs.latest }}
    runs-on: ubuntu-latest
    steps:
    - if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo setting up GITHUB_ENV for ${{ github.event_name }}
        echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "DRY_RUN=${{ inputs.dry_run }}" >> $GITHUB_ENV
        echo "LATEST=${{ inputs.latest }}" >> $GITHUB_ENV
    - if: ${{ github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/') }}
      run: |
        echo "VERSION=$(echo ${{ github.head_ref }} | sed -e 's/release\/.*\///g')" >> $GITHUB_ENV
        echo "DRY_RUN=${{ contains(github.event.pull_request.labels.*.name, 'release/dry-run') }}" >> $GITHUB_ENV
        echo "LATEST=${{ contains(github.event.pull_request.labels.*.name, 'release/latest') }}" >> $GITHUB_ENV
    - id: output
      run: |
        echo "dry_run: $DRY_RUN"
        echo "latest: $LATEST"
        echo "version: $VERSION"

        echo "dry_run=$DRY_RUN" >> "$GITHUB_OUTPUT"
        echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  post_changelog_on_forum:
    needs: setup
    uses: ./.github/workflows/community-release.yml
    secrets:
      GRAFANA_MISC_STATS_API_KEY: ${{ secrets.GRAFANA_MISC_STATS_API_KEY }}
      GRAFANABOT_FORUM_KEY: ${{ secrets.GRAFANABOT_FORUM_KEY }}
    with:
      version: ${{ needs.setup.outputs.version }}
      dry_run: ${{ needs.setup.outputs.dry_run == 'true' }}
  create_github_release:
    # a github release requires a git tag
    # The github-release action retrieves the changelog using the /repos/grafana/grafana/contents/CHANGELOG.md API
    # endpoint.
    needs: setup
    uses: ./.github/workflows/github-release.yml
    with:
      version: ${{ needs.setup.outputs.version }}
      dry_run: ${{ needs.setup.outputs.dry_run == 'true' }}
      latest: ${{ needs.setup.outputs.latest }}
  post_on_slack:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo announce on slack that ${{ needs.setup.outputs.version }} has been released
        echo dry run: ${{ needs.setup.outputs.dry_run }}
