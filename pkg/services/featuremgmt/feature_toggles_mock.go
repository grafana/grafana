// Code generated by mockery v2.52.4. DO NOT EDIT.

package featuremgmt

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureToggles is an autogenerated mock type for the FeatureToggles type
type MockFeatureToggles struct {
	mock.Mock
}

type MockFeatureToggles_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureToggles) EXPECT() *MockFeatureToggles_Expecter {
	return &MockFeatureToggles_Expecter{mock: &_m.Mock}
}

// GetEnabled provides a mock function with given fields: ctx
func (_m *MockFeatureToggles) GetEnabled(ctx context.Context) map[string]bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabled")
	}

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func(context.Context) map[string]bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	return r0
}

// MockFeatureToggles_GetEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabled'
type MockFeatureToggles_GetEnabled_Call struct {
	*mock.Call
}

// GetEnabled is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeatureToggles_Expecter) GetEnabled(ctx interface{}) *MockFeatureToggles_GetEnabled_Call {
	return &MockFeatureToggles_GetEnabled_Call{Call: _e.mock.On("GetEnabled", ctx)}
}

func (_c *MockFeatureToggles_GetEnabled_Call) Run(run func(ctx context.Context)) *MockFeatureToggles_GetEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFeatureToggles_GetEnabled_Call) Return(_a0 map[string]bool) *MockFeatureToggles_GetEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureToggles_GetEnabled_Call) RunAndReturn(run func(context.Context) map[string]bool) *MockFeatureToggles_GetEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with given fields: ctx, flag
func (_m *MockFeatureToggles) IsEnabled(ctx context.Context, flag string) bool {
	ret := _m.Called(ctx, flag)

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, flag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFeatureToggles_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockFeatureToggles_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - flag string
func (_e *MockFeatureToggles_Expecter) IsEnabled(ctx interface{}, flag interface{}) *MockFeatureToggles_IsEnabled_Call {
	return &MockFeatureToggles_IsEnabled_Call{Call: _e.mock.On("IsEnabled", ctx, flag)}
}

func (_c *MockFeatureToggles_IsEnabled_Call) Run(run func(ctx context.Context, flag string)) *MockFeatureToggles_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFeatureToggles_IsEnabled_Call) Return(_a0 bool) *MockFeatureToggles_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureToggles_IsEnabled_Call) RunAndReturn(run func(context.Context, string) bool) *MockFeatureToggles_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabledGlobally provides a mock function with given fields: flag
func (_m *MockFeatureToggles) IsEnabledGlobally(flag string) bool {
	ret := _m.Called(flag)

	if len(ret) == 0 {
		panic("no return value specified for IsEnabledGlobally")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFeatureToggles_IsEnabledGlobally_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabledGlobally'
type MockFeatureToggles_IsEnabledGlobally_Call struct {
	*mock.Call
}

// IsEnabledGlobally is a helper method to define mock.On call
//   - flag string
func (_e *MockFeatureToggles_Expecter) IsEnabledGlobally(flag interface{}) *MockFeatureToggles_IsEnabledGlobally_Call {
	return &MockFeatureToggles_IsEnabledGlobally_Call{Call: _e.mock.On("IsEnabledGlobally", flag)}
}

func (_c *MockFeatureToggles_IsEnabledGlobally_Call) Run(run func(flag string)) *MockFeatureToggles_IsEnabledGlobally_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFeatureToggles_IsEnabledGlobally_Call) Return(_a0 bool) *MockFeatureToggles_IsEnabledGlobally_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureToggles_IsEnabledGlobally_Call) RunAndReturn(run func(string) bool) *MockFeatureToggles_IsEnabledGlobally_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFeatureToggles creates a new instance of MockFeatureToggles. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureToggles(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureToggles {
	mock := &MockFeatureToggles{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
