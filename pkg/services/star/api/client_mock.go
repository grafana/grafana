// Code generated by mockery v2.53.4. DO NOT EDIT.

package api

import (
	contextmodel "github.com/grafana/grafana/pkg/services/contexthandler/model"
	mock "github.com/stretchr/testify/mock"

	response "github.com/grafana/grafana/pkg/api/response"
)

// MockK8sClients is an autogenerated mock type for the K8sClients type
type MockK8sClients struct {
	mock.Mock
}

type MockK8sClients_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK8sClients) EXPECT() *MockK8sClients_Expecter {
	return &MockK8sClients_Expecter{mock: &_m.Mock}
}

// AddStar provides a mock function with given fields: c, uid
func (_m *MockK8sClients) AddStar(c *contextmodel.ReqContext, uid string) error {
	ret := _m.Called(c, uid)

	if len(ret) == 0 {
		panic("no return value specified for AddStar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contextmodel.ReqContext, string) error); ok {
		r0 = rf(c, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClients_AddStar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStar'
type MockK8sClients_AddStar_Call struct {
	*mock.Call
}

// AddStar is a helper method to define mock.On call
//   - c *contextmodel.ReqContext
//   - uid string
func (_e *MockK8sClients_Expecter) AddStar(c interface{}, uid interface{}) *MockK8sClients_AddStar_Call {
	return &MockK8sClients_AddStar_Call{Call: _e.mock.On("AddStar", c, uid)}
}

func (_c *MockK8sClients_AddStar_Call) Run(run func(c *contextmodel.ReqContext, uid string)) *MockK8sClients_AddStar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contextmodel.ReqContext), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClients_AddStar_Call) Return(_a0 error) *MockK8sClients_AddStar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClients_AddStar_Call) RunAndReturn(run func(*contextmodel.ReqContext, string) error) *MockK8sClients_AddStar_Call {
	_c.Call.Return(run)
	return _c
}

// GetDashboardID provides a mock function with given fields: c, uid
func (_m *MockK8sClients) GetDashboardID(c *contextmodel.ReqContext, uid string) (int64, response.Response) {
	ret := _m.Called(c, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboardID")
	}

	var r0 int64
	var r1 response.Response
	if rf, ok := ret.Get(0).(func(*contextmodel.ReqContext, string) (int64, response.Response)); ok {
		return rf(c, uid)
	}
	if rf, ok := ret.Get(0).(func(*contextmodel.ReqContext, string) int64); ok {
		r0 = rf(c, uid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*contextmodel.ReqContext, string) response.Response); ok {
		r1 = rf(c, uid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(response.Response)
		}
	}

	return r0, r1
}

// MockK8sClients_GetDashboardID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardID'
type MockK8sClients_GetDashboardID_Call struct {
	*mock.Call
}

// GetDashboardID is a helper method to define mock.On call
//   - c *contextmodel.ReqContext
//   - uid string
func (_e *MockK8sClients_Expecter) GetDashboardID(c interface{}, uid interface{}) *MockK8sClients_GetDashboardID_Call {
	return &MockK8sClients_GetDashboardID_Call{Call: _e.mock.On("GetDashboardID", c, uid)}
}

func (_c *MockK8sClients_GetDashboardID_Call) Run(run func(c *contextmodel.ReqContext, uid string)) *MockK8sClients_GetDashboardID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contextmodel.ReqContext), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClients_GetDashboardID_Call) Return(_a0 int64, _a1 response.Response) *MockK8sClients_GetDashboardID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClients_GetDashboardID_Call) RunAndReturn(run func(*contextmodel.ReqContext, string) (int64, response.Response)) *MockK8sClients_GetDashboardID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStars provides a mock function with given fields: c
func (_m *MockK8sClients) GetStars(c *contextmodel.ReqContext) ([]string, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetStars")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*contextmodel.ReqContext) ([]string, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*contextmodel.ReqContext) []string); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*contextmodel.ReqContext) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClients_GetStars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStars'
type MockK8sClients_GetStars_Call struct {
	*mock.Call
}

// GetStars is a helper method to define mock.On call
//   - c *contextmodel.ReqContext
func (_e *MockK8sClients_Expecter) GetStars(c interface{}) *MockK8sClients_GetStars_Call {
	return &MockK8sClients_GetStars_Call{Call: _e.mock.On("GetStars", c)}
}

func (_c *MockK8sClients_GetStars_Call) Run(run func(c *contextmodel.ReqContext)) *MockK8sClients_GetStars_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contextmodel.ReqContext))
	})
	return _c
}

func (_c *MockK8sClients_GetStars_Call) Return(_a0 []string, _a1 error) *MockK8sClients_GetStars_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClients_GetStars_Call) RunAndReturn(run func(*contextmodel.ReqContext) ([]string, error)) *MockK8sClients_GetStars_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStar provides a mock function with given fields: c, uid
func (_m *MockK8sClients) RemoveStar(c *contextmodel.ReqContext, uid string) error {
	ret := _m.Called(c, uid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contextmodel.ReqContext, string) error); ok {
		r0 = rf(c, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClients_RemoveStar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStar'
type MockK8sClients_RemoveStar_Call struct {
	*mock.Call
}

// RemoveStar is a helper method to define mock.On call
//   - c *contextmodel.ReqContext
//   - uid string
func (_e *MockK8sClients_Expecter) RemoveStar(c interface{}, uid interface{}) *MockK8sClients_RemoveStar_Call {
	return &MockK8sClients_RemoveStar_Call{Call: _e.mock.On("RemoveStar", c, uid)}
}

func (_c *MockK8sClients_RemoveStar_Call) Run(run func(c *contextmodel.ReqContext, uid string)) *MockK8sClients_RemoveStar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contextmodel.ReqContext), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClients_RemoveStar_Call) Return(_a0 error) *MockK8sClients_RemoveStar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClients_RemoveStar_Call) RunAndReturn(run func(*contextmodel.ReqContext, string) error) *MockK8sClients_RemoveStar_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockK8sClients creates a new instance of MockK8sClients. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockK8sClients(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK8sClients {
	mock := &MockK8sClients{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
