// Code generated by mockery v2.42.1. DO NOT EDIT.

package authtest

import (
	context "context"

	auth "github.com/grafana/grafana/pkg/services/auth"

	mock "github.com/stretchr/testify/mock"

	usertoken "github.com/grafana/grafana/pkg/models/usertoken"
)

// MockUserAuthTokenService is an autogenerated mock type for the UserTokenService type
type MockUserAuthTokenService struct {
	mock.Mock
}

// ActiveTokenCount provides a mock function with given fields: ctx, userID
func (_m *MockUserAuthTokenService) ActiveTokenCount(ctx context.Context, userID *int64) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ActiveTokenCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int64) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, cmd
func (_m *MockUserAuthTokenService) CreateToken(ctx context.Context, cmd *auth.CreateTokenCommand) (*usertoken.UserToken, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.CreateTokenCommand) (*usertoken.UserToken, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.CreateTokenCommand) *usertoken.UserToken); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.CreateTokenCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExternalSessions provides a mock function with given fields: ctx, query
func (_m *MockUserAuthTokenService) FindExternalSessions(ctx context.Context, query *auth.ListExternalSessionQuery) ([]*auth.ExternalSession, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for FindExternalSessions")
	}

	var r0 []*auth.ExternalSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ListExternalSessionQuery) ([]*auth.ExternalSession, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ListExternalSessionQuery) []*auth.ExternalSession); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*auth.ExternalSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.ListExternalSessionQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalSession provides a mock function with given fields: ctx, externalSessionID
func (_m *MockUserAuthTokenService) GetExternalSession(ctx context.Context, externalSessionID int64) (*auth.ExternalSession, error) {
	ret := _m.Called(ctx, externalSessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetExternalSession")
	}

	var r0 *auth.ExternalSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*auth.ExternalSession, error)); ok {
		return rf(ctx, externalSessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *auth.ExternalSession); ok {
		r0 = rf(ctx, externalSessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ExternalSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, externalSessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenByExternalSessionID provides a mock function with given fields: ctx, externalSessionID
func (_m *MockUserAuthTokenService) GetTokenByExternalSessionID(ctx context.Context, externalSessionID int64) (*usertoken.UserToken, error) {
	ret := _m.Called(ctx, externalSessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenByExternalSessionID")
	}

	var r0 *usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*usertoken.UserToken, error)); ok {
		return rf(ctx, externalSessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *usertoken.UserToken); ok {
		r0 = rf(ctx, externalSessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, externalSessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRevokedTokens provides a mock function with given fields: ctx, userID
func (_m *MockUserAuthTokenService) GetUserRevokedTokens(ctx context.Context, userID int64) ([]*usertoken.UserToken, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRevokedTokens")
	}

	var r0 []*usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*usertoken.UserToken, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*usertoken.UserToken); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserToken provides a mock function with given fields: ctx, userID, userTokenID
func (_m *MockUserAuthTokenService) GetUserToken(ctx context.Context, userID int64, userTokenID int64) (*usertoken.UserToken, error) {
	ret := _m.Called(ctx, userID, userTokenID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserToken")
	}

	var r0 *usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*usertoken.UserToken, error)); ok {
		return rf(ctx, userID, userTokenID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *usertoken.UserToken); ok {
		r0 = rf(ctx, userID, userTokenID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userID, userTokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTokens provides a mock function with given fields: ctx, userID
func (_m *MockUserAuthTokenService) GetUserTokens(ctx context.Context, userID int64) ([]*usertoken.UserToken, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTokens")
	}

	var r0 []*usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*usertoken.UserToken, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*usertoken.UserToken); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupToken provides a mock function with given fields: ctx, unhashedToken
func (_m *MockUserAuthTokenService) LookupToken(ctx context.Context, unhashedToken string) (*usertoken.UserToken, error) {
	ret := _m.Called(ctx, unhashedToken)

	if len(ret) == 0 {
		panic("no return value specified for LookupToken")
	}

	var r0 *usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*usertoken.UserToken, error)); ok {
		return rf(ctx, unhashedToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *usertoken.UserToken); ok {
		r0 = rf(ctx, unhashedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, unhashedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAllUserTokens provides a mock function with given fields: ctx, userID
func (_m *MockUserAuthTokenService) RevokeAllUserTokens(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllUserTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeToken provides a mock function with given fields: ctx, token, soft
func (_m *MockUserAuthTokenService) RevokeToken(ctx context.Context, token *usertoken.UserToken, soft bool) error {
	ret := _m.Called(ctx, token, soft)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *usertoken.UserToken, bool) error); ok {
		r0 = rf(ctx, token, soft)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RotateToken provides a mock function with given fields: ctx, cmd
func (_m *MockUserAuthTokenService) RotateToken(ctx context.Context, cmd auth.RotateCommand) (*usertoken.UserToken, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for RotateToken")
	}

	var r0 *usertoken.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.RotateCommand) (*usertoken.UserToken, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.RotateCommand) *usertoken.UserToken); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usertoken.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.RotateCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExternalSession provides a mock function with given fields: ctx, externalSessionID, cmd
func (_m *MockUserAuthTokenService) UpdateExternalSession(ctx context.Context, externalSessionID int64, cmd *auth.UpdateExternalSessionCommand) error {
	ret := _m.Called(ctx, externalSessionID, cmd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExternalSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *auth.UpdateExternalSessionCommand) error); ok {
		r0 = rf(ctx, externalSessionID, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockUserAuthTokenService creates a new instance of MockUserAuthTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAuthTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAuthTokenService {
	mock := &MockUserAuthTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
