// Code generated by mockery v2.37.1. DO NOT EDIT.

package fakes

import (
	context "context"

	secrets "github.com/grafana/grafana/pkg/services/secrets"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: ctx, payload
func (_m *MockService) Decrypt(ctx context.Context, payload []byte) ([]byte, error) {
	ret := _m.Called(ctx, payload)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecryptJsonData provides a mock function with given fields: ctx, sjd
func (_m *MockService) DecryptJsonData(ctx context.Context, sjd map[string][]byte) (map[string]string, error) {
	ret := _m.Called(ctx, sjd)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte) (map[string]string, error)); ok {
		return rf(ctx, sjd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte) map[string]string); ok {
		r0 = rf(ctx, sjd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string][]byte) error); ok {
		r1 = rf(ctx, sjd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: ctx, payload, opt
func (_m *MockService) Encrypt(ctx context.Context, payload []byte, opt secrets.EncryptionOptions) ([]byte, error) {
	ret := _m.Called(ctx, payload, opt)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, secrets.EncryptionOptions) ([]byte, error)); ok {
		return rf(ctx, payload, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, secrets.EncryptionOptions) []byte); ok {
		r0 = rf(ctx, payload, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, secrets.EncryptionOptions) error); ok {
		r1 = rf(ctx, payload, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptJsonData provides a mock function with given fields: ctx, kv, opt
func (_m *MockService) EncryptJsonData(ctx context.Context, kv map[string]string, opt secrets.EncryptionOptions) (map[string][]byte, error) {
	ret := _m.Called(ctx, kv, opt)

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, secrets.EncryptionOptions) (map[string][]byte, error)); ok {
		return rf(ctx, kv, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, secrets.EncryptionOptions) map[string][]byte); ok {
		r0 = rf(ctx, kv, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, secrets.EncryptionOptions) error); ok {
		r1 = rf(ctx, kv, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDecryptedValue provides a mock function with given fields: ctx, sjd, key, fallback
func (_m *MockService) GetDecryptedValue(ctx context.Context, sjd map[string][]byte, key string, fallback string) string {
	ret := _m.Called(ctx, sjd, key, fallback)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte, string, string) string); ok {
		r0 = rf(ctx, sjd, key, fallback)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReEncryptDataKeys provides a mock function with given fields: ctx
func (_m *MockService) ReEncryptDataKeys(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RotateDataKeys provides a mock function with given fields: ctx
func (_m *MockService) RotateDataKeys(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
