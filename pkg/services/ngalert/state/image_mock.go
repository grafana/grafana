// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/grafana/pkg/services/ngalert/state (interfaces: ImageCapturer)

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/grafana/grafana/pkg/services/ngalert/models"
)

// MockImageCapturer is a mock of ImageCapturer interface.
type MockImageCapturer struct {
	ctrl     *gomock.Controller
	recorder *MockImageCapturerMockRecorder
}

// MockImageCapturerMockRecorder is the mock recorder for MockImageCapturer.
type MockImageCapturerMockRecorder struct {
	mock *MockImageCapturer
}

// NewMockImageCapturer creates a new mock instance.
func NewMockImageCapturer(ctrl *gomock.Controller) *MockImageCapturer {
	mock := &MockImageCapturer{ctrl: ctrl}
	mock.recorder = &MockImageCapturerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageCapturer) EXPECT() *MockImageCapturerMockRecorder {
	return m.recorder
}

// NewImage mocks base method.
func (m *MockImageCapturer) NewImage(arg0 context.Context, arg1 *models.AlertRule) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewImage", arg0, arg1)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewImage indicates an expected call of NewImage.
func (mr *MockImageCapturerMockRecorder) NewImage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImage", reflect.TypeOf((*MockImageCapturer)(nil).NewImage), arg0, arg1)
}
