package channels_config

// GetAvailableMimirNotifiers returns the metadata of all the cloud notification channels that can be configured.
func GetAvailableMimirNotifiers() []*NotifierPlugin {
	basicAuthOption := func() NotifierOption {
		return NotifierOption{
			Label:        "Basic auth",
			Description:  "Sets the `Authorization` header with the configured username and password.",
			PropertyName: "basic_auth",
			Element:      ElementTypeSubform,
			SubformOptions: []NotifierOption{
				{
					Label:        "Username",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "username",
				},
				{
					Label:        "Password",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "password",
					Secure:       true,
				},
			},
		}
	}

	tlsConfigOption := func() NotifierOption {
		return NotifierOption{
			Label:        "TLS config",
			Description:  "Configures the TLS settings.",
			PropertyName: "tls_config",
			Element:      ElementTypeSubform,
			SubformOptions: []NotifierOption{
				{
					Label:        "Server name",
					Description:  "ServerName extension to indicate the name of the server.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "server_name",
				},
				{
					Label:        "Skip verify",
					Description:  "Disable validation of the server certificate.",
					Element:      ElementTypeCheckbox,
					PropertyName: "insecure_skip_verify",
				},
			},
		}
	}

	oauth2ConfigOption := func() NotifierOption {
		return NotifierOption{
			Label:        "OAuth2",
			Description:  "Configures the OAuth2 settings.",
			PropertyName: "oauth2",
			Element:      ElementTypeSubform,
			SubformOptions: []NotifierOption{
				{
					Label:        "Client ID",
					Description:  "The OAuth2 client ID",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "client_id",
					Required:     true,
				},
				{
					Label:        "Client secret",
					Description:  "The OAuth2 client secret",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "client_secret",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Token URL",
					Description:  "The OAuth2 token exchange URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "token_url",
					Required:     true,
				},
				{
					Label:        "Scopes",
					Description:  "Comma-separated list of scopes",
					Element:      ElementStringArray,
					PropertyName: "scopes",
				},
				{
					Label:        "Additional parameters",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "endpoint_params",
				},
			},
		}
	}

	httpConfigOption := func() NotifierOption {
		return NotifierOption{
			Label:        "HTTP Config",
			Description:  "Note that `basic_auth` and `bearer_token` options are mutually exclusive.",
			PropertyName: "http_config",
			Element:      ElementTypeSubform,
			SubformOptions: []NotifierOption{
				{
					Label:        "Bearer token",
					Description:  "Sets the `Authorization` header with the configured bearer token.",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "bearer_token",
					Secure:       true,
				},
				{
					Label:        "Proxy URL",
					Description:  "Optional proxy URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "proxy_url",
				},
				basicAuthOption(),
				tlsConfigOption(),
				oauth2ConfigOption(),
			},
		}
	}

	return []*NotifierPlugin{
		{
			Type:        "email",
			Name:        "Email",
			Description: "Send notification over SMTP",
			Heading:     "Email settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "To",
					Description:  "The email address to send notifications to. You can enter multiple addresses using a \",\" separator",
					Element:      ElementTypeTextArea,
					PropertyName: "to",
					Required:     true,
				},
				{
					Label:        "From",
					Description:  "The sender address.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "from",
				},
				{
					Label:        "SMTP host",
					Description:  "The SMTP host through which emails are sent.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "smarthost",
				},
				{
					Label:        "Hello",
					Description:  "The hostname to identify to the SMTP server.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "hello",
				},
				{
					Label:        "Username",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "auth_username",
				},
				{
					Label:        "Password",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "auth_password",
					Secure:       true,
				},
				{
					Label:        "Secret",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "auth_secret",
					Secure:       true,
				},
				{
					Label:        "Identity",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "auth_identity",
				},
				{
					Label:        "Require TLS",
					Description:  "The SMTP TLS requirement",
					Element:      ElementTypeCheckbox,
					PropertyName: "require_tls",
				},
				{
					Label:        "Email HTML body",
					Description:  "The HTML body of the email notification.",
					Placeholder:  "{{ template \"email.default.html\" . }}",
					Element:      ElementTypeTextArea,
					PropertyName: "html",
				},
				{
					Label:        "Email text body",
					Description:  "The text body of the email notification.",
					Element:      ElementTypeTextArea,
					PropertyName: "text",
				},
				{
					Label:        "Headers",
					Description:  "Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "headers",
				},
				tlsConfigOption(),
			},
		},
		{
			Type:        "pagerduty",
			Name:        "PagerDuty",
			Description: "Send notifications to PagerDuty",
			Heading:     "PagerDuty settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "Routing key",
					Description:  "The PagerDuty integration key (when using PagerDuty integration type `Events API v2`)",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "routing_key",
					Secure:       true,
				},
				{
					Label:        "Service key",
					Description:  "The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "service_key",
					Secure:       true,
				},
				{
					Label:        "URL",
					Description:  "The URL to send API requests to",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
				},
				{
					Label:        "Client",
					Description:  "The client identification of the Alertmanager.",
					Placeholder:  "{{ template \"pagerduty.default.client\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "client",
				},
				{
					Label:        "Client URL",
					Description:  "A backlink to the sender of the notification.",
					Placeholder:  "{{ template \"pagerduty.default.clientURL\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "client_url",
				},
				{
					Label:        "Description",
					Description:  "A description of the incident.",
					Placeholder:  "{{ template \"pagerduty.default.description\" .}}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "description",
				},
				{
					Label:        "Severity",
					Description:  "Severity of the incident.",
					Placeholder:  "error",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "severity",
				},
				{
					Label:        "Details",
					Description:  "A set of arbitrary key/value pairs that provide further detail about the incident.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "details",
				},
				{
					Label:        "Images",
					Description:  "Images to attach to the incident.",
					Element:      ElementSubformArray,
					PropertyName: "images",
					SubformOptions: []NotifierOption{
						{
							Label:        "URL",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "href",
							Required:     true,
						},
						{
							Label:        "Source",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "source",
							Required:     true,
						},
						{
							Label:        "Alt",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "alt",
							Required:     true,
						},
					},
				},
				{
					Label:        "Links",
					Description:  "Links to attach to the incident.",
					Element:      ElementSubformArray,
					PropertyName: "links",
					SubformOptions: []NotifierOption{
						{
							Label:        "URL",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "href",
							Required:     true,
						},
						{
							Label:        "Text",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "text",
							Required:     true,
						},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "pushover",
			Name:        "Pushover",
			Description: "Send notifications to Pushover",
			Heading:     "Pushover settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "User key",
					Description:  "The recipient user’s user key.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "user_key",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Token",
					Description:  "Your registered application’s API token, see https://pushover.net/app",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "token",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Title",
					Description:  "Notification title.",
					Placeholder:  "{{ template \"pushover.default.title\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Message",
					Description:  "Notification message.",
					Placeholder:  "{{ template \"pushover.default.message\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "URL",
					Description:  "A supplementary URL shown alongside the message.",
					Placeholder:  "{{ template \"pushover.default.url\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
				},
				{
					Label:        "Priority",
					Description:  "Priority, see https://pushover.net/api#priority",
					Placeholder:  "{{ if eq .Status \"firing\" }}2{{ else }}0{{ end }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "priority",
				},
				{
					Label:        "Retry",
					Description:  "How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.",
					Placeholder:  "1m",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "retry",
				},
				{
					Label:        "Expire",
					Description:  "How long your notification will continue to be retried for, unless the user acknowledges the notification.",
					Placeholder:  "1h",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "expire",
				},
				{
					Label:          "TTL",
					Description:    "The number of seconds before a message expires and is deleted automatically. Examples: 10s, 5m30s, 8h.",
					Element:        ElementTypeInput,
					InputType:      InputTypeText,
					PropertyName:   "ttl",
					ValidationRule: "^(\\d+[s|m|h])+$|^$",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "slack",
			Name:        "Slack",
			Description: "Send notifications to Slack",
			Heading:     "Slack settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "Webhook URL",
					Description:  "The Slack webhook URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
					Secure:       true,
				},
				{
					Label:        "Channel",
					Description:  "The #channel or @user to send notifications to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "channel",
					Required:     true,
				},
				{
					Label:        "Emoji icon",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "icon_emoji",
				},
				{
					Label:        "Icon URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "icon_url",
				},
				{
					Label:        "Names link",
					Element:      ElementTypeCheckbox,
					PropertyName: "link_names",
				},
				{
					Label:        "Username",
					Placeholder:  "{{ template \"slack.default.username\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "username",
				},
				{
					Label:        "Callback ID",
					Placeholder:  "{{ template \"slack.default.callbackid\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "callback_id",
				},
				{
					Label:        "Color",
					Placeholder:  "{{ if eq .Status \"firing\" }}danger{{ else }}good{{ end }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "color",
				},
				{
					Label:        "Fallback",
					Placeholder:  "{{ template \"slack.default.fallback\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "fallback",
				},
				{
					Label:        "Footer",
					Placeholder:  "{{ template \"slack.default.footer\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "footer",
				},
				{
					Label:        "Mrkdwn fields",
					Description:  "An array of field names that should be formatted by mrkdwn syntax.",
					Element:      ElementStringArray,
					PropertyName: "mrkdwn_in",
				},
				{
					Label:        "Pre-text",
					Placeholder:  "{{ template \"slack.default.pretext\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "pretext",
				},
				{
					Label:        "Short fields",
					Element:      ElementTypeCheckbox,
					PropertyName: "short_fields",
				},
				{
					Label:        "Message body",
					Placeholder:  "{{ template \"slack.default.text\" . }}",
					Element:      ElementTypeTextArea,
					PropertyName: "text",
				},
				{
					Label:        "Title",
					Placeholder:  "{{ template \"slack.default.title\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Title link",
					Placeholder:  "{{ template \"slack.default.titlelink\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title_link",
				},
				{
					Label:        "Image URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "image_url",
				},
				{
					Label:        "Thumbnail URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "thumb_url",
				},
				{
					Label:        "Actions",
					Element:      ElementSubformArray,
					PropertyName: "actions",
					SubformOptions: []NotifierOption{
						{
							Label:        "Text",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "text",
							Required:     true,
						},
						{
							Label:        "Type",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "type",
							Required:     true,
						},
						{
							Label:        "URL",
							Description:  "Either url or name and value are mandatory.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "url",
						},
						{
							Label:        "Name",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "name",
						},
						{
							Label:        "Value",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "value",
						},
						{
							Label:        "Confirm",
							Element:      ElementTypeSubform,
							PropertyName: "confirm",
							SubformOptions: []NotifierOption{
								{
									Label:        "Text",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "text",
									Required:     true,
								},
								{
									Label:        "Dismiss text",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "dismiss_text",
								},
								{
									Label:        "OK text",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "ok_text",
								},
								{
									Label:        "Title",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "title",
								},
							},
						},
						{
							Label:        "Style",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "style",
						},
					},
				},
				{
					Label:        "Fields",
					Element:      ElementSubformArray,
					PropertyName: "fields",
					SubformOptions: []NotifierOption{
						{
							Label:        "Title",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "title",
							Required:     true,
						},
						{
							Label:        "Value",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "value",
							Required:     true,
						},
						{
							Label:        "Short",
							Element:      ElementTypeCheckbox,
							PropertyName: "short",
						},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "jira",
			Name:        "Jira",
			Description: "Send notifications to Jira Service Management",
			Heading:     "Jira settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The host to send Jira API requests to",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
					Required:     true,
				},
				{
					Label:        "Project Key",
					Description:  "The project key where issues are created",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "project",
					Required:     true,
				},
				{
					Label:        "Summary",
					Description:  "Issue summary template",
					Placeholder:  "{{ template \"jira.default.summary\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "summary",
				},
				{
					Label:        "Description",
					Description:  "Issue description template",
					Placeholder:  "{{ template \"jira.default.description\" . }}",
					Element:      ElementTypeTextArea,
					PropertyName: "description",
				},
				{
					Label:        "Labels",
					Description:  " Labels to be added to the issue",
					Element:      ElementStringArray,
					PropertyName: "labels",
				},
				{
					Label:        "Priority",
					Description:  "Priority of the issue",
					Placeholder:  "{{ template \"jira.default.priority\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "priority",
				},
				{
					Label:        "Issue Type",
					Description:  "Type of the issue (e.g. Bug)",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "issue_type",
					Required:     true,
				},
				{
					Label:        "Reopen transition",
					Description:  "Name of the workflow transition to reopen an issue. The target status should not have the category \"done\"",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "reopen_transition",
				},
				{
					Label:        "Resolve transition",
					Description:  "Name of the workflow transition to resolve an issue. The target status must have the category \"done\"",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "resolve_transition",
				},
				{
					Label:        "Won't fix resolution",
					Description:  "If \"Reopen transition\" is defined, ignore issues with that resolution",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "wont_fix_resolution",
				},
				{
					Label:        "Reopen duration",
					Description:  "If \"Reopen transition\" is defined, reopen the issue when it is not older than this value (rounded down to the nearest minute)",
					Placeholder:  "Use duration format, for example: 1.2s, 100ms",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "reopen_duration",
				},
				{
					Label:        "Fields",
					Description:  "Other issue and custom fields",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "fields",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "opsgenie",
			Name:        "OpsGenie",
			Description: "Send notifications to OpsGenie",
			Heading:     "OpsGenie settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API key",
					Description:  "The API key to use when talking to the OpsGenie API.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_key",
					Secure:       true,
				},
				{
					Label:        "API URL",
					Description:  "The host to send OpsGenie API requests to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Message",
					Description:  "Alert text limited to 130 characters.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Description",
					Description:  "A description of the incident.",
					Placeholder:  "{{ template \"opsgenie.default.description\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "description",
				},
				{
					Label:        "Source",
					Description:  "A backlink to the sender of the notification.",
					Placeholder:  "{{ template \"opsgenie.default.source\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "source",
				},
				{
					Label:        "Details",
					Description:  "A set of arbitrary key/value pairs that provide further detail about the incident.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "details",
				},
				{
					Label:        "Tags",
					Description:  "Comma separated list of tags attached to the notifications.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "tags",
				},
				{
					Label:        "Note",
					Description:  "Additional alert note.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "note",
				},
				{
					Label:        "Priority",
					Description:  "Priority level of alert. Possible values are P1, P2, P3, P4, and P5.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "priority",
				},
				{
					Label:        "Responders",
					Description:  "List of responders responsible for notifications.",
					Element:      ElementSubformArray,
					PropertyName: "responders",
					SubformOptions: []NotifierOption{
						{
							Label:        "Type",
							Description:  "\"team\", \"user\", \"escalation\" or schedule\".",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "type",
							Required:     true,
						},
						{
							Label:        "ID",
							Description:  "Exactly one of these fields should be defined.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "id",
						},
						{
							Label:        "Name",
							Description:  "Exactly one of these fields should be defined.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "name",
						},
						{
							Label:        "Username",
							Description:  "Exactly one of these fields should be defined.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "username",
						},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "victorops",
			Name:        "VictorOps",
			Description: "Send notifications to VictorOps",
			Heading:     "VictorOps settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API key",
					Description:  "The API key to use when talking to the VictorOps API.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_key",
					Secure:       true,
				},
				{
					Label:        "API URL",
					Description:  "The VictorOps API URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Routing key",
					Description:  "A key used to map the alert to a team.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "routing_key",
					Required:     true,
				},
				{
					Label:        "Message type",
					Description:  "Describes the behavior of the alert (CRITICAL, WARNING, INFO).",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message_type",
				},
				{
					Label:        "Entity display name",
					Description:  "Contains summary of the alerted problem.",
					Placeholder:  "{{ template \"victorops.default.entity_display_name\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "entity_display_name",
				},
				{
					Label:        "State message",
					Description:  "Contains long explanation of the alerted problem.",
					Placeholder:  "{{ template \"victorops.default.state_message\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "state_message",
				},
				{
					Label:        "Monitoring tool",
					Description:  "The monitoring tool the state message is from.",
					Placeholder:  "{{ template \"victorops.default.monitoring_tool\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "monitoring_tool",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "webhook",
			Name:        "Webhook",
			Description: "Send notifications to a webhook",
			Heading:     "Webhook settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Description:  "The endpoint to send HTTP POST requests to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
					Secure:       true,
					Required:     true,
				},
				{
					Label:          "Max alerts",
					Description:    "The maximum number of alerts to include in a single webhook message. Alerts above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.",
					Placeholder:    "0",
					Element:        ElementTypeInput,
					InputType:      "number",
					PropertyName:   "max_alerts",
					ValidationRule: "(^\\d+$|^$)",
				},
				{
					Label:        "Timeout",
					Description:  "The maximum time to wait for a webhook request to complete, before failing the request and allowing it to be retried. The default value of 0s indicates that no timeout should be applied. NOTE: This will have no effect if set higher than the group_interval.",
					Placeholder:  "Use duration format, for example: 1.2s, 100ms",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "timeout",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "discord",
			Name:        "Discord",
			Description: "Sends notifications to Discord",
			Heading:     "Discord settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "Title",
					Description:  "Templated title of the message",
					Placeholder:  "{{ template \"discord.default.title\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Message Content",
					Description:  "Mention a group using @ or a user using <@ID> when notifying in a channel",
					Placeholder:  "{{ template \"discord.default.message\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Webhook URL",
					Placeholder:  "Discord webhook URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "webhook_url",
					Required:     true,
					Secure:       true,
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "webex",
			Name:        "Cisco Webex Teams",
			Description: "Sends notifications to Cisco Webex Teams",
			Heading:     "Cisco Webex Teams settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The Webex Teams API URL",
					Placeholder:  "https://webexapis.com/v1/messages",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Room ID",
					Description:  "ID of the Webex Teams room where to send the messages",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "room_id",
					Required:     true,
				},
				{
					Label:        "Message",
					Description:  "Message template",
					Placeholder:  "{{ template \"webex.default.message\" .}}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "telegram",
			Name:        "Telegram",
			Description: "Sends notifications to Telegram",
			Heading:     "Telegram settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The Telegram API URL",
					Placeholder:  "https://api.telegram.org",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Bot token",
					Description:  "Telegram bot token",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "bot_token",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Chat ID",
					Description:  "ID of the chat where to send the messages",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "chat_id",
					Required:     true,
				},
				{
					Label:        "Message",
					Description:  "Message template",
					Placeholder:  "{{ template \"webex.default.message\" .}}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Disable notifications",
					Description:  "Disable telegram notifications",
					Element:      ElementTypeCheckbox,
					PropertyName: "disable_notifications",
				},
				{
					Label:        "Parse mode",
					Description:  "Parse mode for telegram message",
					Element:      ElementTypeSelect,
					PropertyName: "parse_mode",
					SelectOptions: []SelectOption{
						{Value: "", Label: "None"},
						{Value: "MarkdownV2", Label: "MarkdownV2"},
						{Value: "Markdown", Label: "Markdown"},
						{Value: "HTML", Label: "HTML"},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "sns",
			Name:        "Amazon SNS",
			Description: "Sends notifications to Amazon SNS",
			Heading:     "Amazon SNS settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The Amazon SNS API URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "SigV4 authentication",
					Description:  "Configures AWS's Signature Verification 4 signing process to sign requests",
					Element:      ElementTypeSubform,
					PropertyName: "sigv4",
					SubformOptions: []NotifierOption{
						{
							Label:        "Region",
							Description:  "The AWS region. If blank, the region from the default credentials chain is used",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "region",
						},
						{
							Label:        "Access key",
							Description:  "The AWS API access_key. If blank the environment variable \"AWS_ACCESS_KEY_ID\" is used",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "access_key",
							Secure:       true,
						},
						{
							Label:        "Secret key",
							Description:  "The AWS API secret_key. If blank the environment variable \"AWS_ACCESS_SECRET_ID\" is used",
							Element:      ElementTypeInput,
							InputType:    InputTypePassword,
							PropertyName: "secret_key",
							Secure:       true,
						},
						{
							Label:        "Profile",
							Description:  "Named AWS profile used to authenticate",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "profile",
						},
						{
							Label:        "Role ARN",
							Description:  "AWS Role ARN, an alternative to using AWS API keys",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "role_arn",
						},
					},
				},
				{
					Label:        "SNS topic ARN",
					Description:  "If you don't specify this value, you must specify a value for the phone_number or target_arn. If you are using a FIFO SNS topic you should set a message group interval longer than 5 minutes to prevent messages with the same group key being deduplicated by the SNS default deduplication window",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "topic_arn",
				},
				{
					Label:        "Phone number",
					Description:  "Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the topic_arn or target_arn",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "phone_number",
				},
				{
					Label:        "Target ARN",
					Description:  "The mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or phone_number",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "target_arn",
				},
				{
					Label:        "Subject",
					Description:  "Subject line when the message is delivered",
					Placeholder:  "{{ template \"sns.default.subject\" .}}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "subject",
				},
				{
					Label:        "Message",
					Description:  "The message content of the SNS notification",
					Placeholder:  "{{ template \"sns.default.message\" .}}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Attributes",
					Description:  "SNS message attributes",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "attributes",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "wechat",
			Name:        "WeChat",
			Description: "Sends notifications to WeChat",
			Heading:     "WeChat settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "API Secret",
					Description:  "The API key to use when talking to the WeChat API",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_secret",
					Secure:       true,
				},
				{
					Label:        "Corp ID",
					Description:  "The corp id for authentication",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "corp_id",
				},
				{
					Label:        "Message",
					Description:  "API request data as defined by the WeChat API",
					Placeholder:  "{{ template \"wechat.default.message\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Message type",
					Description:  "Type of the message type",
					Element:      ElementTypeSelect,
					PropertyName: "message_type",
					SelectOptions: []SelectOption{
						{Value: "text", Label: "Text"},
						{Value: "markdown", Label: "Markdown"},
					},
				},
				{
					Label:        "Agent ID",
					Placeholder:  "{{ template \"wechat.default.agent_id\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "agent_id",
				},
				{
					Label:        "to user",
					Placeholder:  "{{ template \"wechat.default.to_user\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "to_user",
				},
				{
					Label:        "to party",
					Placeholder:  "{{ template \"wechat.default.to_party\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "to_party",
				},
				{
					Label:        "to tag",
					Placeholder:  "{{ template \"wechat.default.to_tag\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "to_tag",
				},
			},
		},
		{
			Type:        "msteams",
			Name:        "Microsoft Teams",
			Description: "Sends notifications to Microsoft Teams",
			Heading:     "Microsoft Teams settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "Webhook URL",
					Description:  "The incoming webhook URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "webhook_url",
					Secure:       true,
				},
				{
					Label:        "Title",
					Description:  "Message title template.",
					Placeholder:  "{{ template \"teams.default.title\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Text",
					Description:  "Message body template.",
					Placeholder:  "{{ template \"teams.default.text\" . }}",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "text",
				},
			},
		},
	}
}
