package channels_config

import promCfg "github.com/prometheus/alertmanager/config"

// GetAvailableMimirNotifiers returns the metadata of all the cloud notification channels that can be configured.
func GetAvailableMimirNotifiers() []*NotifierPlugin {
	proxyConfigOptions := func() []NotifierOption {
		return []NotifierOption{
			{
				Label:        "Proxy URL",
				Description:  "HTTP proxy server to use to connect to the targets.",
				Element:      ElementTypeInput,
				InputType:    InputTypeText,
				PropertyName: "proxy_url",
			},
			{
				Label:        "No Proxy",
				Description:  "Comma-separated list of domains for which the proxy should not be used.",
				Element:      ElementTypeInput,
				InputType:    InputTypeText,
				PropertyName: "no_proxy",
			},
			{
				Label:        "Proxy From Environment",
				Description:  "Makes use of net/http ProxyFromEnvironment function to determine proxies.",
				Element:      ElementTypeCheckbox,
				PropertyName: "proxy_from_environment",
			},
			{
				Label:        "Proxy Header Environment",
				Description:  "Headers to send to proxies during CONNECT requests.",
				Element:      ElementTypeKeyValueMap,
				PropertyName: "proxy_connect_header",
			},
		}
	}

	tlsConfigOption := func(propertyName string) NotifierOption {
		return NotifierOption{
			Label:        "TLS config",
			Description:  "Configures the TLS settings.",
			PropertyName: propertyName,
			Element:      ElementTypeSubform,
			SubformOptions: []NotifierOption{
				// TODO these fields are not allowed by Mimir
				// {
				// 	Label:        "CA Certificate",
				// 	Element:      ElementTypeTextArea,
				// 	Description:  "Certificate in PEM format to use when verifying the server's certificate chain.",
				// 	InputType:    InputTypeText,
				// 	PropertyName: "ca",
				// 	Required:     false,
				// },
				// {
				// 	Label:        "Client Certificate",
				// 	Element:      ElementTypeTextArea,
				// 	Description:  "Client certificate in PEM format to use when connecting to the server.",
				// 	InputType:    InputTypeText,
				// 	PropertyName: "cert",
				// 	Required:     false,
				// },
				// {
				// 	Label:        "Client Key",
				// 	Element:      ElementTypeTextArea,
				// 	Description:  "Client key in PEM format to use when connecting to the server.",
				// 	InputType:    InputTypeText,
				// 	PropertyName: "key",
				// 	Required:     false,
				// 	Secure:       true,
				// },
				{
					Label:        "Server name",
					Description:  "ServerName extension to indicate the name of the server.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "server_name",
				},
				{
					Label:        "Skip verify",
					Description:  "Disable validation of the server certificate.",
					Element:      ElementTypeCheckbox,
					PropertyName: "insecure_skip_verify",
				},
				{
					Label:        "Min TLS Version",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "min_version",
				},
				{
					Label:        "Max TLS Version",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "max_version",
				},
			},
		}
	}

	oauth2ConfigOption := func() NotifierOption {
		return NotifierOption{
			Label:        "OAuth2",
			Description:  "Configures the OAuth2 settings.",
			PropertyName: "oauth2",
			Element:      ElementTypeSubform,
			SubformOptions: append([]NotifierOption{
				{
					Label:        "Client ID",
					Description:  "The OAuth2 client ID",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "client_id",
					Required:     true,
				},
				{
					Label:        "Client secret",
					Description:  "The OAuth2 client secret",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "client_secret",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Token URL",
					Description:  "The OAuth2 token exchange URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "token_url",
					Required:     true,
				},
				{
					Label:        "Scopes",
					Description:  "Comma-separated list of scopes",
					Element:      ElementStringArray,
					PropertyName: "scopes",
				},
				{
					Label:        "Additional parameters",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "endpoint_params",
				},
				tlsConfigOption("TLSConfig"), // OAuth2 struct definition does not define JSON tag for this field
			} /*proxyConfigOptions()...*/), // TODO OAuth2 proxy config is not allowed in Mimir (see validation)
		}
	}

	httpConfigOption := func() NotifierOption {
		return NotifierOption{
			Label:        "HTTP Config",
			Description:  "Note that `basic_auth` and `bearer_token` options are mutually exclusive.",
			PropertyName: "http_config",
			Element:      ElementTypeSubform,
			SubformOptions: append([]NotifierOption{

				{
					Label:        "Basic auth",
					Description:  "Sets the `Authorization` header with the configured username and password.",
					PropertyName: "basic_auth",
					Element:      ElementTypeSubform,
					SubformOptions: []NotifierOption{
						{
							Label:        "Username",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "username",
						},
						{
							Label:        "Password",
							Element:      ElementTypeInput,
							InputType:    InputTypePassword,
							PropertyName: "password",
							Secure:       true,
						},
					},
				},
				{
					Label:        "Authorization",
					Description:  "The HTTP authorization credentials for the targets.",
					Element:      ElementTypeSubform,
					PropertyName: "authorization",
					SubformOptions: []NotifierOption{
						{
							Label:        "Type",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "type",
						},
						{
							Label:        "Credentials",
							Element:      ElementTypeInput,
							InputType:    InputTypePassword,
							PropertyName: "credentials",
							Secure:       true,
						},
					},
				},
				{
					Label:        "Follow redirects",
					Description:  "Whether the client should follow HTTP 3xx redirects.",
					Element:      ElementTypeCheckbox,
					PropertyName: "follow_redirects",
				},
				{
					Label:        "Enable HTTP2",
					Description:  "Whether the client should configure HTTP2.",
					Element:      ElementTypeCheckbox,
					PropertyName: "enable_http2",
				},
				{
					Label:        "HTTP Headers",
					Description:  "Headers to inject in the requests.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "http_headers",
				},
			}, append(
				proxyConfigOptions(),
				tlsConfigOption("tls_config"),
				oauth2ConfigOption())...,
			),
		}
	}

	return []*NotifierPlugin{
		{
			Type:        "discord",
			Name:        "Discord",
			Description: "Sends notifications to Discord",
			Heading:     "Discord settings",
			Options: []NotifierOption{
				{
					Label:        "Webhook URL",
					Placeholder:  "Discord webhook URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "webhook_url",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Title",
					Description:  "Templated title of the message",
					Placeholder:  promCfg.DefaultDiscordConfig.Title,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Message Content",
					Description:  "Mention a group using @ or a user using <@ID> when notifying in a channel",
					Placeholder:  promCfg.DefaultDiscordConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "email",
			Name:        "Email",
			Description: "Send notification over SMTP",
			Heading:     "Email settings",
			Info:        "This integration does not use Grafana template",
			Options: []NotifierOption{
				{
					Label:        "To",
					Description:  "The email address to send notifications to. You can enter multiple addresses using a \",\" separator. You can use templates to customize this field.",
					Element:      ElementTypeTextArea,
					PropertyName: "to",
					Required:     true,
				},
				{
					Label:        "From",
					Description:  "The sender address.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "from",
				},
				{
					Label:        "SMTP host",
					Description:  "The SMTP host and port through which emails are sent.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "smarthost",
				},
				{
					Label:        "Hello",
					Description:  "The hostname to identify to the SMTP server.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "hello",
				},
				{
					Label:        "Username",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "auth_username",
				},
				{
					Label:        "Password",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "auth_password",
					Secure:       true,
				},
				{
					Label:        "Secret",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "auth_secret",
					Secure:       true,
				},
				{
					Label:        "Identity",
					Description:  "SMTP authentication information",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "auth_identity",
				},
				{
					Label:        "Require TLS",
					Description:  "The SMTP TLS requirement",
					Element:      ElementTypeCheckbox,
					PropertyName: "require_tls",
				},
				{
					Label:        "Email HTML body",
					Description:  "The HTML body of the email notification.",
					Placeholder:  "{{ template \"email.default.html\" . }}",
					Element:      ElementTypeTextArea,
					PropertyName: "html",
				},
				{
					Label:        "Email text body",
					Description:  "The text body of the email notification.",
					Element:      ElementTypeTextArea,
					PropertyName: "text",
				},
				{
					Label:        "Headers",
					Description:  "Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "headers",
				},
				tlsConfigOption("tls_config"),
			},
		},
		{
			Type:        "pagerduty",
			Name:        "PagerDuty",
			Description: "Send notifications to PagerDuty",
			Heading:     "PagerDuty settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Description:  "The URL to send API requests to",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        "Routing key",
					Description:  "The PagerDuty integration key (when using PagerDuty integration type `Events API v2`)",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "routing_key",
					Secure:       true,
					Required:     true,
				},
				{
					Label:        "Service key",
					Description:  "The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "service_key",
					Secure:       true,
					Required:     true,
				},
				{
					Label:        "Client",
					Description:  "The client identification of the Alertmanager.",
					Placeholder:  promCfg.DefaultPagerdutyConfig.Client,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "client",
				},
				{
					Label:        "Client URL",
					Description:  "A backlink to the sender of the notification.",
					Placeholder:  promCfg.DefaultPagerdutyConfig.ClientURL,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "client_url",
				},
				{
					Label:        "Description",
					Description:  "A description of the incident.",
					Placeholder:  promCfg.DefaultPagerdutyConfig.Description,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "description",
				},
				{
					Label:        "Details",
					Description:  "A set of arbitrary key/value pairs that provide further detail about the incident.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "details",
				},
				{
					Label:        "Images",
					Description:  "Images to attach to the incident.",
					Element:      ElementSubformArray,
					PropertyName: "images",
					SubformOptions: []NotifierOption{
						{
							Label:        "URL",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "href",
						},
						{
							Label:        "Source",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "source",
						},
						{
							Label:        "Alt",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "alt",
						},
					},
				},
				{
					Label:        "Links",
					Description:  "Links to attach to the incident.",
					Element:      ElementSubformArray,
					PropertyName: "links",
					SubformOptions: []NotifierOption{
						{
							Label:        "URL",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "href",
						},
						{
							Label:        "Text",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "text",
						},
					},
				},
				{
					Label:        "Source",
					Description:  "Unique location of the affected system.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "source",
				},
				{
					Label:        "Severity",
					Description:  "Severity of the incident.",
					Placeholder:  "error",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "severity",
				},
				{
					Label:        "Class",
					Description:  "The class/type of the event.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "class",
				},
				{
					Label:        "Component",
					Description:  "The part or component of the affected system that is broken.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "component",
				},
				{
					Label:        "Group",
					Description:  "A cluster or grouping of sources.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "group",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "slack",
			Name:        "Slack",
			Description: "Send notifications to Slack",
			Heading:     "Slack settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "Webhook URL",
					Description:  "The Slack webhook URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
					Secure:       true,
					Required:     true,
				},
				{
					Label:        "Channel",
					Description:  "The #channel or @user to send notifications to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "channel",
				},
				{
					Label:        "Username",
					Placeholder:  promCfg.DefaultSlackConfig.Username,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "username",
				},
				{
					Label:        "Emoji icon",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "icon_emoji",
				},
				{
					Label:        "Icon URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "icon_url",
				},
				{
					Label:        "Names link",
					Element:      ElementTypeCheckbox,
					PropertyName: "link_names",
				},
				{
					Label:        "Callback ID",
					Placeholder:  promCfg.DefaultSlackConfig.CallbackID,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "callback_id",
				},
				{
					Label:        "Color",
					Placeholder:  promCfg.DefaultSlackConfig.Color,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "color",
				},
				{
					Label:        "Fallback",
					Placeholder:  promCfg.DefaultSlackConfig.Fallback,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "fallback",
				},
				{
					Label:        "Footer",
					Placeholder:  promCfg.DefaultSlackConfig.Footer,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "footer",
				},
				{
					Label:        "Markdown Fields",
					Description:  "An array of field names that should be formatted by markdown syntax.",
					Element:      ElementStringArray,
					PropertyName: "mrkdwn_in",
				},
				{
					Label:        "Pre-text",
					Placeholder:  promCfg.DefaultSlackConfig.Pretext,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "pretext",
				},
				{
					Label:        "Short Fields",
					Element:      ElementTypeCheckbox,
					PropertyName: "short_fields",
				},
				{
					Label:        "Message body",
					Placeholder:  promCfg.DefaultSlackConfig.Text,
					Element:      ElementTypeTextArea,
					PropertyName: "text",
				},
				{
					Label:        "Title",
					Placeholder:  promCfg.DefaultSlackConfig.Title,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Title Link",
					Placeholder:  promCfg.DefaultSlackConfig.TitleLink,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title_link",
				},
				{
					Label:        "Image URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "image_url",
				},
				{
					Label:        "Thumbnail URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "thumb_url",
				},
				{
					Label:        "Actions",
					Element:      ElementSubformArray,
					PropertyName: "actions",
					SubformOptions: []NotifierOption{
						{
							Label:        "Text",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "text",
							Required:     true,
						},
						{
							Label:        "Type",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "type",
							Required:     true,
						},
						{
							Label:        "URL",
							Description:  "Either url or name and value are mandatory.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "url",
						},
						{
							Label:        "Name",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "name",
						},
						{
							Label:        "Value",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "value",
						},
						{
							Label:        "Confirm",
							Element:      ElementTypeSubform,
							PropertyName: "confirm",
							SubformOptions: []NotifierOption{
								{
									Label:        "Text",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "text",
									Required:     true,
								},
								{
									Label:        "Dismiss text",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "dismiss_text",
								},
								{
									Label:        "OK text",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "ok_text",
								},
								{
									Label:        "Title",
									Element:      ElementTypeInput,
									InputType:    InputTypeText,
									PropertyName: "title",
								},
							},
						},
						{
							Label:        "Style",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "style",
						},
					},
				},
				{
					Label:        "Fields",
					Element:      ElementSubformArray,
					PropertyName: "fields",
					SubformOptions: []NotifierOption{
						{
							Label:        "Title",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "title",
							Required:     true,
						},
						{
							Label:        "Value",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "value",
							Required:     true,
						},
						{
							Label:        "Short",
							Element:      ElementTypeCheckbox,
							PropertyName: "short",
						},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "webhook",
			Name:        "Webhook",
			Description: "Send notifications to a webhook",
			Heading:     "Webhook settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Description:  "The endpoint to send HTTP POST requests to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
					Secure:       true,
					Required:     true,
				},
				{
					Label:          "Max alerts",
					Description:    "The maximum number of alerts to include in a single webhook message. Alerts above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.",
					Element:        ElementTypeInput,
					InputType:      "number",
					PropertyName:   "max_alerts",
					ValidationRule: "(^\\d+$|^$)",
				},
				{
					Label:        "Timeout",
					Description:  "The maximum time to wait for a webhook request to complete, before failing the request and allowing it to be retried. The default value of 0s indicates that no timeout should be applied. NOTE: This will have no effect if set higher than the group_interval.",
					Placeholder:  "Use duration format, for example: 1.2s, 100ms",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "timeout",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "opsgenie",
			Name:        "OpsGenie",
			Description: "Send notifications to OpsGenie",
			Heading:     "OpsGenie settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API key",
					Description:  "The API key to use when talking to the OpsGenie API.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_key",
					Secure:       true,
					Required:     true,
				},
				{
					Label:        "API URL",
					Description:  "The host to send OpsGenie API requests to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
					Required:     true,
				},
				{
					Label:        "Message",
					Description:  "Alert text limited to 130 characters.",
					Placeholder:  promCfg.DefaultOpsGenieConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Description",
					Description:  "A description of the incident.",
					Placeholder:  promCfg.DefaultOpsGenieConfig.Description,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "description",
				},
				{
					Label:        "Source",
					Description:  "A backlink to the sender of the notification.",
					Placeholder:  promCfg.DefaultOpsGenieConfig.Source,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "source",
				},
				{
					Label:        "Details",
					Description:  "A set of arbitrary key/value pairs that provide further detail about the incident.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "details",
				},
				{
					Label:        "Entity",
					Description:  "Optional field that can be used to specify which domain alert is related to.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "entity",
				},
				{
					Label:        "Actions",
					Description:  "Comma separated list of actions that will be available for the alert.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "actions",
				},
				{
					Label:        "Tags",
					Description:  "Comma separated list of tags attached to the notifications.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "tags",
				},
				{
					Label:        "Note",
					Description:  "Additional alert note.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "note",
				},
				{
					Label:        "Priority",
					Description:  "Priority level of alert. Possible values are P1, P2, P3, P4, and P5.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "priority",
				},
				{
					Label:        "Update Alerts",
					Description:  "Whether to update message and description of the alert in OpsGenie if it already exists. By default, the alert is never updated in OpsGenie, the new message only appears in activity log.",
					Element:      ElementTypeCheckbox,
					PropertyName: "update_alerts",
				},
				{
					Label:        "Responders",
					Description:  "List of responders responsible for notifications.",
					Element:      ElementSubformArray,
					PropertyName: "responders",
					SubformOptions: []NotifierOption{
						{
							Label:        "Type",
							Description:  "\"team\", \"user\", \"escalation\" or schedule\".",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "type",
						},
						{
							Label:        "ID",
							Description:  "Exactly one of these fields should be defined.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "id",
						},
						{
							Label:        "Name",
							Description:  "Exactly one of these fields should be defined.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "name",
						},
						{
							Label:        "Username",
							Description:  "Exactly one of these fields should be defined.",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "username",
						},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "wechat",
			Name:        "WeChat",
			Description: "Sends notifications to WeChat",
			Heading:     "WeChat settings",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "API Secret",
					Description:  "The API key to use when talking to the WeChat API",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_secret",
					Secure:       true,
				},
				{
					Label:        "Corp ID",
					Description:  "The corp id for authentication",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "corp_id",
				},
				{
					Label:        "Message",
					Description:  "API request data as defined by the WeChat API",
					Placeholder:  promCfg.DefaultWechatConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Message type",
					Description:  "Type of the message type",
					Element:      ElementTypeSelect,
					PropertyName: "message_type",
					Placeholder:  "text",
					SelectOptions: []SelectOption{
						{Value: "text", Label: "Text"},
						{Value: "markdown", Label: "Markdown"},
					},
				},
				{
					Label:        "Agent ID",
					Placeholder:  promCfg.DefaultWechatConfig.AgentID,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "agent_id",
				},
				{
					Label:        "To User",
					Placeholder:  promCfg.DefaultWechatConfig.ToUser,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "to_user",
				},
				{
					Label:        "To Party",
					Placeholder:  promCfg.DefaultWechatConfig.ToParty,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "to_party",
				},
				{
					Label:        "To Tag",
					Placeholder:  promCfg.DefaultWechatConfig.ToTag,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "to_tag",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "pushover",
			Name:        "Pushover",
			Description: "Send notifications to Pushover",
			Heading:     "Pushover settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "User key",
					Description:  "The recipient user’s user key.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "user_key",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Token",
					Description:  "Your registered application’s API token, see https://pushover.net/app",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "token",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Title",
					Description:  "Notification title.",
					Placeholder:  promCfg.DefaultPushoverConfig.Title,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Message",
					Description:  "Notification message.",
					Placeholder:  promCfg.DefaultPushoverConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "URL",
					Description:  "A supplementary URL shown alongside the message.",
					Placeholder:  promCfg.DefaultPushoverConfig.URL,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
				},
				{
					Label:        "URL Title",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url_title",
				},
				{
					Label:        "Device",
					Description:  "Optional device to send notification to, see https://pushover.net/api#device",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "device",
				},
				{
					Label:        "Sound",
					Description:  "Optional sound to use for notification, see https://pushover.net/api#sound",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "sound",
				},
				{
					Label:        "Priority",
					Description:  "Priority, see https://pushover.net/api#priority",
					Placeholder:  promCfg.DefaultPushoverConfig.Priority,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "priority",
				},
				{
					Label:        "Retry",
					Description:  "How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.",
					Placeholder:  "1m",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "retry",
				},
				{
					Label:        "Expire",
					Description:  "How long your notification will continue to be retried for, unless the user acknowledges the notification.",
					Placeholder:  "1h",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "expire",
				},
				{
					Label:        "TTL",
					Description:  "The number of seconds before a message expires and is deleted automatically. Examples: 10s, 5m30s, 8h.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "ttl",
				},
				{
					Label:        "HTML",
					Description:  "Enables HTML formatting of the message.",
					Element:      ElementTypeCheckbox,
					PropertyName: "html",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "victorops",
			Name:        "VictorOps",
			Description: "Send notifications to VictorOps",
			Heading:     "VictorOps settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API key",
					Description:  "The API key to use when talking to the VictorOps API.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_key",
					Secure:       true,
				},
				{
					Label:        "API URL",
					Description:  "The VictorOps API URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Routing key",
					Description:  "A key used to map the alert to a team.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "routing_key",
					Required:     true,
				},
				{
					Label:        "Message type",
					Description:  "Describes the behavior of the alert (CRITICAL, WARNING, INFO).",
					Placeholder:  promCfg.DefaultVictorOpsConfig.MessageType,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message_type",
				},
				{
					Label:        "Entity display name",
					Description:  "Contains summary of the alerted problem.",
					Placeholder:  promCfg.DefaultVictorOpsConfig.EntityDisplayName,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "entity_display_name",
				},
				{
					Label:        "State message",
					Description:  "Contains long explanation of the alerted problem.",
					Placeholder:  promCfg.DefaultVictorOpsConfig.StateMessage,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "state_message",
				},
				{
					Label:        "Monitoring tool",
					Description:  "The monitoring tool the state message is from.",
					Placeholder:  promCfg.DefaultVictorOpsConfig.MonitoringTool,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "monitoring_tool",
				},
				{
					Label:        "Custom Fields",
					Description:  "A set of arbitrary key/value pairs that provide further detail about the alert.",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "custom_fields",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "sns",
			Name:        "Amazon SNS",
			Description: "Sends notifications to Amazon SNS",
			Heading:     "Amazon SNS settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The Amazon SNS API URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "SigV4 authentication",
					Description:  "Configures AWS's Signature Verification 4 signing process to sign requests",
					Element:      ElementTypeSubform,
					PropertyName: "sigv4",
					SubformOptions: []NotifierOption{
						{
							Label:        "Region",
							Description:  "The AWS region. If blank, the region from the default credentials chain is used",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "Region",
						},
						{
							Label:        "Access key",
							Description:  "The AWS API access_key. If blank the environment variable \"AWS_ACCESS_KEY_ID\" is used",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "AccessKey",
							Secure:       false,
						},
						{
							Label:        "Secret key",
							Description:  "The AWS API secret_key. If blank the environment variable \"AWS_ACCESS_SECRET_ID\" is used",
							Element:      ElementTypeInput,
							InputType:    InputTypePassword,
							PropertyName: "SecretKey",
							Secure:       true,
						},
						{
							Label:        "Profile",
							Description:  "Named AWS profile used to authenticate",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "Profile",
						},
						{
							Label:        "Role ARN",
							Description:  "AWS Role ARN, an alternative to using AWS API keys",
							Element:      ElementTypeInput,
							InputType:    InputTypeText,
							PropertyName: "RoleARN",
						},
					},
				},
				{
					Label:        "SNS topic ARN",
					Description:  "If you don't specify this value, you must specify a value for the phone_number or target_arn. If you are using a FIFO SNS topic you should set a message group interval longer than 5 minutes to prevent messages with the same group key being deduplicated by the SNS default deduplication window",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "topic_arn",
				},
				{
					Label:        "Phone number",
					Description:  "Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the topic_arn or target_arn",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "phone_number",
				},
				{
					Label:        "Target ARN",
					Description:  "The mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or phone_number",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "target_arn",
				},
				{
					Label:        "Subject",
					Description:  "Subject line when the message is delivered",
					Placeholder:  promCfg.DefaultSNSConfig.Subject,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "subject",
				},
				{
					Label:        "Message",
					Description:  "The message content of the SNS notification",
					Placeholder:  promCfg.DefaultSNSConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Attributes",
					Description:  "SNS message attributes",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "attributes",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "telegram",
			Name:        "Telegram",
			Description: "Sends notifications to Telegram",
			Heading:     "Telegram settings",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The Telegram API URL",
					Placeholder:  "https://api.telegram.org",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Bot token",
					Description:  "Telegram bot token",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "token",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        "Chat ID",
					Description:  "ID of the chat where to send the messages",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "chat_id",
					Required:     true,
				},
				{
					Label:        "Message",
					Description:  "Message template",
					Placeholder:  promCfg.DefaultTelegramConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				{
					Label:        "Disable notifications",
					Description:  "Disable telegram notifications",
					Element:      ElementTypeCheckbox,
					PropertyName: "disable_notifications",
				},
				{
					Label:        "Parse mode",
					Description:  "Parse mode for telegram message",
					Element:      ElementTypeSelect,
					PropertyName: "parse_mode",
					SelectOptions: []SelectOption{
						{Value: "", Label: "None"},
						{Value: "MarkdownV2", Label: "MarkdownV2"},
						{Value: "Markdown", Label: "Markdown"},
						{Value: "HTML", Label: "HTML"},
					},
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "webex",
			Name:        "Cisco Webex Teams",
			Description: "Sends notifications to Cisco Webex Teams",
			Heading:     "Cisco Webex Teams settings",
			Info:        "",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The Webex Teams API URL",
					Placeholder:  "https://webexapis.com/v1/messages",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
				},
				{
					Label:        "Room ID",
					Description:  "ID of the Webex Teams room where to send the messages",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "room_id",
					Required:     true,
				},
				{
					Label:        "Message",
					Description:  "Message template",
					Placeholder:  promCfg.DefaultWebexConfig.Message,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "message",
				},
				httpConfigOption(), // TODO Authorization should be required
			},
		},
		{
			Type:        "msteams",
			Name:        "Microsoft Teams",
			Description: "Sends notifications to Microsoft Teams",
			Heading:     "Microsoft Teams settings",
			Options: []NotifierOption{
				{
					Label:        "Webhook URL",
					Description:  "The incoming webhook URL.",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "webhook_url",
					Secure:       true,
					Required:     true,
				},
				{
					Label:        "Title",
					Description:  "Message title template.",
					Placeholder:  promCfg.DefaultMSTeamsConfig.Title,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
				},
				{
					Label:        "Summary",
					Description:  "Message summary template.",
					Placeholder:  promCfg.DefaultMSTeamsConfig.Summary,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "summary",
				},
				{
					Label:        "Text",
					Description:  "Message body template.",
					Placeholder:  promCfg.DefaultMSTeamsConfig.Text,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "text",
				},
				httpConfigOption(),
			},
		},
		{
			Type:        "jira",
			Name:        "Jira",
			Description: "Send notifications to Jira Service Management",
			Heading:     "Jira settings",
			Options: []NotifierOption{
				{
					Label:        "API URL",
					Description:  "The host to send Jira API requests to",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "api_url",
					Required:     true,
				},
				{
					Label:        "Project Key",
					Description:  "The project key where issues are created",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "project",
					Required:     true,
				},
				{
					Label:        "Issue Type",
					Description:  "Type of the issue (e.g. Bug)",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "issue_type",
					Required:     true,
				},
				{
					Label:        "Summary",
					Description:  "Issue summary template",
					Placeholder:  promCfg.DefaultJiraConfig.Summary,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "summary",
				},
				{
					Label:        "Description",
					Description:  "Issue description template",
					Placeholder:  promCfg.DefaultJiraConfig.Description,
					Element:      ElementTypeTextArea,
					PropertyName: "description",
				},
				{
					Label:        "Labels",
					Description:  " Labels to be added to the issue",
					Element:      ElementStringArray,
					PropertyName: "labels",
				},
				{
					Label:        "Priority",
					Description:  "Priority of the issue",
					Placeholder:  promCfg.DefaultJiraConfig.Priority,
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "priority",
				},
				{
					Label:        "Reopen transition",
					Description:  "Name of the workflow transition to reopen an issue. The target status should not have the category \"done\"",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "reopen_transition",
				},
				{
					Label:        "Resolve transition",
					Description:  "Name of the workflow transition to resolve an issue. The target status must have the category \"done\"",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "resolve_transition",
				},
				{
					Label:        "Won't fix resolution",
					Description:  "If \"Reopen transition\" is defined, ignore issues with that resolution",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "wont_fix_resolution",
				},
				{
					Label:        "Reopen duration",
					Description:  "If \"Reopen transition\" is defined, reopen the issue when it is not older than this value (rounded down to the nearest minute)",
					Placeholder:  "Use duration format, for example: 1.2s, 100ms",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "reopen_duration",
				},
				{
					Label:        "Fields",
					Description:  "Other issue and custom fields",
					Element:      ElementTypeKeyValueMap,
					PropertyName: "fields",
				},
				httpConfigOption(),
			},
		},
	}
}
