// Code generated by mockery v2.10.0. DO NOT EDIT.

package store

import (
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana/pkg/services/ngalert/models"
)

// AdminConfigurationStoreMock is an autogenerated mock type for the AdminConfigurationStore type
type AdminConfigurationStoreMock struct {
	mock.Mock
}

type AdminConfigurationStoreMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AdminConfigurationStoreMock) EXPECT() *AdminConfigurationStoreMock_Expecter {
	return &AdminConfigurationStoreMock_Expecter{mock: &_m.Mock}
}

// DeleteAdminConfiguration provides a mock function with given fields: orgID
func (_m *AdminConfigurationStoreMock) DeleteAdminConfiguration(orgID int64) error {
	ret := _m.Called(orgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminConfigurationStoreMock_DeleteAdminConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAdminConfiguration'
type AdminConfigurationStoreMock_DeleteAdminConfiguration_Call struct {
	*mock.Call
}

// DeleteAdminConfiguration is a helper method to define mock.On call
//   - orgID int64
func (_e *AdminConfigurationStoreMock_Expecter) DeleteAdminConfiguration(orgID any) *AdminConfigurationStoreMock_DeleteAdminConfiguration_Call {
	return &AdminConfigurationStoreMock_DeleteAdminConfiguration_Call{Call: _e.mock.On("DeleteAdminConfiguration", orgID)}
}

func (_c *AdminConfigurationStoreMock_DeleteAdminConfiguration_Call) Run(run func(orgID int64)) *AdminConfigurationStoreMock_DeleteAdminConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *AdminConfigurationStoreMock_DeleteAdminConfiguration_Call) Return(_a0 error) *AdminConfigurationStoreMock_DeleteAdminConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAdminConfiguration provides a mock function with given fields: orgID
func (_m *AdminConfigurationStoreMock) GetAdminConfiguration(orgID int64) (*models.AdminConfiguration, error) {
	ret := _m.Called(orgID)

	var r0 *models.AdminConfiguration
	if rf, ok := ret.Get(0).(func(int64) *models.AdminConfiguration); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AdminConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminConfigurationStoreMock_GetAdminConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminConfiguration'
type AdminConfigurationStoreMock_GetAdminConfiguration_Call struct {
	*mock.Call
}

// GetAdminConfiguration is a helper method to define mock.On call
//   - orgID int64
func (_e *AdminConfigurationStoreMock_Expecter) GetAdminConfiguration(orgID any) *AdminConfigurationStoreMock_GetAdminConfiguration_Call {
	return &AdminConfigurationStoreMock_GetAdminConfiguration_Call{Call: _e.mock.On("GetAdminConfiguration", orgID)}
}

func (_c *AdminConfigurationStoreMock_GetAdminConfiguration_Call) Run(run func(orgID int64)) *AdminConfigurationStoreMock_GetAdminConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *AdminConfigurationStoreMock_GetAdminConfiguration_Call) Return(_a0 *models.AdminConfiguration, _a1 error) *AdminConfigurationStoreMock_GetAdminConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAdminConfigurations provides a mock function with given fields:
func (_m *AdminConfigurationStoreMock) GetAdminConfigurations() ([]*models.AdminConfiguration, error) {
	ret := _m.Called()

	var r0 []*models.AdminConfiguration
	if rf, ok := ret.Get(0).(func() []*models.AdminConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AdminConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminConfigurationStoreMock_GetAdminConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminConfigurations'
type AdminConfigurationStoreMock_GetAdminConfigurations_Call struct {
	*mock.Call
}

// GetAdminConfigurations is a helper method to define mock.On call
func (_e *AdminConfigurationStoreMock_Expecter) GetAdminConfigurations() *AdminConfigurationStoreMock_GetAdminConfigurations_Call {
	return &AdminConfigurationStoreMock_GetAdminConfigurations_Call{Call: _e.mock.On("GetAdminConfigurations")}
}

func (_c *AdminConfigurationStoreMock_GetAdminConfigurations_Call) Run(run func()) *AdminConfigurationStoreMock_GetAdminConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AdminConfigurationStoreMock_GetAdminConfigurations_Call) Return(_a0 []*models.AdminConfiguration, _a1 error) *AdminConfigurationStoreMock_GetAdminConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAdminConfiguration provides a mock function with given fields: _a0
func (_m *AdminConfigurationStoreMock) UpdateAdminConfiguration(_a0 UpdateAdminConfigurationCmd) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(UpdateAdminConfigurationCmd) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminConfigurationStoreMock_UpdateAdminConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAdminConfiguration'
type AdminConfigurationStoreMock_UpdateAdminConfiguration_Call struct {
	*mock.Call
}

// UpdateAdminConfiguration is a helper method to define mock.On call
//   - _a0 UpdateAdminConfigurationCmd
func (_e *AdminConfigurationStoreMock_Expecter) UpdateAdminConfiguration(_a0 any) *AdminConfigurationStoreMock_UpdateAdminConfiguration_Call {
	return &AdminConfigurationStoreMock_UpdateAdminConfiguration_Call{Call: _e.mock.On("UpdateAdminConfiguration", _a0)}
}

func (_c *AdminConfigurationStoreMock_UpdateAdminConfiguration_Call) Run(run func(_a0 UpdateAdminConfigurationCmd)) *AdminConfigurationStoreMock_UpdateAdminConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(UpdateAdminConfigurationCmd))
	})
	return _c
}

func (_c *AdminConfigurationStoreMock_UpdateAdminConfiguration_Call) Return(_a0 error) *AdminConfigurationStoreMock_UpdateAdminConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}
