// Code generated by mockery v2.53.4. DO NOT EDIT.

package eval_mocks

import (
	context "context"

	backend "github.com/grafana/grafana-plugin-sdk-go/backend"

	eval "github.com/grafana/grafana/pkg/services/ngalert/eval"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ConditionEvaluatorMock is an autogenerated mock type for the ConditionEvaluator type
type ConditionEvaluatorMock struct {
	mock.Mock
}

type ConditionEvaluatorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ConditionEvaluatorMock) EXPECT() *ConditionEvaluatorMock_Expecter {
	return &ConditionEvaluatorMock_Expecter{mock: &_m.Mock}
}

// Evaluate provides a mock function with given fields: ctx, now
func (_m *ConditionEvaluatorMock) Evaluate(ctx context.Context, now time.Time) (eval.Results, error) {
	ret := _m.Called(ctx, now)

	if len(ret) == 0 {
		panic("no return value specified for Evaluate")
	}

	var r0 eval.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (eval.Results, error)); ok {
		return rf(ctx, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) eval.Results); ok {
		r0 = rf(ctx, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eval.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConditionEvaluatorMock_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type ConditionEvaluatorMock_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//   - ctx context.Context
//   - now time.Time
func (_e *ConditionEvaluatorMock_Expecter) Evaluate(ctx interface{}, now interface{}) *ConditionEvaluatorMock_Evaluate_Call {
	return &ConditionEvaluatorMock_Evaluate_Call{Call: _e.mock.On("Evaluate", ctx, now)}
}

func (_c *ConditionEvaluatorMock_Evaluate_Call) Run(run func(ctx context.Context, now time.Time)) *ConditionEvaluatorMock_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *ConditionEvaluatorMock_Evaluate_Call) Return(_a0 eval.Results, _a1 error) *ConditionEvaluatorMock_Evaluate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConditionEvaluatorMock_Evaluate_Call) RunAndReturn(run func(context.Context, time.Time) (eval.Results, error)) *ConditionEvaluatorMock_Evaluate_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluateRaw provides a mock function with given fields: ctx, now
func (_m *ConditionEvaluatorMock) EvaluateRaw(ctx context.Context, now time.Time) (*backend.QueryDataResponse, error) {
	ret := _m.Called(ctx, now)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateRaw")
	}

	var r0 *backend.QueryDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*backend.QueryDataResponse, error)); ok {
		return rf(ctx, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *backend.QueryDataResponse); ok {
		r0 = rf(ctx, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.QueryDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConditionEvaluatorMock_EvaluateRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateRaw'
type ConditionEvaluatorMock_EvaluateRaw_Call struct {
	*mock.Call
}

// EvaluateRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - now time.Time
func (_e *ConditionEvaluatorMock_Expecter) EvaluateRaw(ctx interface{}, now interface{}) *ConditionEvaluatorMock_EvaluateRaw_Call {
	return &ConditionEvaluatorMock_EvaluateRaw_Call{Call: _e.mock.On("EvaluateRaw", ctx, now)}
}

func (_c *ConditionEvaluatorMock_EvaluateRaw_Call) Run(run func(ctx context.Context, now time.Time)) *ConditionEvaluatorMock_EvaluateRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *ConditionEvaluatorMock_EvaluateRaw_Call) Return(resp *backend.QueryDataResponse, err error) *ConditionEvaluatorMock_EvaluateRaw_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *ConditionEvaluatorMock_EvaluateRaw_Call) RunAndReturn(run func(context.Context, time.Time) (*backend.QueryDataResponse, error)) *ConditionEvaluatorMock_EvaluateRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewConditionEvaluatorMock creates a new instance of ConditionEvaluatorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConditionEvaluatorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConditionEvaluatorMock {
	mock := &ConditionEvaluatorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
