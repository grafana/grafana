// Code generated by mockery v2.46.3. DO NOT EDIT.

package settingtest

import (
	setting "github.com/grafana/grafana/pkg/setting"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// Current provides a mock function with given fields:
func (_m *MockProvider) Current() setting.SettingsBag {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Current")
	}

	var r0 setting.SettingsBag
	if rf, ok := ret.Get(0).(func() setting.SettingsBag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(setting.SettingsBag)
		}
	}

	return r0
}

// CurrentVerbose provides a mock function with given fields:
func (_m *MockProvider) CurrentVerbose() setting.VerboseSettingsBag {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentVerbose")
	}

	var r0 setting.VerboseSettingsBag
	if rf, ok := ret.Get(0).(func() setting.VerboseSettingsBag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(setting.VerboseSettingsBag)
		}
	}

	return r0
}

// KeyValue provides a mock function with given fields: section, key
func (_m *MockProvider) KeyValue(section string, key string) setting.KeyValue {
	ret := _m.Called(section, key)

	if len(ret) == 0 {
		panic("no return value specified for KeyValue")
	}

	var r0 setting.KeyValue
	if rf, ok := ret.Get(0).(func(string, string) setting.KeyValue); ok {
		r0 = rf(section, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(setting.KeyValue)
		}
	}

	return r0
}

// RegisterReloadHandler provides a mock function with given fields: section, handler
func (_m *MockProvider) RegisterReloadHandler(section string, handler setting.ReloadHandler) {
	_m.Called(section, handler)
}

// Section provides a mock function with given fields: section
func (_m *MockProvider) Section(section string) setting.Section {
	ret := _m.Called(section)

	if len(ret) == 0 {
		panic("no return value specified for Section")
	}

	var r0 setting.Section
	if rf, ok := ret.Get(0).(func(string) setting.Section); ok {
		r0 = rf(section)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(setting.Section)
		}
	}

	return r0
}

// Update provides a mock function with given fields: updates, removals
func (_m *MockProvider) Update(updates setting.SettingsBag, removals setting.SettingsRemovals) error {
	ret := _m.Called(updates, removals)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(setting.SettingsBag, setting.SettingsRemovals) error); ok {
		r0 = rf(updates, removals)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
