// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/grafana/grafana/pkg/registry/apis/secret/service"
	mock "github.com/stretchr/testify/mock"
)

// MockDecryptService is an autogenerated mock type for the DecryptService type
type MockDecryptService struct {
	mock.Mock
}

type MockDecryptService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecryptService) EXPECT() *MockDecryptService_Expecter {
	return &MockDecryptService_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: ctx, namespace, names
func (_m *MockDecryptService) Decrypt(ctx context.Context, namespace string, names ...string) (map[string]service.DecryptResult, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, namespace)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 map[string]service.DecryptResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (map[string]service.DecryptResult, error)); ok {
		return rf(ctx, namespace, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) map[string]service.DecryptResult); ok {
		r0 = rf(ctx, namespace, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]service.DecryptResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, namespace, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDecryptService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockDecryptService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - names ...string
func (_e *MockDecryptService_Expecter) Decrypt(ctx interface{}, namespace interface{}, names ...interface{}) *MockDecryptService_Decrypt_Call {
	return &MockDecryptService_Decrypt_Call{Call: _e.mock.On("Decrypt",
		append([]interface{}{ctx, namespace}, names...)...)}
}

func (_c *MockDecryptService_Decrypt_Call) Run(run func(ctx context.Context, namespace string, names ...string)) *MockDecryptService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDecryptService_Decrypt_Call) Return(_a0 map[string]service.DecryptResult, _a1 error) *MockDecryptService_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDecryptService_Decrypt_Call) RunAndReturn(run func(context.Context, string, ...string) (map[string]service.DecryptResult, error)) *MockDecryptService_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDecryptService creates a new instance of MockDecryptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDecryptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDecryptService {
	mock := &MockDecryptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
