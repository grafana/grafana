// Code generated by mockery v2.52.4. DO NOT EDIT.

package secrets

import (
	context "context"

	v1beta1 "github.com/grafana/grafana/apps/secret/pkg/apis/secret/v1beta1"
	mock "github.com/stretchr/testify/mock"

	xkube "github.com/grafana/grafana/pkg/registry/apis/secret/xkube"
)

// MockSecureValueService is an autogenerated mock type for the SecureValueService type
type MockSecureValueService struct {
	mock.Mock
}

type MockSecureValueService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecureValueService) EXPECT() *MockSecureValueService_Expecter {
	return &MockSecureValueService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, sv, actorUID
func (_m *MockSecureValueService) Create(ctx context.Context, sv *v1beta1.SecureValue, actorUID string) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, sv, actorUID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, string) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, sv, actorUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, string) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, sv, actorUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.SecureValue, string) error); ok {
		r1 = rf(ctx, sv, actorUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSecureValueService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - sv *v1beta1.SecureValue
//   - actorUID string
func (_e *MockSecureValueService_Expecter) Create(ctx interface{}, sv interface{}, actorUID interface{}) *MockSecureValueService_Create_Call {
	return &MockSecureValueService_Create_Call{Call: _e.mock.On("Create", ctx, sv, actorUID)}
}

func (_c *MockSecureValueService_Create_Call) Run(run func(ctx context.Context, sv *v1beta1.SecureValue, actorUID string)) *MockSecureValueService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.SecureValue), args[2].(string))
	})
	return _c
}

func (_c *MockSecureValueService_Create_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueService_Create_Call) RunAndReturn(run func(context.Context, *v1beta1.SecureValue, string) (*v1beta1.SecureValue, error)) *MockSecureValueService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, name
func (_m *MockSecureValueService) Delete(ctx context.Context, namespace xkube.Namespace, name string) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, xkube.Namespace, string) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, xkube.Namespace, string) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, xkube.Namespace, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSecureValueService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace xkube.Namespace
//   - name string
func (_e *MockSecureValueService_Expecter) Delete(ctx interface{}, namespace interface{}, name interface{}) *MockSecureValueService_Delete_Call {
	return &MockSecureValueService_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, name)}
}

func (_c *MockSecureValueService_Delete_Call) Run(run func(ctx context.Context, namespace xkube.Namespace, name string)) *MockSecureValueService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(xkube.Namespace), args[2].(string))
	})
	return _c
}

func (_c *MockSecureValueService_Delete_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueService_Delete_Call) RunAndReturn(run func(context.Context, xkube.Namespace, string) (*v1beta1.SecureValue, error)) *MockSecureValueService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, namespace, name
func (_m *MockSecureValueService) Read(ctx context.Context, namespace xkube.Namespace, name string) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, xkube.Namespace, string) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, xkube.Namespace, string) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, xkube.Namespace, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockSecureValueService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace xkube.Namespace
//   - name string
func (_e *MockSecureValueService_Expecter) Read(ctx interface{}, namespace interface{}, name interface{}) *MockSecureValueService_Read_Call {
	return &MockSecureValueService_Read_Call{Call: _e.mock.On("Read", ctx, namespace, name)}
}

func (_c *MockSecureValueService_Read_Call) Run(run func(ctx context.Context, namespace xkube.Namespace, name string)) *MockSecureValueService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(xkube.Namespace), args[2].(string))
	})
	return _c
}

func (_c *MockSecureValueService_Read_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueService_Read_Call) RunAndReturn(run func(context.Context, xkube.Namespace, string) (*v1beta1.SecureValue, error)) *MockSecureValueService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, newSecureValue, actorUID
func (_m *MockSecureValueService) Update(ctx context.Context, newSecureValue *v1beta1.SecureValue, actorUID string) (*v1beta1.SecureValue, bool, error) {
	ret := _m.Called(ctx, newSecureValue, actorUID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1beta1.SecureValue
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, string) (*v1beta1.SecureValue, bool, error)); ok {
		return rf(ctx, newSecureValue, actorUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, string) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, newSecureValue, actorUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.SecureValue, string) bool); ok {
		r1 = rf(ctx, newSecureValue, actorUID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1beta1.SecureValue, string) error); ok {
		r2 = rf(ctx, newSecureValue, actorUID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSecureValueService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSecureValueService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - newSecureValue *v1beta1.SecureValue
//   - actorUID string
func (_e *MockSecureValueService_Expecter) Update(ctx interface{}, newSecureValue interface{}, actorUID interface{}) *MockSecureValueService_Update_Call {
	return &MockSecureValueService_Update_Call{Call: _e.mock.On("Update", ctx, newSecureValue, actorUID)}
}

func (_c *MockSecureValueService_Update_Call) Run(run func(ctx context.Context, newSecureValue *v1beta1.SecureValue, actorUID string)) *MockSecureValueService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.SecureValue), args[2].(string))
	})
	return _c
}

func (_c *MockSecureValueService_Update_Call) Return(_a0 *v1beta1.SecureValue, _a1 bool, _a2 error) *MockSecureValueService_Update_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSecureValueService_Update_Call) RunAndReturn(run func(context.Context, *v1beta1.SecureValue, string) (*v1beta1.SecureValue, bool, error)) *MockSecureValueService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecureValueService creates a new instance of MockSecureValueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecureValueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecureValueService {
	mock := &MockSecureValueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
