// Code generated by mockery v2.52.4. DO NOT EDIT.

package pullrequest

import (
	context "context"

	repository "github.com/grafana/grafana/pkg/registry/apis/provisioning/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockPreviewer is an autogenerated mock type for the Previewer type
type MockPreviewer struct {
	mock.Mock
}

type MockPreviewer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPreviewer) EXPECT() *MockPreviewer_Expecter {
	return &MockPreviewer_Expecter{mock: &_m.Mock}
}

// GenerateComment provides a mock function with given fields: preview
func (_m *MockPreviewer) GenerateComment(preview resourcePreview) (string, error) {
	ret := _m.Called(preview)

	if len(ret) == 0 {
		panic("no return value specified for GenerateComment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(resourcePreview) (string, error)); ok {
		return rf(preview)
	}
	if rf, ok := ret.Get(0).(func(resourcePreview) string); ok {
		r0 = rf(preview)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(resourcePreview) error); ok {
		r1 = rf(preview)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPreviewer_GenerateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateComment'
type MockPreviewer_GenerateComment_Call struct {
	*mock.Call
}

// GenerateComment is a helper method to define mock.On call
//   - preview resourcePreview
func (_e *MockPreviewer_Expecter) GenerateComment(preview interface{}) *MockPreviewer_GenerateComment_Call {
	return &MockPreviewer_GenerateComment_Call{Call: _e.mock.On("GenerateComment", preview)}
}

func (_c *MockPreviewer_GenerateComment_Call) Run(run func(preview resourcePreview)) *MockPreviewer_GenerateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(resourcePreview))
	})
	return _c
}

func (_c *MockPreviewer_GenerateComment_Call) Return(_a0 string, _a1 error) *MockPreviewer_GenerateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPreviewer_GenerateComment_Call) RunAndReturn(run func(resourcePreview) (string, error)) *MockPreviewer_GenerateComment_Call {
	_c.Call.Return(run)
	return _c
}

// Preview provides a mock function with given fields: ctx, f, namespace, repoName, base, ref, pullRequestURL, generatePreview
func (_m *MockPreviewer) Preview(ctx context.Context, f repository.VersionedFileChange, namespace string, repoName string, base string, ref string, pullRequestURL string, generatePreview bool) (resourcePreview, error) {
	ret := _m.Called(ctx, f, namespace, repoName, base, ref, pullRequestURL, generatePreview)

	if len(ret) == 0 {
		panic("no return value specified for Preview")
	}

	var r0 resourcePreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.VersionedFileChange, string, string, string, string, string, bool) (resourcePreview, error)); ok {
		return rf(ctx, f, namespace, repoName, base, ref, pullRequestURL, generatePreview)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.VersionedFileChange, string, string, string, string, string, bool) resourcePreview); ok {
		r0 = rf(ctx, f, namespace, repoName, base, ref, pullRequestURL, generatePreview)
	} else {
		r0 = ret.Get(0).(resourcePreview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.VersionedFileChange, string, string, string, string, string, bool) error); ok {
		r1 = rf(ctx, f, namespace, repoName, base, ref, pullRequestURL, generatePreview)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPreviewer_Preview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preview'
type MockPreviewer_Preview_Call struct {
	*mock.Call
}

// Preview is a helper method to define mock.On call
//   - ctx context.Context
//   - f repository.VersionedFileChange
//   - namespace string
//   - repoName string
//   - base string
//   - ref string
//   - pullRequestURL string
//   - generatePreview bool
func (_e *MockPreviewer_Expecter) Preview(ctx interface{}, f interface{}, namespace interface{}, repoName interface{}, base interface{}, ref interface{}, pullRequestURL interface{}, generatePreview interface{}) *MockPreviewer_Preview_Call {
	return &MockPreviewer_Preview_Call{Call: _e.mock.On("Preview", ctx, f, namespace, repoName, base, ref, pullRequestURL, generatePreview)}
}

func (_c *MockPreviewer_Preview_Call) Run(run func(ctx context.Context, f repository.VersionedFileChange, namespace string, repoName string, base string, ref string, pullRequestURL string, generatePreview bool)) *MockPreviewer_Preview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.VersionedFileChange), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(bool))
	})
	return _c
}

func (_c *MockPreviewer_Preview_Call) Return(_a0 resourcePreview, _a1 error) *MockPreviewer_Preview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPreviewer_Preview_Call) RunAndReturn(run func(context.Context, repository.VersionedFileChange, string, string, string, string, string, bool) (resourcePreview, error)) *MockPreviewer_Preview_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPreviewer creates a new instance of MockPreviewer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPreviewer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPreviewer {
	mock := &MockPreviewer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
