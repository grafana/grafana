// Code generated by mockery v2.52.4. DO NOT EDIT.

package pullrequest

import (
	context "context"

	repository "github.com/grafana/grafana/pkg/registry/apis/provisioning/repository"
	mock "github.com/stretchr/testify/mock"

	v0alpha1 "github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1"
)

// MockPullRequestRepo is an autogenerated mock type for the PullRequestRepo type
type MockPullRequestRepo struct {
	mock.Mock
}

type MockPullRequestRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPullRequestRepo) EXPECT() *MockPullRequestRepo_Expecter {
	return &MockPullRequestRepo_Expecter{mock: &_m.Mock}
}

// CommentPullRequest provides a mock function with given fields: ctx, pr, comment
func (_m *MockPullRequestRepo) CommentPullRequest(ctx context.Context, pr int, comment string) error {
	ret := _m.Called(ctx, pr, comment)

	if len(ret) == 0 {
		panic("no return value specified for CommentPullRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, pr, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPullRequestRepo_CommentPullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentPullRequest'
type MockPullRequestRepo_CommentPullRequest_Call struct {
	*mock.Call
}

// CommentPullRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - pr int
//   - comment string
func (_e *MockPullRequestRepo_Expecter) CommentPullRequest(ctx interface{}, pr interface{}, comment interface{}) *MockPullRequestRepo_CommentPullRequest_Call {
	return &MockPullRequestRepo_CommentPullRequest_Call{Call: _e.mock.On("CommentPullRequest", ctx, pr, comment)}
}

func (_c *MockPullRequestRepo_CommentPullRequest_Call) Run(run func(ctx context.Context, pr int, comment string)) *MockPullRequestRepo_CommentPullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockPullRequestRepo_CommentPullRequest_Call) Return(_a0 error) *MockPullRequestRepo_CommentPullRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPullRequestRepo_CommentPullRequest_Call) RunAndReturn(run func(context.Context, int, string) error) *MockPullRequestRepo_CommentPullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CompareFiles provides a mock function with given fields: ctx, base, ref
func (_m *MockPullRequestRepo) CompareFiles(ctx context.Context, base string, ref string) ([]repository.VersionedFileChange, error) {
	ret := _m.Called(ctx, base, ref)

	if len(ret) == 0 {
		panic("no return value specified for CompareFiles")
	}

	var r0 []repository.VersionedFileChange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]repository.VersionedFileChange, error)); ok {
		return rf(ctx, base, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []repository.VersionedFileChange); ok {
		r0 = rf(ctx, base, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.VersionedFileChange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, base, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPullRequestRepo_CompareFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareFiles'
type MockPullRequestRepo_CompareFiles_Call struct {
	*mock.Call
}

// CompareFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - base string
//   - ref string
func (_e *MockPullRequestRepo_Expecter) CompareFiles(ctx interface{}, base interface{}, ref interface{}) *MockPullRequestRepo_CompareFiles_Call {
	return &MockPullRequestRepo_CompareFiles_Call{Call: _e.mock.On("CompareFiles", ctx, base, ref)}
}

func (_c *MockPullRequestRepo_CompareFiles_Call) Run(run func(ctx context.Context, base string, ref string)) *MockPullRequestRepo_CompareFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPullRequestRepo_CompareFiles_Call) Return(_a0 []repository.VersionedFileChange, _a1 error) *MockPullRequestRepo_CompareFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPullRequestRepo_CompareFiles_Call) RunAndReturn(run func(context.Context, string, string) ([]repository.VersionedFileChange, error)) *MockPullRequestRepo_CompareFiles_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function with no fields
func (_m *MockPullRequestRepo) Config() *v0alpha1.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *v0alpha1.Repository
	if rf, ok := ret.Get(0).(func() *v0alpha1.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0alpha1.Repository)
		}
	}

	return r0
}

// MockPullRequestRepo_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockPullRequestRepo_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockPullRequestRepo_Expecter) Config() *MockPullRequestRepo_Config_Call {
	return &MockPullRequestRepo_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockPullRequestRepo_Config_Call) Run(run func()) *MockPullRequestRepo_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPullRequestRepo_Config_Call) Return(_a0 *v0alpha1.Repository) *MockPullRequestRepo_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPullRequestRepo_Config_Call) RunAndReturn(run func() *v0alpha1.Repository) *MockPullRequestRepo_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, path, ref
func (_m *MockPullRequestRepo) Read(ctx context.Context, path string, ref string) (*repository.FileInfo, error) {
	ret := _m.Called(ctx, path, ref)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *repository.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*repository.FileInfo, error)); ok {
		return rf(ctx, path, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *repository.FileInfo); ok {
		r0 = rf(ctx, path, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, path, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPullRequestRepo_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockPullRequestRepo_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - ref string
func (_e *MockPullRequestRepo_Expecter) Read(ctx interface{}, path interface{}, ref interface{}) *MockPullRequestRepo_Read_Call {
	return &MockPullRequestRepo_Read_Call{Call: _e.mock.On("Read", ctx, path, ref)}
}

func (_c *MockPullRequestRepo_Read_Call) Run(run func(ctx context.Context, path string, ref string)) *MockPullRequestRepo_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPullRequestRepo_Read_Call) Return(_a0 *repository.FileInfo, _a1 error) *MockPullRequestRepo_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPullRequestRepo_Read_Call) RunAndReturn(run func(context.Context, string, string) (*repository.FileInfo, error)) *MockPullRequestRepo_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPullRequestRepo creates a new instance of MockPullRequestRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPullRequestRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPullRequestRepo {
	mock := &MockPullRequestRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
