// Code generated by mockery v2.52.4. DO NOT EDIT.

package export

import (
	context "context"

	jobs "github.com/grafana/grafana/pkg/registry/apis/provisioning/jobs"
	mock "github.com/stretchr/testify/mock"

	resources "github.com/grafana/grafana/pkg/registry/apis/provisioning/resources"

	v0alpha1 "github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1"
)

// MockExportFn is an autogenerated mock type for the ExportFn type
type MockExportFn struct {
	mock.Mock
}

type MockExportFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExportFn) EXPECT() *MockExportFn_Expecter {
	return &MockExportFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, repoName, options, clients, repositoryResources, progress
func (_m *MockExportFn) Execute(ctx context.Context, repoName string, options v0alpha1.ExportJobOptions, clients resources.ResourceClients, repositoryResources resources.RepositoryResources, progress jobs.JobProgressRecorder) error {
	ret := _m.Called(ctx, repoName, options, clients, repositoryResources, progress)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v0alpha1.ExportJobOptions, resources.ResourceClients, resources.RepositoryResources, jobs.JobProgressRecorder) error); ok {
		r0 = rf(ctx, repoName, options, clients, repositoryResources, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExportFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExportFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - repoName string
//   - options v0alpha1.ExportJobOptions
//   - clients resources.ResourceClients
//   - repositoryResources resources.RepositoryResources
//   - progress jobs.JobProgressRecorder
func (_e *MockExportFn_Expecter) Execute(ctx interface{}, repoName interface{}, options interface{}, clients interface{}, repositoryResources interface{}, progress interface{}) *MockExportFn_Execute_Call {
	return &MockExportFn_Execute_Call{Call: _e.mock.On("Execute", ctx, repoName, options, clients, repositoryResources, progress)}
}

func (_c *MockExportFn_Execute_Call) Run(run func(ctx context.Context, repoName string, options v0alpha1.ExportJobOptions, clients resources.ResourceClients, repositoryResources resources.RepositoryResources, progress jobs.JobProgressRecorder)) *MockExportFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(v0alpha1.ExportJobOptions), args[3].(resources.ResourceClients), args[4].(resources.RepositoryResources), args[5].(jobs.JobProgressRecorder))
	})
	return _c
}

func (_c *MockExportFn_Execute_Call) Return(_a0 error) *MockExportFn_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExportFn_Execute_Call) RunAndReturn(run func(context.Context, string, v0alpha1.ExportJobOptions, resources.ResourceClients, resources.RepositoryResources, jobs.JobProgressRecorder) error) *MockExportFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExportFn creates a new instance of MockExportFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExportFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExportFn {
	mock := &MockExportFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
