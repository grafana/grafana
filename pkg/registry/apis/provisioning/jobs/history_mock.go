// Code generated by mockery v2.52.4. DO NOT EDIT.

package jobs

import (
	context "context"

	v0alpha1 "github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockHistory is an autogenerated mock type for the History type
type MockHistory struct {
	mock.Mock
}

type MockHistory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistory) EXPECT() *MockHistory_Expecter {
	return &MockHistory_Expecter{mock: &_m.Mock}
}

// GetJob provides a mock function with given fields: ctx, namespace, repo, uid
func (_m *MockHistory) GetJob(ctx context.Context, namespace string, repo string, uid string) (*v0alpha1.Job, error) {
	ret := _m.Called(ctx, namespace, repo, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *v0alpha1.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*v0alpha1.Job, error)); ok {
		return rf(ctx, namespace, repo, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v0alpha1.Job); ok {
		r0 = rf(ctx, namespace, repo, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0alpha1.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, repo, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistory_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockHistory_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - repo string
//   - uid string
func (_e *MockHistory_Expecter) GetJob(ctx interface{}, namespace interface{}, repo interface{}, uid interface{}) *MockHistory_GetJob_Call {
	return &MockHistory_GetJob_Call{Call: _e.mock.On("GetJob", ctx, namespace, repo, uid)}
}

func (_c *MockHistory_GetJob_Call) Run(run func(ctx context.Context, namespace string, repo string, uid string)) *MockHistory_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockHistory_GetJob_Call) Return(_a0 *v0alpha1.Job, _a1 error) *MockHistory_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistory_GetJob_Call) RunAndReturn(run func(context.Context, string, string, string) (*v0alpha1.Job, error)) *MockHistory_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// RecentJobs provides a mock function with given fields: ctx, namespace, repo
func (_m *MockHistory) RecentJobs(ctx context.Context, namespace string, repo string) (*v0alpha1.JobList, error) {
	ret := _m.Called(ctx, namespace, repo)

	if len(ret) == 0 {
		panic("no return value specified for RecentJobs")
	}

	var r0 *v0alpha1.JobList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v0alpha1.JobList, error)); ok {
		return rf(ctx, namespace, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v0alpha1.JobList); ok {
		r0 = rf(ctx, namespace, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0alpha1.JobList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistory_RecentJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentJobs'
type MockHistory_RecentJobs_Call struct {
	*mock.Call
}

// RecentJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - repo string
func (_e *MockHistory_Expecter) RecentJobs(ctx interface{}, namespace interface{}, repo interface{}) *MockHistory_RecentJobs_Call {
	return &MockHistory_RecentJobs_Call{Call: _e.mock.On("RecentJobs", ctx, namespace, repo)}
}

func (_c *MockHistory_RecentJobs_Call) Run(run func(ctx context.Context, namespace string, repo string)) *MockHistory_RecentJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockHistory_RecentJobs_Call) Return(_a0 *v0alpha1.JobList, _a1 error) *MockHistory_RecentJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistory_RecentJobs_Call) RunAndReturn(run func(context.Context, string, string) (*v0alpha1.JobList, error)) *MockHistory_RecentJobs_Call {
	_c.Call.Return(run)
	return _c
}

// WriteJob provides a mock function with given fields: ctx, job
func (_m *MockHistory) WriteJob(ctx context.Context, job *v0alpha1.Job) error {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for WriteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0alpha1.Job) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHistory_WriteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteJob'
type MockHistory_WriteJob_Call struct {
	*mock.Call
}

// WriteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - job *v0alpha1.Job
func (_e *MockHistory_Expecter) WriteJob(ctx interface{}, job interface{}) *MockHistory_WriteJob_Call {
	return &MockHistory_WriteJob_Call{Call: _e.mock.On("WriteJob", ctx, job)}
}

func (_c *MockHistory_WriteJob_Call) Run(run func(ctx context.Context, job *v0alpha1.Job)) *MockHistory_WriteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0alpha1.Job))
	})
	return _c
}

func (_c *MockHistory_WriteJob_Call) Return(_a0 error) *MockHistory_WriteJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistory_WriteJob_Call) RunAndReturn(run func(context.Context, *v0alpha1.Job) error) *MockHistory_WriteJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHistory creates a new instance of MockHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistory {
	mock := &MockHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
