// Code generated by mockery v2.52.4. DO NOT EDIT.

package migrate

import (
	context "context"

	jobs "github.com/grafana/grafana/pkg/registry/apis/provisioning/jobs"
	mock "github.com/stretchr/testify/mock"
)

// MockNamespaceCleaner is an autogenerated mock type for the NamespaceCleaner type
type MockNamespaceCleaner struct {
	mock.Mock
}

type MockNamespaceCleaner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespaceCleaner) EXPECT() *MockNamespaceCleaner_Expecter {
	return &MockNamespaceCleaner_Expecter{mock: &_m.Mock}
}

// Clean provides a mock function with given fields: ctx, namespace, progress
func (_m *MockNamespaceCleaner) Clean(ctx context.Context, namespace string, progress jobs.JobProgressRecorder) error {
	ret := _m.Called(ctx, namespace, progress)

	if len(ret) == 0 {
		panic("no return value specified for Clean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, jobs.JobProgressRecorder) error); ok {
		r0 = rf(ctx, namespace, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespaceCleaner_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type MockNamespaceCleaner_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - progress jobs.JobProgressRecorder
func (_e *MockNamespaceCleaner_Expecter) Clean(ctx interface{}, namespace interface{}, progress interface{}) *MockNamespaceCleaner_Clean_Call {
	return &MockNamespaceCleaner_Clean_Call{Call: _e.mock.On("Clean", ctx, namespace, progress)}
}

func (_c *MockNamespaceCleaner_Clean_Call) Run(run func(ctx context.Context, namespace string, progress jobs.JobProgressRecorder)) *MockNamespaceCleaner_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(jobs.JobProgressRecorder))
	})
	return _c
}

func (_c *MockNamespaceCleaner_Clean_Call) Return(_a0 error) *MockNamespaceCleaner_Clean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespaceCleaner_Clean_Call) RunAndReturn(run func(context.Context, string, jobs.JobProgressRecorder) error) *MockNamespaceCleaner_Clean_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamespaceCleaner creates a new instance of MockNamespaceCleaner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespaceCleaner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespaceCleaner {
	mock := &MockNamespaceCleaner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
