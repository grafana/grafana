// Code generated by mockery v2.52.4. DO NOT EDIT.

package github

import mock "github.com/stretchr/testify/mock"

// MockCommitFile is an autogenerated mock type for the CommitFile type
type MockCommitFile struct {
	mock.Mock
}

type MockCommitFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitFile) EXPECT() *MockCommitFile_Expecter {
	return &MockCommitFile_Expecter{mock: &_m.Mock}
}

// GetFilename provides a mock function with no fields
func (_m *MockCommitFile) GetFilename() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilename")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommitFile_GetFilename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilename'
type MockCommitFile_GetFilename_Call struct {
	*mock.Call
}

// GetFilename is a helper method to define mock.On call
func (_e *MockCommitFile_Expecter) GetFilename() *MockCommitFile_GetFilename_Call {
	return &MockCommitFile_GetFilename_Call{Call: _e.mock.On("GetFilename")}
}

func (_c *MockCommitFile_GetFilename_Call) Run(run func()) *MockCommitFile_GetFilename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitFile_GetFilename_Call) Return(_a0 string) *MockCommitFile_GetFilename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitFile_GetFilename_Call) RunAndReturn(run func() string) *MockCommitFile_GetFilename_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousFilename provides a mock function with no fields
func (_m *MockCommitFile) GetPreviousFilename() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousFilename")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommitFile_GetPreviousFilename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousFilename'
type MockCommitFile_GetPreviousFilename_Call struct {
	*mock.Call
}

// GetPreviousFilename is a helper method to define mock.On call
func (_e *MockCommitFile_Expecter) GetPreviousFilename() *MockCommitFile_GetPreviousFilename_Call {
	return &MockCommitFile_GetPreviousFilename_Call{Call: _e.mock.On("GetPreviousFilename")}
}

func (_c *MockCommitFile_GetPreviousFilename_Call) Run(run func()) *MockCommitFile_GetPreviousFilename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitFile_GetPreviousFilename_Call) Return(_a0 string) *MockCommitFile_GetPreviousFilename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitFile_GetPreviousFilename_Call) RunAndReturn(run func() string) *MockCommitFile_GetPreviousFilename_Call {
	_c.Call.Return(run)
	return _c
}

// GetSHA provides a mock function with no fields
func (_m *MockCommitFile) GetSHA() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSHA")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommitFile_GetSHA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSHA'
type MockCommitFile_GetSHA_Call struct {
	*mock.Call
}

// GetSHA is a helper method to define mock.On call
func (_e *MockCommitFile_Expecter) GetSHA() *MockCommitFile_GetSHA_Call {
	return &MockCommitFile_GetSHA_Call{Call: _e.mock.On("GetSHA")}
}

func (_c *MockCommitFile_GetSHA_Call) Run(run func()) *MockCommitFile_GetSHA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitFile_GetSHA_Call) Return(_a0 string) *MockCommitFile_GetSHA_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitFile_GetSHA_Call) RunAndReturn(run func() string) *MockCommitFile_GetSHA_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with no fields
func (_m *MockCommitFile) GetStatus() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommitFile_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockCommitFile_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *MockCommitFile_Expecter) GetStatus() *MockCommitFile_GetStatus_Call {
	return &MockCommitFile_GetStatus_Call{Call: _e.mock.On("GetStatus")}
}

func (_c *MockCommitFile_GetStatus_Call) Run(run func()) *MockCommitFile_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitFile_GetStatus_Call) Return(_a0 string) *MockCommitFile_GetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitFile_GetStatus_Call) RunAndReturn(run func() string) *MockCommitFile_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommitFile creates a new instance of MockCommitFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitFile {
	mock := &MockCommitFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
