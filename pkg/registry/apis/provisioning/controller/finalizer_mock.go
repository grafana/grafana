// Code generated by mockery v2.53.4. DO NOT EDIT.

package controller

import (
	context "context"

	repository "github.com/grafana/grafana/apps/provisioning/pkg/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockFinalizer is an autogenerated mock type for the Finalizer type
type MockFinalizer struct {
	mock.Mock
}

type MockFinalizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinalizer) EXPECT() *MockFinalizer_Expecter {
	return &MockFinalizer_Expecter{mock: &_m.Mock}
}

// process provides a mock function with given fields: ctx, repo, finalizers
func (_m *MockFinalizer) process(ctx context.Context, repo repository.Repository, finalizers []string) error {
	ret := _m.Called(ctx, repo, finalizers)

	if len(ret) == 0 {
		panic("no return value specified for process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Repository, []string) error); ok {
		r0 = rf(ctx, repo, finalizers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFinalizer_process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'process'
type MockFinalizer_process_Call struct {
	*mock.Call
}

// process is a helper method to define mock.On call
//   - ctx context.Context
//   - repo repository.Repository
//   - finalizers []string
func (_e *MockFinalizer_Expecter) process(ctx interface{}, repo interface{}, finalizers interface{}) *MockFinalizer_process_Call {
	return &MockFinalizer_process_Call{Call: _e.mock.On("process", ctx, repo, finalizers)}
}

func (_c *MockFinalizer_process_Call) Run(run func(ctx context.Context, repo repository.Repository, finalizers []string)) *MockFinalizer_process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.Repository), args[2].([]string))
	})
	return _c
}

func (_c *MockFinalizer_process_Call) Return(_a0 error) *MockFinalizer_process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFinalizer_process_Call) RunAndReturn(run func(context.Context, repository.Repository, []string) error) *MockFinalizer_process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFinalizer creates a new instance of MockFinalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinalizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinalizer {
	mock := &MockFinalizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
