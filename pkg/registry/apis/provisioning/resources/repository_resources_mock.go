// Code generated by mockery v2.52.4. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockRepositoryResources is an autogenerated mock type for the RepositoryResources type
type MockRepositoryResources struct {
	mock.Mock
}

type MockRepositoryResources_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryResources) EXPECT() *MockRepositoryResources_Expecter {
	return &MockRepositoryResources_Expecter{mock: &_m.Mock}
}

// CreateResourceFileFromObject provides a mock function with given fields: ctx, obj, options
func (_m *MockRepositoryResources) CreateResourceFileFromObject(ctx context.Context, obj *unstructured.Unstructured, options WriteOptions) (string, error) {
	ret := _m.Called(ctx, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceFileFromObject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, WriteOptions) (string, error)); ok {
		return rf(ctx, obj, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, WriteOptions) string); ok {
		r0 = rf(ctx, obj, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, WriteOptions) error); ok {
		r1 = rf(ctx, obj, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryResources_CreateResourceFileFromObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResourceFileFromObject'
type MockRepositoryResources_CreateResourceFileFromObject_Call struct {
	*mock.Call
}

// CreateResourceFileFromObject is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options WriteOptions
func (_e *MockRepositoryResources_Expecter) CreateResourceFileFromObject(ctx interface{}, obj interface{}, options interface{}) *MockRepositoryResources_CreateResourceFileFromObject_Call {
	return &MockRepositoryResources_CreateResourceFileFromObject_Call{Call: _e.mock.On("CreateResourceFileFromObject", ctx, obj, options)}
}

func (_c *MockRepositoryResources_CreateResourceFileFromObject_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options WriteOptions)) *MockRepositoryResources_CreateResourceFileFromObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*unstructured.Unstructured), args[2].(WriteOptions))
	})
	return _c
}

func (_c *MockRepositoryResources_CreateResourceFileFromObject_Call) Return(_a0 string, _a1 error) *MockRepositoryResources_CreateResourceFileFromObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryResources_CreateResourceFileFromObject_Call) RunAndReturn(run func(context.Context, *unstructured.Unstructured, WriteOptions) (string, error)) *MockRepositoryResources_CreateResourceFileFromObject_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureFolderTreeExists provides a mock function with given fields: ctx, ref, path, tree, fn
func (_m *MockRepositoryResources) EnsureFolderTreeExists(ctx context.Context, ref string, path string, tree FolderTree, fn func(Folder, bool, error) error) error {
	ret := _m.Called(ctx, ref, path, tree, fn)

	if len(ret) == 0 {
		panic("no return value specified for EnsureFolderTreeExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, FolderTree, func(Folder, bool, error) error) error); ok {
		r0 = rf(ctx, ref, path, tree, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryResources_EnsureFolderTreeExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureFolderTreeExists'
type MockRepositoryResources_EnsureFolderTreeExists_Call struct {
	*mock.Call
}

// EnsureFolderTreeExists is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
//   - path string
//   - tree FolderTree
//   - fn func(Folder , bool , error) error
func (_e *MockRepositoryResources_Expecter) EnsureFolderTreeExists(ctx interface{}, ref interface{}, path interface{}, tree interface{}, fn interface{}) *MockRepositoryResources_EnsureFolderTreeExists_Call {
	return &MockRepositoryResources_EnsureFolderTreeExists_Call{Call: _e.mock.On("EnsureFolderTreeExists", ctx, ref, path, tree, fn)}
}

func (_c *MockRepositoryResources_EnsureFolderTreeExists_Call) Run(run func(ctx context.Context, ref string, path string, tree FolderTree, fn func(Folder, bool, error) error)) *MockRepositoryResources_EnsureFolderTreeExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(FolderTree), args[4].(func(Folder, bool, error) error))
	})
	return _c
}

func (_c *MockRepositoryResources_EnsureFolderTreeExists_Call) Return(_a0 error) *MockRepositoryResources_EnsureFolderTreeExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryResources_EnsureFolderTreeExists_Call) RunAndReturn(run func(context.Context, string, string, FolderTree, func(Folder, bool, error) error) error) *MockRepositoryResources_EnsureFolderTreeExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryResources creates a new instance of MockRepositoryResources. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryResources(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryResources {
	mock := &MockRepositoryResources{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
