// Code generated by mockery v2.52.4. DO NOT EDIT.

package resources

import (
	context "context"

	v0alpha1 "github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockResourceLister is an autogenerated mock type for the ResourceLister type
type MockResourceLister struct {
	mock.Mock
}

type MockResourceLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceLister) EXPECT() *MockResourceLister_Expecter {
	return &MockResourceLister_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, namespace, repository
func (_m *MockResourceLister) List(ctx context.Context, namespace string, repository string) (*v0alpha1.ResourceList, error) {
	ret := _m.Called(ctx, namespace, repository)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v0alpha1.ResourceList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v0alpha1.ResourceList, error)); ok {
		return rf(ctx, namespace, repository)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v0alpha1.ResourceList); ok {
		r0 = rf(ctx, namespace, repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0alpha1.ResourceList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceLister_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockResourceLister_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - repository string
func (_e *MockResourceLister_Expecter) List(ctx interface{}, namespace interface{}, repository interface{}) *MockResourceLister_List_Call {
	return &MockResourceLister_List_Call{Call: _e.mock.On("List", ctx, namespace, repository)}
}

func (_c *MockResourceLister_List_Call) Run(run func(ctx context.Context, namespace string, repository string)) *MockResourceLister_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockResourceLister_List_Call) Return(_a0 *v0alpha1.ResourceList, _a1 error) *MockResourceLister_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceLister_List_Call) RunAndReturn(run func(context.Context, string, string) (*v0alpha1.ResourceList, error)) *MockResourceLister_List_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with given fields: ctx, namespace, repository
func (_m *MockResourceLister) Stats(ctx context.Context, namespace string, repository string) (*v0alpha1.ResourceStats, error) {
	ret := _m.Called(ctx, namespace, repository)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 *v0alpha1.ResourceStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v0alpha1.ResourceStats, error)); ok {
		return rf(ctx, namespace, repository)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v0alpha1.ResourceStats); ok {
		r0 = rf(ctx, namespace, repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0alpha1.ResourceStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceLister_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockResourceLister_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - repository string
func (_e *MockResourceLister_Expecter) Stats(ctx interface{}, namespace interface{}, repository interface{}) *MockResourceLister_Stats_Call {
	return &MockResourceLister_Stats_Call{Call: _e.mock.On("Stats", ctx, namespace, repository)}
}

func (_c *MockResourceLister_Stats_Call) Run(run func(ctx context.Context, namespace string, repository string)) *MockResourceLister_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockResourceLister_Stats_Call) Return(_a0 *v0alpha1.ResourceStats, _a1 error) *MockResourceLister_Stats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceLister_Stats_Call) RunAndReturn(run func(context.Context, string, string) (*v0alpha1.ResourceStats, error)) *MockResourceLister_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceLister creates a new instance of MockResourceLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceLister {
	mock := &MockResourceLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
