// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Row is an autogenerated mock type for the Row type
type Row struct {
	mock.Mock
}

type Row_Expecter struct {
	mock *mock.Mock
}

func (_m *Row) EXPECT() *Row_Expecter {
	return &Row_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with given fields:
func (_m *Row) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Row_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Row_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Row_Expecter) Err() *Row_Err_Call {
	return &Row_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Row_Err_Call) Run(run func()) *Row_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Row_Err_Call) Return(_a0 error) *Row_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Row_Err_Call) RunAndReturn(run func() error) *Row_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: dest
func (_m *Row) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Row_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type Row_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...interface{}
func (_e *Row_Expecter) Scan(dest ...interface{}) *Row_Scan_Call {
	return &Row_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *Row_Scan_Call) Run(run func(dest ...interface{})) *Row_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Row_Scan_Call) Return(_a0 error) *Row_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Row_Scan_Call) RunAndReturn(run func(...interface{}) error) *Row_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewRow creates a new instance of Row. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRow(t interface {
	mock.TestingT
	Cleanup(func())
}) *Row {
	mock := &Row{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
