// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Result is an autogenerated mock type for the result type
type Result struct {
	mock.Mock
}

type Result_Expecter struct {
	mock *mock.Mock
}

func (_m *Result) EXPECT() *Result_Expecter {
	return &Result_Expecter{mock: &_m.Mock}
}

// LastInsertId provides a mock function with given fields:
func (_m *Result) LastInsertId() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastInsertId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Result_LastInsertId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastInsertId'
type Result_LastInsertId_Call struct {
	*mock.Call
}

// LastInsertId is a helper method to define mock.On call
func (_e *Result_Expecter) LastInsertId() *Result_LastInsertId_Call {
	return &Result_LastInsertId_Call{Call: _e.mock.On("LastInsertId")}
}

func (_c *Result_LastInsertId_Call) Run(run func()) *Result_LastInsertId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Result_LastInsertId_Call) Return(_a0 int64, _a1 error) *Result_LastInsertId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Result_LastInsertId_Call) RunAndReturn(run func() (int64, error)) *Result_LastInsertId_Call {
	_c.Call.Return(run)
	return _c
}

// RowsAffected provides a mock function with given fields:
func (_m *Result) RowsAffected() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RowsAffected")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Result_RowsAffected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RowsAffected'
type Result_RowsAffected_Call struct {
	*mock.Call
}

// RowsAffected is a helper method to define mock.On call
func (_e *Result_Expecter) RowsAffected() *Result_RowsAffected_Call {
	return &Result_RowsAffected_Call{Call: _e.mock.On("RowsAffected")}
}

func (_c *Result_RowsAffected_Call) Run(run func()) *Result_RowsAffected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Result_RowsAffected_Call) Return(_a0 int64, _a1 error) *Result_RowsAffected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Result_RowsAffected_Call) RunAndReturn(run func() (int64, error)) *Result_RowsAffected_Call {
	_c.Call.Return(run)
	return _c
}

// NewResult creates a new instance of Result. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *Result {
	mock := &Result{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
