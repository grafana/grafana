// Code generated by mockery v2.31.4. DO NOT EDIT.

package utils

import mock "github.com/stretchr/testify/mock"

// MockArgs is an autogenerated mock type for the Args type
type MockArgs struct {
	mock.Mock
}

// First provides a mock function with given fields:
func (_m *MockArgs) First() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: n
func (_m *MockArgs) Get(n int) string {
	ret := _m.Called(n)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *MockArgs) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Present provides a mock function with given fields:
func (_m *MockArgs) Present() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Slice provides a mock function with given fields:
func (_m *MockArgs) Slice() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Tail provides a mock function with given fields:
func (_m *MockArgs) Tail() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewMockArgs creates a new instance of MockArgs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArgs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArgs {
	mock := &MockArgs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
