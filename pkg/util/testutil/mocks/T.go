// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// T is an autogenerated mock type for the T type
type T struct {
	mock.Mock
}

type T_Expecter struct {
	mock *mock.Mock
}

func (_m *T) EXPECT() *T_Expecter {
	return &T_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: _a0
func (_m *T) Cleanup(_a0 func()) {
	_m.Called(_a0)
}

// T_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type T_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - _a0 func()
func (_e *T_Expecter) Cleanup(_a0 interface{}) *T_Cleanup_Call {
	return &T_Cleanup_Call{Call: _e.mock.On("Cleanup", _a0)}
}

func (_c *T_Cleanup_Call) Run(run func(_a0 func())) *T_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *T_Cleanup_Call) Return() *T_Cleanup_Call {
	_c.Call.Return()
	return _c
}

func (_c *T_Cleanup_Call) RunAndReturn(run func(func())) *T_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Deadline provides a mock function with given fields:
func (_m *T) Deadline() (time.Time, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// T_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type T_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *T_Expecter) Deadline() *T_Deadline_Call {
	return &T_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *T_Deadline_Call) Run(run func()) *T_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *T_Deadline_Call) Return(_a0 time.Time, _a1 bool) *T_Deadline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *T_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *T_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *T) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// T_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type T_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *T_Expecter) Errorf(format interface{}, args ...interface{}) *T_Errorf_Call {
	return &T_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *T_Errorf_Call) Run(run func(format string, args ...interface{})) *T_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *T_Errorf_Call) Return() *T_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *T_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *T_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// FailNow provides a mock function with given fields:
func (_m *T) FailNow() {
	_m.Called()
}

// T_FailNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailNow'
type T_FailNow_Call struct {
	*mock.Call
}

// FailNow is a helper method to define mock.On call
func (_e *T_Expecter) FailNow() *T_FailNow_Call {
	return &T_FailNow_Call{Call: _e.mock.On("FailNow")}
}

func (_c *T_FailNow_Call) Run(run func()) *T_FailNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *T_FailNow_Call) Return() *T_FailNow_Call {
	_c.Call.Return()
	return _c
}

func (_c *T_FailNow_Call) RunAndReturn(run func()) *T_FailNow_Call {
	_c.Call.Return(run)
	return _c
}

// Helper provides a mock function with given fields:
func (_m *T) Helper() {
	_m.Called()
}

// T_Helper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Helper'
type T_Helper_Call struct {
	*mock.Call
}

// Helper is a helper method to define mock.On call
func (_e *T_Expecter) Helper() *T_Helper_Call {
	return &T_Helper_Call{Call: _e.mock.On("Helper")}
}

func (_c *T_Helper_Call) Run(run func()) *T_Helper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *T_Helper_Call) Return() *T_Helper_Call {
	_c.Call.Return()
	return _c
}

func (_c *T_Helper_Call) RunAndReturn(run func()) *T_Helper_Call {
	_c.Call.Return(run)
	return _c
}

// NewT creates a new instance of T. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewT(t interface {
	mock.TestingT
	Cleanup(func())
}) *T {
	mock := &T{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
