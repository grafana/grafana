//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by openapi-gen. DO NOT EDIT.

package v0alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.Annotation":                    schema_pkg_apis_annotations_v0alpha1_Annotation(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationAlert":               schema_pkg_apis_annotations_v0alpha1_AnnotationAlert(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationDashboard":           schema_pkg_apis_annotations_v0alpha1_AnnotationDashboard(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationList":                schema_pkg_apis_annotations_v0alpha1_AnnotationList(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationSpec":                schema_pkg_apis_annotations_v0alpha1_AnnotationSpec(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationStatus":              schema_pkg_apis_annotations_v0alpha1_AnnotationStatus(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationstatusOperatorState": schema_pkg_apis_annotations_v0alpha1_AnnotationstatusOperatorState(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.ItemQuery":                     schema_pkg_apis_annotations_v0alpha1_ItemQuery(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.TagCount":                      schema_pkg_apis_annotations_v0alpha1_TagCount(ref),
		"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.TagList":                       schema_pkg_apis_annotations_v0alpha1_TagList(ref),
	}
}

func schema_pkg_apis_annotations_v0alpha1_Annotation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec is the spec of the Annotation",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationStatus"),
						},
					},
				},
				Required: []string{"metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationSpec", "github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_annotations_v0alpha1_AnnotationAlert(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The alert k8s name (grafana UID)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prevState": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"newState": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "prevState", "newState", "data"},
			},
		},
	}
}

func schema_pkg_apis_annotations_v0alpha1_AnnotationDashboard(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The dashboard k8s name (grafana UID)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"panel": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_annotations_v0alpha1_AnnotationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.Annotation"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.Annotation", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_annotations_v0alpha1_AnnotationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"text": {
						SchemaProps: spec.SchemaProps{
							Description: "Display text (supports markdown)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "Query tags",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "milliseconds to draw the annotation",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"timeEnd": {
						SchemaProps: spec.SchemaProps{
							Description: "when the annotation is a range, this is the right side",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"dashboard": {
						SchemaProps: spec.SchemaProps{
							Description: "Display the annotation on a specific dashboard + panel",
							Ref:         ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationDashboard"),
						},
					},
					"alert": {
						SchemaProps: spec.SchemaProps{
							Description: "The source alert data",
							Ref:         ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationAlert"),
						},
					},
				},
				Required: []string{"text", "time"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationAlert", "github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationDashboard"},
	}
}

func schema_pkg_apis_annotations_v0alpha1_AnnotationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"operatorStates": {
						SchemaProps: spec.SchemaProps{
							Description: "operatorStates is a map of operator ID to operator state evaluations. Any operator which consumes this kind SHOULD add its state evaluation information to this field.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationstatusOperatorState"),
									},
								},
							},
						},
					},
					"additionalFields": {
						SchemaProps: spec.SchemaProps{
							Description: "additionalFields is reserved for future use",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.AnnotationstatusOperatorState"},
	}
}

func schema_pkg_apis_annotations_v0alpha1_AnnotationstatusOperatorState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"lastEvaluation": {
						SchemaProps: spec.SchemaProps{
							Description: "lastEvaluation is the ResourceVersion last evaluated",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "state describes the state of the lastEvaluation. It is limited to three possible states for machine evaluation.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"descriptiveState": {
						SchemaProps: spec.SchemaProps{
							Description: "descriptiveState is an optional more descriptive state field which has no requirements on format",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"details": {
						SchemaProps: spec.SchemaProps{
							Description: "details contains any extra information that is operator-specific",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"lastEvaluation", "state"},
			},
		},
	}
}

func schema_pkg_apis_annotations_v0alpha1_ItemQuery(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NOTE this query is done with a user in context that must be namespaced",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"from": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
					"to": {
						SchemaProps: spec.SchemaProps{
							Description: "time range",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"alertUID": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"dashboardUID": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"panelId": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "necessary in the query?",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"matchAny": {
						SchemaProps: spec.SchemaProps{
							Default: false,
							Type:    []string{"boolean"},
							Format:  "",
						},
					},
					"limit": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
					"Page": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
				},
				Required: []string{"from", "to", "alertUID", "dashboardUID", "panelId", "tags", "matchAny", "limit", "Page"},
			},
		},
	}
}

func schema_pkg_apis_annotations_v0alpha1_TagCount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"tag": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"count": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
				},
				Required: []string{"tag", "count"},
			},
		},
	}
}

func schema_pkg_apis_annotations_v0alpha1_TagList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.TagCount"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/annotations/pkg/apis/annotations/v0alpha1.TagCount", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}
