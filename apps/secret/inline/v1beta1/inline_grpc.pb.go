// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: inline/v1beta1/inline.proto

package inlinev1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InlineSecureValueService_CanReference_FullMethodName              = "/inlinev1beta1.InlineSecureValueService/CanReference"
	InlineSecureValueService_CreateInline_FullMethodName              = "/inlinev1beta1.InlineSecureValueService/CreateInline"
	InlineSecureValueService_DeleteWhenOwnedByResource_FullMethodName = "/inlinev1beta1.InlineSecureValueService/DeleteWhenOwnedByResource"
)

// InlineSecureValueServiceClient is the client API for InlineSecureValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InlineSecureValueServiceClient interface {
	// Check that the request user can reference a secret in the context of a given resource (owner)
	CanReference(ctx context.Context, in *CanReferenceRequest, opts ...grpc.CallOption) (*CanReferenceResponse, error)
	// CreateInline creates a secret that is owned by the referenced object. Returns the name of the created secret or an error
	CreateInline(ctx context.Context, in *CreateInlineRequest, opts ...grpc.CallOption) (*CreateInlineResponse, error)
	// DeleteWhenOwnedByResource removes secrets if and only if they are owned by a referenced object
	DeleteWhenOwnedByResource(ctx context.Context, in *DeleteWhenOwnedByResourceRequest, opts ...grpc.CallOption) (*DeleteWhenOwnedByResourceResponse, error)
}

type inlineSecureValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInlineSecureValueServiceClient(cc grpc.ClientConnInterface) InlineSecureValueServiceClient {
	return &inlineSecureValueServiceClient{cc}
}

func (c *inlineSecureValueServiceClient) CanReference(ctx context.Context, in *CanReferenceRequest, opts ...grpc.CallOption) (*CanReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanReferenceResponse)
	err := c.cc.Invoke(ctx, InlineSecureValueService_CanReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inlineSecureValueServiceClient) CreateInline(ctx context.Context, in *CreateInlineRequest, opts ...grpc.CallOption) (*CreateInlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInlineResponse)
	err := c.cc.Invoke(ctx, InlineSecureValueService_CreateInline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inlineSecureValueServiceClient) DeleteWhenOwnedByResource(ctx context.Context, in *DeleteWhenOwnedByResourceRequest, opts ...grpc.CallOption) (*DeleteWhenOwnedByResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWhenOwnedByResourceResponse)
	err := c.cc.Invoke(ctx, InlineSecureValueService_DeleteWhenOwnedByResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InlineSecureValueServiceServer is the server API for InlineSecureValueService service.
// All implementations should embed UnimplementedInlineSecureValueServiceServer
// for forward compatibility
type InlineSecureValueServiceServer interface {
	// Check that the request user can reference a secret in the context of a given resource (owner)
	CanReference(context.Context, *CanReferenceRequest) (*CanReferenceResponse, error)
	// CreateInline creates a secret that is owned by the referenced object. Returns the name of the created secret or an error
	CreateInline(context.Context, *CreateInlineRequest) (*CreateInlineResponse, error)
	// DeleteWhenOwnedByResource removes secrets if and only if they are owned by a referenced object
	DeleteWhenOwnedByResource(context.Context, *DeleteWhenOwnedByResourceRequest) (*DeleteWhenOwnedByResourceResponse, error)
}

// UnimplementedInlineSecureValueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInlineSecureValueServiceServer struct {
}

func (UnimplementedInlineSecureValueServiceServer) CanReference(context.Context, *CanReferenceRequest) (*CanReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanReference not implemented")
}
func (UnimplementedInlineSecureValueServiceServer) CreateInline(context.Context, *CreateInlineRequest) (*CreateInlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInline not implemented")
}
func (UnimplementedInlineSecureValueServiceServer) DeleteWhenOwnedByResource(context.Context, *DeleteWhenOwnedByResourceRequest) (*DeleteWhenOwnedByResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhenOwnedByResource not implemented")
}

// UnsafeInlineSecureValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InlineSecureValueServiceServer will
// result in compilation errors.
type UnsafeInlineSecureValueServiceServer interface {
	mustEmbedUnimplementedInlineSecureValueServiceServer()
}

func RegisterInlineSecureValueServiceServer(s grpc.ServiceRegistrar, srv InlineSecureValueServiceServer) {
	s.RegisterService(&InlineSecureValueService_ServiceDesc, srv)
}

func _InlineSecureValueService_CanReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InlineSecureValueServiceServer).CanReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InlineSecureValueService_CanReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InlineSecureValueServiceServer).CanReference(ctx, req.(*CanReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InlineSecureValueService_CreateInline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InlineSecureValueServiceServer).CreateInline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InlineSecureValueService_CreateInline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InlineSecureValueServiceServer).CreateInline(ctx, req.(*CreateInlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InlineSecureValueService_DeleteWhenOwnedByResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWhenOwnedByResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InlineSecureValueServiceServer).DeleteWhenOwnedByResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InlineSecureValueService_DeleteWhenOwnedByResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InlineSecureValueServiceServer).DeleteWhenOwnedByResource(ctx, req.(*DeleteWhenOwnedByResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InlineSecureValueService_ServiceDesc is the grpc.ServiceDesc for InlineSecureValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InlineSecureValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inlinev1beta1.InlineSecureValueService",
	HandlerType: (*InlineSecureValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanReference",
			Handler:    _InlineSecureValueService_CanReference_Handler,
		},
		{
			MethodName: "CreateInline",
			Handler:    _InlineSecureValueService_CreateInline_Handler,
		},
		{
			MethodName: "DeleteWhenOwnedByResource",
			Handler:    _InlineSecureValueService_DeleteWhenOwnedByResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inline/v1beta1/inline.proto",
}
