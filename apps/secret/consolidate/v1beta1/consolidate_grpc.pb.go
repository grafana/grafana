// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: consolidate/v1beta1/consolidate.proto

package consolidatev1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SecretsConsolidator_Consolidate_FullMethodName = "/consolidatev1beta1.SecretsConsolidator/Consolidate"
)

// SecretsConsolidatorClient is the client API for SecretsConsolidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsConsolidatorClient interface {
	// Consolidates secrets and returns success or error message.
	Consolidate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SecretsConsolidateResponse, error)
}

type secretsConsolidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsConsolidatorClient(cc grpc.ClientConnInterface) SecretsConsolidatorClient {
	return &secretsConsolidatorClient{cc}
}

func (c *secretsConsolidatorClient) Consolidate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SecretsConsolidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretsConsolidateResponse)
	err := c.cc.Invoke(ctx, SecretsConsolidator_Consolidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsConsolidatorServer is the server API for SecretsConsolidator service.
// All implementations should embed UnimplementedSecretsConsolidatorServer
// for forward compatibility
type SecretsConsolidatorServer interface {
	// Consolidates secrets and returns success or error message.
	Consolidate(context.Context, *emptypb.Empty) (*SecretsConsolidateResponse, error)
}

// UnimplementedSecretsConsolidatorServer should be embedded to have forward compatible implementations.
type UnimplementedSecretsConsolidatorServer struct {
}

func (UnimplementedSecretsConsolidatorServer) Consolidate(context.Context, *emptypb.Empty) (*SecretsConsolidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consolidate not implemented")
}

// UnsafeSecretsConsolidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsConsolidatorServer will
// result in compilation errors.
type UnsafeSecretsConsolidatorServer interface {
	mustEmbedUnimplementedSecretsConsolidatorServer()
}

func RegisterSecretsConsolidatorServer(s grpc.ServiceRegistrar, srv SecretsConsolidatorServer) {
	s.RegisterService(&SecretsConsolidator_ServiceDesc, srv)
}

func _SecretsConsolidator_Consolidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsConsolidatorServer).Consolidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsConsolidator_Consolidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsConsolidatorServer).Consolidate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsConsolidator_ServiceDesc is the grpc.ServiceDesc for SecretsConsolidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsConsolidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consolidatev1beta1.SecretsConsolidator",
	HandlerType: (*SecretsConsolidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consolidate",
			Handler:    _SecretsConsolidator_Consolidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consolidate/v1beta1/consolidate.proto",
}
