// Code generated by mockery v2.52.4. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStageableRepository is an autogenerated mock type for the StageableRepository type
type MockStageableRepository struct {
	mock.Mock
}

type MockStageableRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStageableRepository) EXPECT() *MockStageableRepository_Expecter {
	return &MockStageableRepository_Expecter{mock: &_m.Mock}
}

// Stage provides a mock function with given fields: ctx, opts
func (_m *MockStageableRepository) Stage(ctx context.Context, opts StageOptions) (StagedRepository, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Stage")
	}

	var r0 StagedRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, StageOptions) (StagedRepository, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, StageOptions) StagedRepository); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StagedRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, StageOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStageableRepository_Stage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stage'
type MockStageableRepository_Stage_Call struct {
	*mock.Call
}

// Stage is a helper method to define mock.On call
//   - ctx context.Context
//   - opts StageOptions
func (_e *MockStageableRepository_Expecter) Stage(ctx interface{}, opts interface{}) *MockStageableRepository_Stage_Call {
	return &MockStageableRepository_Stage_Call{Call: _e.mock.On("Stage", ctx, opts)}
}

func (_c *MockStageableRepository_Stage_Call) Run(run func(ctx context.Context, opts StageOptions)) *MockStageableRepository_Stage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(StageOptions))
	})
	return _c
}

func (_c *MockStageableRepository_Stage_Call) Return(_a0 StagedRepository, _a1 error) *MockStageableRepository_Stage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStageableRepository_Stage_Call) RunAndReturn(run func(context.Context, StageOptions) (StagedRepository, error)) *MockStageableRepository_Stage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStageableRepository creates a new instance of MockStageableRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStageableRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStageableRepository {
	mock := &MockStageableRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
