// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v0alpha1

import (
	provisioningv0alpha1 "github.com/grafana/grafana/apps/provisioning/pkg/apis/provisioning/v0alpha1"
)

// JobStatusApplyConfiguration represents a declarative configuration of the JobStatus type for use
// with apply.
type JobStatusApplyConfiguration struct {
	State    *provisioningv0alpha1.JobState             `json:"state,omitempty"`
	Started  *int64                                     `json:"started,omitempty"`
	Finished *int64                                     `json:"finished,omitempty"`
	Message  *string                                    `json:"message,omitempty"`
	Errors   []string                                   `json:"errors,omitempty"`
	Progress *float64                                   `json:"progress,omitempty"`
	Summary  []*provisioningv0alpha1.JobResourceSummary `json:"summary,omitempty"`
	URLs     *RepositoryURLsApplyConfiguration          `json:"url,omitempty"`
}

// JobStatusApplyConfiguration constructs a declarative configuration of the JobStatus type for use with
// apply.
func JobStatus() *JobStatusApplyConfiguration {
	return &JobStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithState(value provisioningv0alpha1.JobState) *JobStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithStarted sets the Started field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Started field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithStarted(value int64) *JobStatusApplyConfiguration {
	b.Started = &value
	return b
}

// WithFinished sets the Finished field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Finished field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithFinished(value int64) *JobStatusApplyConfiguration {
	b.Finished = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithMessage(value string) *JobStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithErrors adds the given value to the Errors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Errors field.
func (b *JobStatusApplyConfiguration) WithErrors(values ...string) *JobStatusApplyConfiguration {
	for i := range values {
		b.Errors = append(b.Errors, values[i])
	}
	return b
}

// WithProgress sets the Progress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Progress field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithProgress(value float64) *JobStatusApplyConfiguration {
	b.Progress = &value
	return b
}

// WithSummary adds the given value to the Summary field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Summary field.
func (b *JobStatusApplyConfiguration) WithSummary(values ...**provisioningv0alpha1.JobResourceSummary) *JobStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSummary")
		}
		b.Summary = append(b.Summary, *values[i])
	}
	return b
}

// WithURLs sets the URLs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URLs field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithURLs(value *RepositoryURLsApplyConfiguration) *JobStatusApplyConfiguration {
	b.URLs = value
	return b
}
