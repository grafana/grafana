// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v0alpha1 "github.com/grafana/grafana/apps/provisioning/pkg/apis/provisioning/v0alpha1"
	provisioningv0alpha1 "github.com/grafana/grafana/apps/provisioning/pkg/generated/applyconfiguration/provisioning/v0alpha1"
	typedprovisioningv0alpha1 "github.com/grafana/grafana/apps/provisioning/pkg/generated/clientset/versioned/typed/provisioning/v0alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeJobs implements JobInterface
type fakeJobs struct {
	*gentype.FakeClientWithListAndApply[*v0alpha1.Job, *v0alpha1.JobList, *provisioningv0alpha1.JobApplyConfiguration]
	Fake *FakeProvisioningV0alpha1
}

func newFakeJobs(fake *FakeProvisioningV0alpha1, namespace string) typedprovisioningv0alpha1.JobInterface {
	return &fakeJobs{
		gentype.NewFakeClientWithListAndApply[*v0alpha1.Job, *v0alpha1.JobList, *provisioningv0alpha1.JobApplyConfiguration](
			fake.Fake,
			namespace,
			v0alpha1.SchemeGroupVersion.WithResource("jobs"),
			v0alpha1.SchemeGroupVersion.WithKind("Job"),
			func() *v0alpha1.Job { return &v0alpha1.Job{} },
			func() *v0alpha1.JobList { return &v0alpha1.JobList{} },
			func(dst, src *v0alpha1.JobList) { dst.ListMeta = src.ListMeta },
			func(list *v0alpha1.JobList) []*v0alpha1.Job { return gentype.ToPointerSlice(list.Items) },
			func(list *v0alpha1.JobList, items []*v0alpha1.Job) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
