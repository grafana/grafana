{
  "components": {
    "responses": {
      "GetAllIntervalsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/GettableTimeIntervals"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "GetIntervalsByNameResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GettableTimeIntervals"
            }
          }
        },
        "description": "(empty)"
      },
      "GetReceiverResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GettableApiReceiver"
            }
          }
        },
        "description": "(empty)"
      },
      "GetReceiversResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/GettableApiReceiver"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "GettableHistoricUserConfigs": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/GettableHistoricUserConfig"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "SMTPNotEnabledError": {
        "description": "(empty)"
      },
      "StateHistory": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Frame"
            }
          }
        },
        "description": "(empty)"
      },
      "TestGrafanaRuleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/postableAlert"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "acceptedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "AcceptedResponse"
      },
      "adminCreateUserResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdminCreateUserResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "adminGetSettingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SettingsBag"
            }
          }
        },
        "description": "(empty)"
      },
      "adminGetStatsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdminStats"
            }
          }
        },
        "description": "(empty)"
      },
      "adminGetUserAuthTokensResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserToken"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "apiResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/messageResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "badRequestError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "BadRequestError is returned when the request is invalid and it cannot be processed."
      },
      "badRequestPublicError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicError"
            }
          }
        },
        "description": "BadRequestPublicError is returned when the request is invalid and it cannot be processed."
      },
      "calculateDashboardDiffResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "format": "uint8",
                "type": "integer"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "cloudMigrationCreateTokenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateAccessTokenResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "cloudMigrationDeleteTokenResponse": {
        "description": "(empty)"
      },
      "cloudMigrationGetTokenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetAccessTokenResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "cloudMigrationRunListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CloudMigrationRunListDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "cloudMigrationRunResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MigrateDataResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "cloudMigrationSessionListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CloudMigrationSessionListResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "cloudMigrationSessionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CloudMigrationSessionResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "conflictError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "ConflictError"
      },
      "contentResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "format": "uint8",
                "type": "integer"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "createCorrelationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCorrelationResponseBody"
            }
          }
        },
        "description": "(empty)"
      },
      "createDashboardSnapshotResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "deleteKey": {
                  "description": "Unique key used to delete the snapshot. It is different from the key so that only the creator can delete the snapshot.",
                  "type": "string"
                },
                "deleteUrl": {
                  "type": "string"
                },
                "id": {
                  "description": "Snapshot id",
                  "format": "int64",
                  "type": "integer"
                },
                "key": {
                  "description": "Unique key",
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "createOrUpdateDatasourceResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "datasource": {
                  "$ref": "#/components/schemas/DataSource"
                },
                "id": {
                  "description": "ID Identifier of the new data source.",
                  "example": 65,
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "description": "Message Message of the deleted dashboard.",
                  "example": "Data source added",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the new data source.",
                  "example": "My Data source",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name",
                "message",
                "datasource"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "createOrgResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "description": "Message Message of the created org.",
                  "example": "Data source added",
                  "type": "string"
                },
                "orgId": {
                  "description": "ID Identifier of the created org.",
                  "example": 65,
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "orgId",
                "message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "createPlaylistResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Playlist"
            }
          }
        },
        "description": "(empty)"
      },
      "createPublicDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicDashboard"
            }
          }
        },
        "description": "(empty)"
      },
      "createReportResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "createRoleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RoleDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "createServiceAccountResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceAccountDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "createSnapshotResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateSnapshotResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "createTeamResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                },
                "teamId": {
                  "format": "int64",
                  "type": "integer"
                },
                "uid": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "createTokenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewApiKeyResult"
            }
          }
        },
        "description": "(empty)"
      },
      "dashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DashboardFullWithMeta"
            }
          }
        },
        "description": "(empty)"
      },
      "dashboardVersionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DashboardVersionMeta"
            }
          }
        },
        "description": "(empty)"
      },
      "dashboardVersionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DashboardVersionMeta"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "deleteCorrelationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteCorrelationResponseBody"
            }
          }
        },
        "description": "(empty)"
      },
      "deleteDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "description": "Message Message of the deleted dashboard.",
                  "example": "Dashboard My Dashboard deleted",
                  "type": "string"
                },
                "title": {
                  "description": "Title Title of the deleted dashboard.",
                  "example": "My Dashboard",
                  "type": "string"
                },
                "uid": {
                  "description": "UID Identifier of the deleted dashboard.",
                  "example": "65",
                  "type": "string"
                }
              },
              "required": [
                "uid",
                "title",
                "message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "deleteDataSourceByNameResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "ID Identifier of the deleted data source.",
                  "example": 65,
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "description": "Message Message of the deleted dashboard.",
                  "example": "Dashboard My Dashboard deleted",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "deleteFolderResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "ID Identifier of the deleted folder.",
                  "example": 65,
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "description": "Message Message of the deleted folder.",
                  "example": "Folder My Folder deleted",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the deleted folder.",
                  "example": "My Folder",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "title",
                "message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "devicesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/deviceDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "devicesSearchResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchDeviceQueryResult"
            }
          }
        },
        "description": "(empty)"
      },
      "folderResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Folder"
            }
          }
        },
        "description": "(empty)"
      },
      "forbiddenError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource."
      },
      "forbiddenPublicError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicError"
            }
          }
        },
        "description": "ForbiddenPublicError is returned if the user/token has insufficient permissions to access the requested resource."
      },
      "genericError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "A GenericError is the default error message that is generated.\nFor certain status codes there are more appropriate error structures."
      },
      "getAPIkeyResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ApiKeyDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getAccessControlStatusResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Status"
            }
          }
        },
        "description": "(empty)"
      },
      "getAllRolesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/RoleDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getAnnotationByIDResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Annotation"
            }
          }
        },
        "description": "(empty)"
      },
      "getAnnotationTagsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetAnnotationTagsResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getAnnotationsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Annotation"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getCorrelationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Correlation"
            }
          }
        },
        "description": "(empty)"
      },
      "getCorrelationsBySourceUIDResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Correlation"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getCorrelationsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Correlation"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getCurrentOrgResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgDetailsDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getDashboardPermissionsListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DashboardACLInfoDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getDashboardSnapshotResponse": {
        "description": "(empty)"
      },
      "getDashboardsTagsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DashboardTagCloudItem"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getDataSourceIDResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "ID Identifier of the data source.",
                  "example": 65,
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "getDataSourceResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataSource"
            }
          }
        },
        "description": "(empty)"
      },
      "getDataSourcesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataSourceList"
            }
          }
        },
        "description": "(empty)"
      },
      "getFolderDescendantCountsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DescendantCounts"
            }
          }
        },
        "description": "(empty)"
      },
      "getFolderPermissionListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DashboardACLInfoDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getFoldersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/FolderSearchHit"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getGroupMappingResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GroupMapping"
            }
          }
        },
        "description": "(empty)"
      },
      "getGroupMappingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getGroupMappings"
            }
          }
        },
        "description": "(empty)"
      },
      "getGroupRolesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/RoleDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getGroupsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getGroupsResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getHomeDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetHomeDashboardResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getLibraryElementArrayResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LibraryElementArrayResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getLibraryElementConnectionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LibraryElementConnectionsResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getLibraryElementResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LibraryElementResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getLibraryElementsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LibraryElementSearchResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getLicenseTokenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        },
        "description": "(empty)"
      },
      "getOrgByIDResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgDetailsDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getOrgByNameResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgDetailsDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getOrgUsersForCurrentOrgLookupResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserLookupDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getOrgUsersForCurrentOrgResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/OrgUserDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getOrgUsersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/OrgUserDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getPendingOrgInvitesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TempUserDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getPlaylistDashboardsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlaylistDashboardsSlice"
            }
          }
        },
        "description": "(empty)"
      },
      "getPlaylistItemsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PlaylistItemDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getPlaylistResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlaylistDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getPreferencesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Preferences"
            }
          }
        },
        "description": "(empty)"
      },
      "getPublicAnnotationsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AnnotationEvent"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getPublicDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicDashboard"
            }
          }
        },
        "description": "(empty)"
      },
      "getQueryHistoryDeleteQueryResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QueryHistoryDeleteQueryResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getQueryHistoryResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QueryHistoryResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getQueryHistorySearchResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QueryHistorySearchResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "getQuotaResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/QuotaDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getReportResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Report"
            }
          }
        },
        "description": "(empty)"
      },
      "getReportSettingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReportSettings"
            }
          }
        },
        "description": "(empty)"
      },
      "getReportsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Report"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getResourcePermissionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/resourcePermissionDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getRoleAssignmentsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RoleAssignmentsDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getRoleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RoleDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getSSOSettingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "settings": {
                  "additionalProperties": {},
                  "type": "object"
                },
                "source": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "getSharingOptionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "externalEnabled": {
                  "type": "boolean"
                },
                "externalSnapshotName": {
                  "type": "string"
                },
                "externalSnapshotURL": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "getSignedInUserOrgListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserOrgDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getSignedInUserTeamListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TeamDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getSnapshotResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetSnapshotResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getStatusResponse": {
        "description": "(empty)"
      },
      "getSyncStatusResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActiveSyncStatusDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getTeamByIDResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TeamDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "getTeamGroupsApiResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TeamGroupDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getTeamLBACRulesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TeamLBACRules"
            }
          }
        },
        "description": "(empty)"
      },
      "getTeamMembersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TeamMemberDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getUserAuthTokensResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserToken"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getUserOrgListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserOrgDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "getUserTeamsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TeamDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "goneError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "GoneError is returned when the requested endpoint was removed."
      },
      "helpFlagResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "helpFlags1": {
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "importDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ImportDashboardResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "internalServerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "InternalServerError is a general error indicating something went wrong internally."
      },
      "internalServerPublicError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicError"
            }
          }
        },
        "description": "InternalServerPublicError is a general error indicating something went wrong internally."
      },
      "jwksResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "keys": {
                  "items": {
                    "$ref": "#/components/schemas/JSONWebKey"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "listBuiltinRolesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/RoleDTO"
                },
                "type": "array"
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "listPublicDashboardsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicDashboardListResponseWithPagination"
            }
          }
        },
        "description": "(empty)"
      },
      "listRecordingRulesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/RecordingRuleJSON"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "listRolesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/RoleDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "listSSOSettingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "settings": {
                    "additionalProperties": {},
                    "type": "object"
                  },
                  "source": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "listSortOptionsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "description": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "meta": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "listTeamsRolesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/RoleDTO"
                },
                "type": "array"
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "listTokensResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TokenDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "listUsersRolesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/RoleDTO"
                },
                "type": "array"
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "noContentResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "notFoundError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "NotFoundError is returned when the requested resource was not found."
      },
      "notFoundPublicError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicError"
            }
          }
        },
        "description": "NotFoundPublicError is returned when the requested resource was not found."
      },
      "okResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessResponseBody"
            }
          }
        },
        "description": "An OKResponse is returned if the request was successful."
      },
      "postAnnotationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "description": "ID Identifier of the created annotation.",
                  "example": 65,
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "description": "Message Message of the created annotation.",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "message"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "postDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "folderUid": {
                  "description": "FolderUID The unique identifier (uid) of the folder the dashboard belongs to.",
                  "type": "string"
                },
                "id": {
                  "description": "ID The unique identifier (id) of the created/updated dashboard.",
                  "example": 1,
                  "format": "int64",
                  "type": "integer"
                },
                "status": {
                  "description": "Status status of the response.",
                  "example": "success",
                  "type": "string"
                },
                "title": {
                  "description": "Slug The slug of the dashboard.",
                  "example": "my-dashboard",
                  "type": "string"
                },
                "uid": {
                  "description": "UID The unique identifier (uid) of the created/updated dashboard.",
                  "example": "nHz3SXiiz",
                  "type": "string"
                },
                "url": {
                  "description": "URL The relative URL for accessing the created/updated dashboard.",
                  "example": "/d/nHz3SXiiz/my-dashboard",
                  "type": "string"
                },
                "version": {
                  "description": "Version The version of the dashboard.",
                  "example": 2,
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "status",
                "title",
                "version",
                "id",
                "uid",
                "url"
              ],
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "postRenewLicenseTokenResponse": {
        "description": "(empty)"
      },
      "preconditionFailedError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "PreconditionFailedError"
      },
      "publicErrorResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicError"
            }
          }
        },
        "description": "(empty)"
      },
      "queryMetricsWithExpressionsRespons": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QueryDataResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "queryPublicDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QueryDataResponse"
            }
          }
        },
        "description": "(empty)"
      },
      "receiversResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Receiver"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "recordingRuleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecordingRuleJSON"
            }
          }
        },
        "description": "(empty)"
      },
      "recordingRuleWriteTargetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrometheusRemoteWriteTargetJSON"
            }
          }
        },
        "description": "(empty)"
      },
      "refreshLicenseStatsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActiveUserStats"
            }
          }
        },
        "description": "(empty)"
      },
      "resourcePermissionsDescription": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Description"
            }
          }
        },
        "description": "(empty)"
      },
      "retrieveServiceAccountResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceAccountDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "searchDashboardSnapshotsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DashboardSnapshotDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "searchOrgServiceAccountsWithPagingResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchOrgServiceAccountsResult"
            }
          }
        },
        "description": "(empty)"
      },
      "searchOrgUsersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchOrgUsersQueryResult"
            }
          }
        },
        "description": "(empty)"
      },
      "searchOrgsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/OrgDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "searchPlaylistsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Playlists"
            }
          }
        },
        "description": "(empty)"
      },
      "searchResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HitList"
            }
          }
        },
        "description": "(empty)"
      },
      "searchResultResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchResult"
            }
          }
        },
        "description": "(empty)"
      },
      "searchTeamsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchTeamQueryResult"
            }
          }
        },
        "description": "(empty)"
      },
      "searchUsersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserSearchHitDTO"
              },
              "type": "array"
            }
          }
        },
        "description": "(empty)"
      },
      "searchUsersWithPagingResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchUserQueryResult"
            }
          }
        },
        "description": "(empty)"
      },
      "setRoleAssignmentsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RoleAssignmentsDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "snapshotListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SnapshotListResponseDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "statusMovedPermanently": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "StatusMovedPermanently"
      },
      "unauthorisedError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "UnauthorizedError is returned when the request is not authenticated."
      },
      "unauthorisedPublicError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicError"
            }
          }
        },
        "description": "UnauthorisedPublicError is returned when the request is not authenticated."
      },
      "unprocessableEntityError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseBody"
            }
          }
        },
        "description": "UnprocessableEntityError"
      },
      "updateCorrelationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCorrelationResponseBody"
            }
          }
        },
        "description": "(empty)"
      },
      "updatePlaylistResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlaylistDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "updatePublicDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicDashboard"
            }
          }
        },
        "description": "(empty)"
      },
      "updateServiceAccountResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "serviceaccount": {
                  "$ref": "#/components/schemas/ServiceAccountProfileDTO"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "updateTeamLBACRulesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "format": "int64",
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rules": {
                  "items": {
                    "$ref": "#/components/schemas/TeamLBACRule"
                  },
                  "type": "array"
                },
                "uid": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "(empty)"
      },
      "userResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserProfileDTO"
            }
          }
        },
        "description": "(empty)"
      },
      "viewPublicDashboardResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DashboardFullWithMeta"
            }
          }
        },
        "description": "(empty)"
      }
    },
    "schemas": {
      "Ack": {
        "type": "object"
      },
      "ActiveSyncStatusDTO": {
        "description": "ActiveSyncStatusDTO holds the information for LDAP background Sync",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "nextSync": {
            "format": "date-time",
            "type": "string"
          },
          "prevSync": {
            "$ref": "#/components/schemas/SyncResult"
          },
          "schedule": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActiveUserStats": {
        "properties": {
          "active_admins_and_editors": {
            "format": "int64",
            "type": "integer"
          },
          "active_anonymous_devices": {
            "format": "int64",
            "type": "integer"
          },
          "active_users": {
            "format": "int64",
            "type": "integer"
          },
          "active_viewers": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AddAPIKeyCommand": {
        "properties": {
          "name": {
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          },
          "secondsToLive": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AddDataSourceCommand": {
        "description": "Also acts as api DTO",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/DsAccess"
          },
          "basicAuth": {
            "type": "boolean"
          },
          "basicAuthUser": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "jsonData": {
            "$ref": "#/components/schemas/Json"
          },
          "name": {
            "type": "string"
          },
          "secureJsonData": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "withCredentials": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AddInviteForm": {
        "properties": {
          "loginOrEmail": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          },
          "sendEmail": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AddOrgUserCommand": {
        "properties": {
          "loginOrEmail": {
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddServiceAccountTokenCommand": {
        "properties": {
          "name": {
            "type": "string"
          },
          "secondsToLive": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AddTeamMemberCommand": {
        "properties": {
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AddTeamRoleCommand": {
        "properties": {
          "roleUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddUserRoleCommand": {
        "properties": {
          "global": {
            "type": "boolean"
          },
          "roleUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Address": {
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdminCreateUserForm": {
        "properties": {
          "email": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        },
        "type": "object"
      },
      "AdminCreateUserResponse": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdminStats": {
        "properties": {
          "activeAdmins": {
            "format": "int64",
            "type": "integer"
          },
          "activeDevices": {
            "format": "int64",
            "type": "integer"
          },
          "activeEditors": {
            "format": "int64",
            "type": "integer"
          },
          "activeSessions": {
            "format": "int64",
            "type": "integer"
          },
          "activeUsers": {
            "format": "int64",
            "type": "integer"
          },
          "activeViewers": {
            "format": "int64",
            "type": "integer"
          },
          "admins": {
            "format": "int64",
            "type": "integer"
          },
          "alerts": {
            "format": "int64",
            "type": "integer"
          },
          "dailyActiveAdmins": {
            "format": "int64",
            "type": "integer"
          },
          "dailyActiveEditors": {
            "format": "int64",
            "type": "integer"
          },
          "dailyActiveSessions": {
            "format": "int64",
            "type": "integer"
          },
          "dailyActiveUsers": {
            "format": "int64",
            "type": "integer"
          },
          "dailyActiveViewers": {
            "format": "int64",
            "type": "integer"
          },
          "dashboards": {
            "format": "int64",
            "type": "integer"
          },
          "datasources": {
            "format": "int64",
            "type": "integer"
          },
          "editors": {
            "format": "int64",
            "type": "integer"
          },
          "monthlyActiveUsers": {
            "format": "int64",
            "type": "integer"
          },
          "orgs": {
            "format": "int64",
            "type": "integer"
          },
          "playlists": {
            "format": "int64",
            "type": "integer"
          },
          "snapshots": {
            "format": "int64",
            "type": "integer"
          },
          "stars": {
            "format": "int64",
            "type": "integer"
          },
          "tags": {
            "format": "int64",
            "type": "integer"
          },
          "users": {
            "format": "int64",
            "type": "integer"
          },
          "viewers": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AdminUpdateUserPasswordForm": {
        "properties": {
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        },
        "type": "object"
      },
      "AdminUpdateUserPermissionsForm": {
        "properties": {
          "isGrafanaAdmin": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Alert": {
        "properties": {
          "activeAt": {
            "format": "date-time",
            "type": "string"
          },
          "annotations": {
            "$ref": "#/components/schemas/Labels"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "state": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "labels",
          "annotations",
          "state",
          "value"
        ],
        "title": "Alert has info for an alert.",
        "type": "object"
      },
      "AlertDiscovery": {
        "properties": {
          "alerts": {
            "items": {
              "$ref": "#/components/schemas/Alert"
            },
            "type": "array"
          }
        },
        "required": [
          "alerts"
        ],
        "title": "AlertDiscovery has info for all active alerts.",
        "type": "object"
      },
      "AlertInstancesResponse": {
        "properties": {
          "instances": {
            "description": "Instances is an array of arrow encoded dataframes\neach frame has a single row, and a column for each instance (alert identified by unique labels) with a boolean value (firing/not firing)",
            "items": {
              "items": {
                "format": "uint8",
                "type": "integer"
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AlertManager": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "title": "AlertManager models a configured Alert Manager.",
        "type": "object"
      },
      "AlertManagerNotReady": {
        "type": "object"
      },
      "AlertManagersResult": {
        "properties": {
          "activeAlertManagers": {
            "items": {
              "$ref": "#/components/schemas/AlertManager"
            },
            "type": "array"
          },
          "droppedAlertManagers": {
            "items": {
              "$ref": "#/components/schemas/AlertManager"
            },
            "type": "array"
          }
        },
        "title": "AlertManagersResult contains the result from querying the alertmanagers endpoint.",
        "type": "object"
      },
      "AlertQuery": {
        "properties": {
          "datasourceUid": {
            "description": "Grafana data source unique identifier; it should be '__expr__' for a Server Side Expression operation.",
            "type": "string"
          },
          "model": {
            "description": "JSON is the raw JSON query and includes the above properties as well as custom properties.",
            "type": "object"
          },
          "queryType": {
            "description": "QueryType is an optional identifier for the type of query.\nIt can be used to distinguish different types of queries.",
            "type": "string"
          },
          "refId": {
            "description": "RefID is the unique identifier of the query, set by the frontend call.",
            "type": "string"
          },
          "relativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange"
          }
        },
        "title": "AlertQuery represents a single query associated with an alert definition.",
        "type": "object"
      },
      "AlertQueryExport": {
        "properties": {
          "datasourceUid": {
            "type": "string"
          },
          "model": {
            "additionalProperties": {},
            "type": "object"
          },
          "queryType": {
            "type": "string"
          },
          "refId": {
            "type": "string"
          },
          "relativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRangeExport"
          }
        },
        "title": "AlertQueryExport is the provisioned export of models.AlertQuery.",
        "type": "object"
      },
      "AlertResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AlertDiscovery"
          },
          "error": {
            "type": "string"
          },
          "errorType": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "AlertRuleEditorSettings": {
        "properties": {
          "simplified_query_and_expressions_section": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AlertRuleExport": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "condition": {
            "type": "string"
          },
          "dashboardUid": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertQueryExport"
            },
            "type": "array"
          },
          "execErrState": {
            "enum": [
              "OK",
              "Alerting",
              "Error"
            ],
            "type": "string"
          },
          "for": {
            "$ref": "#/components/schemas/Duration"
          },
          "isPaused": {
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "noDataState": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ],
            "type": "string"
          },
          "notification_settings": {
            "$ref": "#/components/schemas/AlertRuleNotificationSettingsExport"
          },
          "panelId": {
            "format": "int64",
            "type": "integer"
          },
          "record": {
            "$ref": "#/components/schemas/AlertRuleRecordExport"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "title": "AlertRuleExport is the provisioned file export of models.AlertRule.",
        "type": "object"
      },
      "AlertRuleGroup": {
        "properties": {
          "folderUid": {
            "type": "string"
          },
          "interval": {
            "format": "int64",
            "type": "integer"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/ProvisionedAlertRule"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertRuleGroupExport": {
        "properties": {
          "folder": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/AlertRuleExport"
            },
            "type": "array"
          }
        },
        "title": "AlertRuleGroupExport is the provisioned file export of AlertRuleGroupV1.",
        "type": "object"
      },
      "AlertRuleGroupMetadata": {
        "properties": {
          "interval": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AlertRuleMetadata": {
        "properties": {
          "editor_settings": {
            "$ref": "#/components/schemas/AlertRuleEditorSettings"
          }
        },
        "type": "object"
      },
      "AlertRuleNotificationSettings": {
        "properties": {
          "group_by": {
            "default": [
              "alertname",
              "grafana_folder"
            ],
            "description": "Override the labels by which incoming alerts are grouped together. For example, multiple alerts coming in for\ncluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels\nuse the special value '...' as the sole label name.\nThis effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what\nyou want, unless you have a very low alert volume or your upstream notification system performs its own grouping.\nMust include 'alertname' and 'grafana_folder' if not using '...'.",
            "example": [
              "alertname",
              "grafana_folder",
              "cluster"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_interval": {
            "description": "Override how long to wait before sending a notification about new alerts that are added to a group of alerts for\nwhich an initial notification has already been sent. (Usually ~5m or more.)",
            "example": "5m",
            "type": "string"
          },
          "group_wait": {
            "description": "Override how long to initially wait to send a notification for a group of alerts. Allows to wait for an\ninhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)",
            "example": "30s",
            "type": "string"
          },
          "mute_time_intervals": {
            "description": "Override the times when notifications should be muted. These must match the name of a mute time interval defined\nin the alertmanager configuration mute_time_intervals section. When muted it will not send any notifications, but\notherwise acts normally.",
            "example": [
              "maintenance"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "receiver": {
            "description": "Name of the receiver to send notifications to.",
            "example": "grafana-default-email",
            "type": "string"
          },
          "repeat_interval": {
            "description": "Override how long to wait before sending a notification again if it has already been sent successfully for an\nalert. (Usually ~3h or more).\nNote that this parameter is implicitly bound by Alertmanager's `--data.retention` configuration flag.\nNotifications will be resent after either repeat_interval or the data retention period have passed, whichever\noccurs first. `repeat_interval` should not be less than `group_interval`.",
            "example": "4h",
            "type": "string"
          }
        },
        "required": [
          "receiver"
        ],
        "type": "object"
      },
      "AlertRuleNotificationSettingsExport": {
        "properties": {
          "group_by": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_interval": {
            "type": "string"
          },
          "group_wait": {
            "type": "string"
          },
          "mute_time_intervals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "receiver": {
            "type": "string"
          },
          "repeat_interval": {
            "type": "string"
          }
        },
        "title": "AlertRuleNotificationSettingsExport is the provisioned export of models.NotificationSettings.",
        "type": "object"
      },
      "AlertRuleRecordExport": {
        "properties": {
          "from": {
            "type": "string"
          },
          "metric": {
            "type": "string"
          }
        },
        "title": "Record is the provisioned export of models.Record.",
        "type": "object"
      },
      "AlertingFileExport": {
        "properties": {
          "apiVersion": {
            "format": "int64",
            "type": "integer"
          },
          "contactPoints": {
            "items": {
              "$ref": "#/components/schemas/ContactPointExport"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/AlertRuleGroupExport"
            },
            "type": "array"
          },
          "muteTimes": {
            "items": {
              "$ref": "#/components/schemas/MuteTimeIntervalExport"
            },
            "type": "array"
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/NotificationPolicyExport"
            },
            "type": "array"
          }
        },
        "title": "AlertingFileExport is the full provisioned file export.",
        "type": "object"
      },
      "AlertingRule": {
        "description": "adapted from cortex",
        "properties": {
          "activeAt": {
            "format": "date-time",
            "type": "string"
          },
          "alerts": {
            "items": {
              "$ref": "#/components/schemas/Alert"
            },
            "type": "array"
          },
          "annotations": {
            "$ref": "#/components/schemas/Labels"
          },
          "duration": {
            "format": "double",
            "type": "number"
          },
          "evaluationTime": {
            "format": "double",
            "type": "number"
          },
          "health": {
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "lastError": {
            "type": "string"
          },
          "lastEvaluation": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "state": {
            "description": "State can be \"pending\", \"firing\", \"inactive\".",
            "type": "string"
          },
          "totals": {
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            },
            "type": "object"
          },
          "totalsFiltered": {
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "query",
          "health",
          "type",
          "state",
          "annotations",
          "activeAt"
        ],
        "type": "object"
      },
      "AlertingStatus": {
        "properties": {
          "alertmanagersChoice": {
            "enum": [
              "all",
              "internal",
              "external"
            ],
            "type": "string"
          },
          "numExternalAlertmanagers": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Annotation": {
        "properties": {
          "alertId": {
            "format": "int64",
            "type": "integer"
          },
          "alertName": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "created": {
            "format": "int64",
            "type": "integer"
          },
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "dashboardUID": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Json"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "login": {
            "type": "string"
          },
          "newState": {
            "type": "string"
          },
          "panelId": {
            "format": "int64",
            "type": "integer"
          },
          "prevState": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          },
          "timeEnd": {
            "format": "int64",
            "type": "integer"
          },
          "updated": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AnnotationActions": {
        "properties": {
          "canAdd": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AnnotationEvent": {
        "properties": {
          "color": {
            "type": "string"
          },
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isRegion": {
            "type": "boolean"
          },
          "panelId": {
            "format": "int64",
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/AnnotationQuery"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          },
          "timeEnd": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AnnotationPanelFilter": {
        "properties": {
          "exclude": {
            "description": "Should the specified panels be included or excluded",
            "type": "boolean"
          },
          "ids": {
            "description": "Panel IDs that should be included or excluded",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "title": "AnnotationPanelFilter defines model for AnnotationPanelFilter.",
        "type": "object"
      },
      "AnnotationPermission": {
        "properties": {
          "dashboard": {
            "$ref": "#/components/schemas/AnnotationActions"
          },
          "organization": {
            "$ref": "#/components/schemas/AnnotationActions"
          }
        },
        "type": "object"
      },
      "AnnotationQuery": {
        "description": "TODO docs\nFROM: AnnotationQuery in grafana-data/src/types/annotations.ts",
        "properties": {
          "builtIn": {
            "description": "Set to 1 for the standard annotation query all dashboards have by default.",
            "format": "float",
            "type": "number"
          },
          "datasource": {
            "$ref": "#/components/schemas/DataSourceRef"
          },
          "enable": {
            "description": "When enabled the annotation query is issued with every dashboard refresh",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/AnnotationPanelFilter"
          },
          "hide": {
            "description": "Annotation queries can be toggled on or off at the top of the dashboard.\nWhen hide is true, the toggle is not shown in the dashboard.",
            "type": "boolean"
          },
          "iconColor": {
            "description": "Color to use for the annotation event markers",
            "type": "string"
          },
          "name": {
            "description": "Name of annotation.",
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/AnnotationTarget"
          },
          "type": {
            "description": "TODO -- this should not exist here, it is based on the --grafana-- datasource",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnnotationTarget": {
        "description": "TODO: this should be a regular DataQuery that depends on the selected dashboard\nthese match the properties of the \"grafana\" datasouce that is default in most dashboards",
        "properties": {
          "limit": {
            "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change",
            "format": "int64",
            "type": "integer"
          },
          "matchAny": {
            "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change",
            "type": "boolean"
          },
          "tags": {
            "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKeyDTO": {
        "properties": {
          "accessControl": {
            "$ref": "#/components/schemas/Metadata"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastUsedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiRuleNode": {
        "properties": {
          "alert": {
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expr": {
            "type": "string"
          },
          "for": {
            "type": "string"
          },
          "keep_firing_for": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "record": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Assignments": {
        "properties": {
          "builtInRoles": {
            "type": "boolean"
          },
          "serviceAccounts": {
            "type": "boolean"
          },
          "teams": {
            "type": "boolean"
          },
          "users": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AttributeTypeAndValue": {
        "description": "AttributeTypeAndValue mirrors the ASN.1 structure of the same name in\nRFC 5280, Section 4.1.2.4.",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ObjectIdentifier"
          },
          "Value": {}
        },
        "type": "object"
      },
      "Authorization": {
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/Secret"
          },
          "credentials_file": {
            "type": "string"
          },
          "credentials_ref": {
            "description": "CredentialsRef is the name of the secret within the secret manager to use as credentials.",
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "title": "Authorization contains HTTP authorization credentials.",
        "type": "object"
      },
      "BacktestConfig": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "condition": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertQuery"
            },
            "type": "array"
          },
          "for": {
            "$ref": "#/components/schemas/Duration"
          },
          "from": {
            "format": "date-time",
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "no_data_state": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ],
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "to": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BacktestResult": {
        "$ref": "#/components/schemas/Frame"
      },
      "BasicAuth": {
        "properties": {
          "password": {
            "$ref": "#/components/schemas/Secret"
          },
          "password_file": {
            "type": "string"
          },
          "password_ref": {
            "description": "PasswordRef is the name of the secret within the secret manager to use as the password.",
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "username_file": {
            "type": "string"
          },
          "username_ref": {
            "description": "UsernameRef is the name of the secret within the secret manager to use as the username.",
            "type": "string"
          }
        },
        "title": "BasicAuth contains basic HTTP authentication credentials.",
        "type": "object"
      },
      "CacheConfig": {
        "description": "Config defines the internal representation of a cache configuration, including fields not set by the API caller",
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "dataSourceID": {
            "description": "Fields that can be set by the API caller - read/write",
            "format": "int64",
            "type": "integer"
          },
          "dataSourceUID": {
            "type": "string"
          },
          "defaultTTLMs": {
            "description": "These are returned by the HTTP API, but are managed internally - read-only\nNote: 'created' and 'updated' are special properties managed automatically by xorm, but we are setting them manually",
            "format": "int64",
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "ttlQueriesMs": {
            "description": "TTL MS, or \"time to live\", is how long a cached item will stay in the cache before it is removed (in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "ttlResourcesMs": {
            "format": "int64",
            "type": "integer"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "useDefaultTTL": {
            "description": "If UseDefaultTTL is enabled, then the TTLQueriesMS and TTLResourcesMS in this object is always sent as the default TTL located in grafana.ini",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CacheConfigResponse": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "dataSourceID": {
            "description": "Fields that can be set by the API caller - read/write",
            "format": "int64",
            "type": "integer"
          },
          "dataSourceUID": {
            "type": "string"
          },
          "defaultTTLMs": {
            "description": "These are returned by the HTTP API, but are managed internally - read-only\nNote: 'created' and 'updated' are special properties managed automatically by xorm, but we are setting them manually",
            "format": "int64",
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "ttlQueriesMs": {
            "description": "TTL MS, or \"time to live\", is how long a cached item will stay in the cache before it is removed (in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "ttlResourcesMs": {
            "format": "int64",
            "type": "integer"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "useDefaultTTL": {
            "description": "If UseDefaultTTL is enabled, then the TTLQueriesMS and TTLResourcesMS in this object is always sent as the default TTL located in grafana.ini",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CacheConfigSetter": {
        "description": "ConfigSetter defines the cache parameters that users can configure per datasource\nThis is only intended to be consumed by the SetCache HTTP Handler",
        "properties": {
          "dataSourceID": {
            "format": "int64",
            "type": "integer"
          },
          "dataSourceUID": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "ttlQueriesMs": {
            "description": "TTL MS, or \"time to live\", is how long a cached item will stay in the cache before it is removed (in milliseconds)",
            "format": "int64",
            "type": "integer"
          },
          "ttlResourcesMs": {
            "format": "int64",
            "type": "integer"
          },
          "useDefaultTTL": {
            "description": "If UseDefaultTTL is enabled, then the TTLQueriesMS and TTLResourcesMS in this object is always sent as the default TTL located in grafana.ini",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CalculateDiffTarget": {
        "properties": {
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "unsavedDashboard": {
            "$ref": "#/components/schemas/Json"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Certificate": {
        "properties": {
          "AuthorityKeyId": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "BasicConstraintsValid": {
            "description": "BasicConstraintsValid indicates whether IsCA, MaxPathLen,\nand MaxPathLenZero are valid.",
            "type": "boolean"
          },
          "CRLDistributionPoints": {
            "description": "CRL Distribution Points",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "DNSNames": {
            "description": "Subject Alternate Name values. (Note that these values may not be valid\nif invalid values were contained within a parsed certificate. For\nexample, an element of DNSNames may not be a valid DNS domain name.)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "EmailAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ExcludedDNSDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ExcludedEmailAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ExcludedIPRanges": {
            "items": {
              "$ref": "#/components/schemas/IPNet"
            },
            "type": "array"
          },
          "ExcludedURIDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ExtKeyUsage": {
            "items": {
              "$ref": "#/components/schemas/ExtKeyUsage"
            },
            "type": "array"
          },
          "Extensions": {
            "description": "Extensions contains raw X.509 extensions. When parsing certificates,\nthis can be used to extract non-critical extensions that are not\nparsed by this package. When marshaling certificates, the Extensions\nfield is ignored, see ExtraExtensions.",
            "items": {
              "$ref": "#/components/schemas/Extension"
            },
            "type": "array"
          },
          "ExtraExtensions": {
            "description": "ExtraExtensions contains extensions to be copied, raw, into any\nmarshaled certificates. Values override any extensions that would\notherwise be produced based on the other fields. The ExtraExtensions\nfield is not populated when parsing certificates, see Extensions.",
            "items": {
              "$ref": "#/components/schemas/Extension"
            },
            "type": "array"
          },
          "IPAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "IsCA": {
            "type": "boolean"
          },
          "Issuer": {
            "$ref": "#/components/schemas/Name"
          },
          "IssuingCertificateURL": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "KeyUsage": {
            "$ref": "#/components/schemas/KeyUsage"
          },
          "MaxPathLen": {
            "description": "MaxPathLen and MaxPathLenZero indicate the presence and\nvalue of the BasicConstraints' \"pathLenConstraint\".\n\nWhen parsing a certificate, a positive non-zero MaxPathLen\nmeans that the field was specified, -1 means it was unset,\nand MaxPathLenZero being true mean that the field was\nexplicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false\nshould be treated equivalent to -1 (unset).\n\nWhen generating a certificate, an unset pathLenConstraint\ncan be requested with either MaxPathLen == -1 or using the\nzero value for both MaxPathLen and MaxPathLenZero.",
            "format": "int64",
            "type": "integer"
          },
          "MaxPathLenZero": {
            "description": "MaxPathLenZero indicates that BasicConstraintsValid==true\nand MaxPathLen==0 should be interpreted as an actual\nmaximum path length of zero. Otherwise, that combination is\ninterpreted as MaxPathLen not being set.",
            "type": "boolean"
          },
          "NotBefore": {
            "format": "date-time",
            "type": "string"
          },
          "OCSPServer": {
            "description": "RFC 5280, 4.2.2.1 (Authority Information Access)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "PermittedDNSDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "PermittedDNSDomainsCritical": {
            "description": "Name constraints",
            "type": "boolean"
          },
          "PermittedEmailAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "PermittedIPRanges": {
            "items": {
              "$ref": "#/components/schemas/IPNet"
            },
            "type": "array"
          },
          "PermittedURIDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Policies": {
            "description": "Policies contains all policy identifiers included in the certificate.\nIn Go 1.22, encoding/gob cannot handle and ignores this field.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "PolicyIdentifiers": {
            "description": "PolicyIdentifiers contains asn1.ObjectIdentifiers, the components\nof which are limited to int32. If a certificate contains a policy which\ncannot be represented by asn1.ObjectIdentifier, it will not be included in\nPolicyIdentifiers, but will be present in Policies, which contains all parsed\npolicy OIDs.",
            "items": {
              "$ref": "#/components/schemas/ObjectIdentifier"
            },
            "type": "array"
          },
          "PublicKey": {},
          "PublicKeyAlgorithm": {
            "$ref": "#/components/schemas/PublicKeyAlgorithm"
          },
          "Raw": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "RawIssuer": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "RawSubject": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "RawSubjectPublicKeyInfo": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "RawTBSCertificate": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "SerialNumber": {
            "type": "string"
          },
          "Signature": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "SignatureAlgorithm": {
            "$ref": "#/components/schemas/SignatureAlgorithm"
          },
          "Subject": {
            "$ref": "#/components/schemas/Name"
          },
          "SubjectKeyId": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "URIs": {
            "items": {
              "$ref": "#/components/schemas/URL"
            },
            "type": "array"
          },
          "UnhandledCriticalExtensions": {
            "description": "UnhandledCriticalExtensions contains a list of extension IDs that\nwere not (fully) processed when parsing. Verify will fail if this\nslice is non-empty, unless verification is delegated to an OS\nlibrary which understands all the critical extensions.\n\nUsers can access these extensions using Extensions and can remove\nelements from this slice if they believe that they have been\nhandled.",
            "items": {
              "$ref": "#/components/schemas/ObjectIdentifier"
            },
            "type": "array"
          },
          "UnknownExtKeyUsage": {
            "items": {
              "$ref": "#/components/schemas/ObjectIdentifier"
            },
            "type": "array"
          },
          "Version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "A Certificate represents an X.509 certificate.",
        "type": "object"
      },
      "ChangeUserPasswordCommand": {
        "properties": {
          "newPassword": {
            "$ref": "#/components/schemas/Password"
          },
          "oldPassword": {
            "$ref": "#/components/schemas/Password"
          }
        },
        "type": "object"
      },
      "CloudMigrationRunListDTO": {
        "properties": {
          "runs": {
            "items": {
              "$ref": "#/components/schemas/MigrateDataResponseListDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CloudMigrationSessionListResponseDTO": {
        "properties": {
          "sessions": {
            "items": {
              "$ref": "#/components/schemas/CloudMigrationSessionResponseDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CloudMigrationSessionRequestDTO": {
        "properties": {
          "authToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudMigrationSessionResponseDTO": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfFloat64": {
        "description": "ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf\nto null.",
        "format": "double",
        "type": "number"
      },
      "Config": {
        "properties": {
          "global": {
            "$ref": "#/components/schemas/GlobalConfig"
          },
          "inhibit_rules": {
            "items": {
              "$ref": "#/components/schemas/InhibitRule"
            },
            "type": "array"
          },
          "mute_time_intervals": {
            "description": "MuteTimeIntervals is deprecated and will be removed before Alertmanager 1.0.",
            "items": {
              "$ref": "#/components/schemas/MuteTimeInterval"
            },
            "type": "array"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          },
          "templates": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            },
            "type": "array"
          }
        },
        "title": "Config is the top-level configuration for Alertmanager's config files.",
        "type": "object"
      },
      "ContactPointExport": {
        "properties": {
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "receivers": {
            "items": {
              "$ref": "#/components/schemas/ReceiverExport"
            },
            "type": "array"
          }
        },
        "title": "ContactPointExport is the provisioned file export of alerting.ContactPointV1.",
        "type": "object"
      },
      "ContactPoints": {
        "items": {
          "$ref": "#/components/schemas/EmbeddedContactPoint"
        },
        "type": "array"
      },
      "CookiePreferences": {
        "properties": {
          "analytics": {
            "additionalProperties": {},
            "type": "object"
          },
          "functional": {
            "additionalProperties": {},
            "type": "object"
          },
          "performance": {
            "additionalProperties": {},
            "type": "object"
          }
        },
        "title": "CookiePreferences defines model for CookiePreferences.",
        "type": "object"
      },
      "CookieType": {
        "type": "string"
      },
      "Correlation": {
        "description": "Correlation is the model for correlations definitions",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/CorrelationConfig"
          },
          "description": {
            "description": "Description of the correlation",
            "example": "Logs to Traces",
            "type": "string"
          },
          "label": {
            "description": "Label identifying the correlation",
            "example": "My Label",
            "type": "string"
          },
          "orgId": {
            "description": "OrgID of the data source the correlation originates from",
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "provisioned": {
            "description": "Provisioned True if the correlation was created during provisioning",
            "type": "boolean"
          },
          "sourceUID": {
            "description": "UID of the data source the correlation originates from",
            "example": "d0oxYRg4z",
            "type": "string"
          },
          "targetUID": {
            "description": "UID of the data source the correlation points to",
            "example": "PE1C5CBDA0504A6A3",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CorrelationType"
          },
          "uid": {
            "description": "Unique identifier of the correlation",
            "example": "50xhMlg9k",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CorrelationConfig": {
        "properties": {
          "field": {
            "description": "Field used to attach the correlation link",
            "example": "message",
            "type": "string"
          },
          "target": {
            "additionalProperties": {},
            "description": "Target data query",
            "example": {
              "prop1": "value1",
              "prop2": "value"
            },
            "type": "object"
          },
          "transformations": {
            "$ref": "#/components/schemas/Transformations"
          },
          "type": {
            "$ref": "#/components/schemas/CorrelationType"
          }
        },
        "required": [
          "field",
          "target"
        ],
        "type": "object"
      },
      "CorrelationConfigUpdateDTO": {
        "properties": {
          "field": {
            "description": "Field used to attach the correlation link",
            "example": "message",
            "type": "string"
          },
          "target": {
            "additionalProperties": {},
            "description": "Target data query",
            "example": {
              "prop1": "value1",
              "prop2": "value"
            },
            "type": "object"
          },
          "transformations": {
            "description": "Source data transformations",
            "example": [
              {
                "type": "logfmt"
              },
              {
                "expression": "(Superman|Batman)",
                "type": "regex",
                "variable": "name"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Transformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CorrelationType": {
        "description": "the type of correlation, either query for containing query information, or external for containing an external URL\n+enum",
        "type": "string"
      },
      "CounterResetHint": {
        "description": "or alternatively that we are dealing with a gauge histogram, where counter resets do not apply.",
        "format": "uint8",
        "title": "CounterResetHint contains the known information about a counter reset,",
        "type": "integer"
      },
      "CreateAccessTokenResponseDTO": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateCorrelationCommand": {
        "description": "CreateCorrelationCommand is the command for creating a correlation",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/CorrelationConfig"
          },
          "description": {
            "description": "Optional description of the correlation",
            "example": "Logs to Traces",
            "type": "string"
          },
          "label": {
            "description": "Optional label identifying the correlation",
            "example": "My label",
            "type": "string"
          },
          "provisioned": {
            "description": "True if correlation was created with provisioning. This makes it read-only.",
            "type": "boolean"
          },
          "targetUID": {
            "description": "Target data source UID to which the correlation is created. required if type = query",
            "example": "PE1C5CBDA0504A6A3",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CorrelationType"
          }
        },
        "type": "object"
      },
      "CreateCorrelationResponseBody": {
        "description": "CreateCorrelationResponse is the response struct for CreateCorrelationCommand",
        "properties": {
          "message": {
            "example": "Correlation created",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/Correlation"
          }
        },
        "type": "object"
      },
      "CreateDashboardSnapshotCommand": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
            "type": "string"
          },
          "dashboard": {
            "$ref": "#/components/schemas/Unstructured"
          },
          "deleteKey": {
            "description": "Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.",
            "type": "string"
          },
          "expires": {
            "default": 0,
            "description": "When the snapshot should expire in seconds in seconds. Default is never to expire.",
            "format": "int64",
            "type": "integer"
          },
          "external": {
            "default": false,
            "description": "these are passed when storing an external snapshot ref\nSave the snapshot on an external server rather than locally.",
            "type": "boolean"
          },
          "key": {
            "description": "Define the unique key. Required if `external` is `true`.",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
            "type": "string"
          },
          "name": {
            "description": "Snapshot name",
            "type": "string"
          }
        },
        "required": [
          "dashboard"
        ],
        "type": "object"
      },
      "CreateFolderCommand": {
        "description": "CreateFolderCommand captures the information required by the folder service\nto create a folder.",
        "properties": {
          "description": {
            "type": "string"
          },
          "parentUid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateLibraryElementCommand": {
        "description": "CreateLibraryElementCommand is the command for adding a LibraryElement",
        "properties": {
          "folderId": {
            "description": "ID of the folder where the library element is stored.\n\nDeprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "description": "UID of the folder where the library element is stored.",
            "type": "string"
          },
          "kind": {
            "description": "Kind of element to create, Use 1 for library panels or 2 for c.\nDescription:\n1 - library panels\n2 - library variables",
            "enum": [
              1,
              2
            ],
            "format": "int64",
            "type": "integer"
          },
          "model": {
            "description": "The JSON model for the library element.",
            "type": "object"
          },
          "name": {
            "description": "Name of the library element.",
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateOrUpdateReport": {
        "properties": {
          "dashboards": {
            "items": {
              "$ref": "#/components/schemas/ReportDashboard"
            },
            "type": "array"
          },
          "enableCsv": {
            "type": "boolean"
          },
          "enableDashboardUrl": {
            "type": "boolean"
          },
          "formats": {
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "type": "array"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/ReportOptions"
          },
          "recipients": {
            "type": "string"
          },
          "replyTo": {
            "type": "string"
          },
          "scaleFactor": {
            "format": "int64",
            "type": "integer"
          },
          "schedule": {
            "$ref": "#/components/schemas/ReportSchedule"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          }
        },
        "type": "object"
      },
      "CreateOrgCommand": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreatePlaylistCommand": {
        "properties": {
          "interval": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PlaylistItem"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateQueryInQueryHistoryCommand": {
        "description": "CreateQueryInQueryHistoryCommand is the command for adding query history",
        "properties": {
          "datasourceUid": {
            "description": "UID of the data source for which are queries stored.",
            "example": "PE1C5CBDA0504A6A3",
            "type": "string"
          },
          "queries": {
            "$ref": "#/components/schemas/Json"
          }
        },
        "required": [
          "queries"
        ],
        "type": "object"
      },
      "CreateRoleForm": {
        "properties": {
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "group": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateServiceAccountForm": {
        "properties": {
          "isDisabled": {
            "example": false,
            "type": "boolean"
          },
          "name": {
            "example": "grafana",
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "example": "Admin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateSnapshotResponseDTO": {
        "properties": {
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateTeamCommand": {
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardACLInfoDTO": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "folderId": {
            "description": "Deprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "type": "string"
          },
          "inherited": {
            "type": "boolean"
          },
          "isFolder": {
            "type": "boolean"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionType"
          },
          "permissionName": {
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "teamAvatarUrl": {
            "type": "string"
          },
          "teamEmail": {
            "type": "string"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          },
          "teamUid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "userAvatarUrl": {
            "type": "string"
          },
          "userEmail": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "userLogin": {
            "type": "string"
          },
          "userUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardACLUpdateItem": {
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionType"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DashboardCreateCommand": {
        "description": "These are the values expected to be sent from an end user\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
            "type": "string"
          },
          "dashboard": {
            "$ref": "#/components/schemas/Unstructured"
          },
          "expires": {
            "default": 0,
            "description": "When the snapshot should expire in seconds in seconds. Default is never to expire.",
            "format": "int64",
            "type": "integer"
          },
          "external": {
            "default": false,
            "description": "these are passed when storing an external snapshot ref\nSave the snapshot on an external server rather than locally.",
            "type": "boolean"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
            "type": "string"
          },
          "name": {
            "description": "Snapshot name",
            "type": "string"
          }
        },
        "required": [
          "dashboard"
        ],
        "type": "object"
      },
      "DashboardFullWithMeta": {
        "properties": {
          "dashboard": {
            "$ref": "#/components/schemas/Json"
          },
          "meta": {
            "$ref": "#/components/schemas/DashboardMeta"
          }
        },
        "type": "object"
      },
      "DashboardMeta": {
        "properties": {
          "annotationsPermissions": {
            "$ref": "#/components/schemas/AnnotationPermission"
          },
          "canAdmin": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canSave": {
            "type": "boolean"
          },
          "canStar": {
            "type": "boolean"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "folderId": {
            "description": "Deprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderTitle": {
            "type": "string"
          },
          "folderUid": {
            "type": "string"
          },
          "folderUrl": {
            "type": "string"
          },
          "hasAcl": {
            "type": "boolean"
          },
          "isFolder": {
            "type": "boolean"
          },
          "isSnapshot": {
            "type": "boolean"
          },
          "isStarred": {
            "type": "boolean"
          },
          "provisioned": {
            "type": "boolean"
          },
          "provisionedExternalId": {
            "type": "string"
          },
          "publicDashboardEnabled": {
            "type": "boolean"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DashboardRedirect": {
        "properties": {
          "redirectUri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardSnapshotDTO": {
        "description": "DashboardSnapshotDTO without dashboard map",
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "externalUrl": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardTagCloudItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "term": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardVersionMeta": {
        "description": "DashboardVersionMeta extends the DashboardVersionDTO with the names\nassociated with the UserIds, overriding the field with the same name from\nthe DashboardVersionDTO model.",
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/Json"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "parentVersion": {
            "format": "int64",
            "type": "integer"
          },
          "restoredFrom": {
            "format": "int64",
            "type": "integer"
          },
          "uid": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DataLink": {
        "description": "DataLink define what",
        "properties": {
          "internal": {
            "$ref": "#/components/schemas/InternalDataLink"
          },
          "targetBlank": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataResponse": {
        "description": "A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.\nThe Error property is used to allow for partial success responses from the containing QueryDataResponse.",
        "properties": {
          "Error": {
            "description": "Error is a property to be set if the corresponding DataQuery has an error.",
            "type": "string"
          },
          "ErrorSource": {
            "$ref": "#/components/schemas/Source"
          },
          "Frames": {
            "$ref": "#/components/schemas/Frames"
          },
          "Status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "title": "DataResponse contains the results from a DataQuery.",
        "type": "object"
      },
      "DataSource": {
        "properties": {
          "access": {
            "$ref": "#/components/schemas/DsAccess"
          },
          "accessControl": {
            "$ref": "#/components/schemas/Metadata"
          },
          "basicAuth": {
            "type": "boolean"
          },
          "basicAuthUser": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "jsonData": {
            "$ref": "#/components/schemas/Json"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": {
            "type": "boolean"
          },
          "secureJsonFields": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "typeLogoUrl": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          },
          "withCredentials": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DataSourceList": {
        "items": {
          "$ref": "#/components/schemas/DataSourceListItemDTO"
        },
        "type": "array"
      },
      "DataSourceListItemDTO": {
        "properties": {
          "access": {
            "$ref": "#/components/schemas/DsAccess"
          },
          "basicAuth": {
            "type": "boolean"
          },
          "database": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "jsonData": {
            "$ref": "#/components/schemas/Json"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "typeLogoUrl": {
            "type": "string"
          },
          "typeName": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataSourceRef": {
        "description": "Ref to a DataSource instance",
        "properties": {
          "type": {
            "description": "The plugin type-id",
            "type": "string"
          },
          "uid": {
            "description": "Specific datasource instance",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataTopic": {
        "description": "nolint:revive",
        "title": "DataTopic is used to identify which topic the frame should be assigned to.",
        "type": "string"
      },
      "DeleteCorrelationResponseBody": {
        "properties": {
          "message": {
            "example": "Correlation deleted",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteTokenCommand": {
        "properties": {
          "instance": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DescendantCounts": {
        "additionalProperties": {
          "format": "int64",
          "type": "integer"
        },
        "type": "object"
      },
      "Description": {
        "properties": {
          "assignments": {
            "$ref": "#/components/schemas/Assignments"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeviceSearchHitDTO": {
        "properties": {
          "clientIp": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "lastSeenAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiscordConfig": {
        "properties": {
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "webhook_url": {
            "$ref": "#/components/schemas/SecretURL"
          },
          "webhook_url_file": {
            "type": "string"
          }
        },
        "title": "DiscordConfig configures notifications via Discord.",
        "type": "object"
      },
      "DiscoveryBase": {
        "properties": {
          "error": {
            "type": "string"
          },
          "errorType": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "DsAccess": {
        "type": "string"
      },
      "DsPermissionType": {
        "description": "Datasource permission\nDescription:\n`0` - No Access\n`1` - Query\n`2` - Edit\nEnum: 0,1,2",
        "format": "int64",
        "type": "integer"
      },
      "Duration": {
        "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
        "format": "int64",
        "type": "integer"
      },
      "EmailConfig": {
        "properties": {
          "auth_identity": {
            "type": "string"
          },
          "auth_password": {
            "$ref": "#/components/schemas/Secret"
          },
          "auth_password_file": {
            "type": "string"
          },
          "auth_secret": {
            "$ref": "#/components/schemas/Secret"
          },
          "auth_username": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "hello": {
            "type": "string"
          },
          "html": {
            "type": "string"
          },
          "require_tls": {
            "type": "boolean"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "smarthost": {
            "$ref": "#/components/schemas/HostPort"
          },
          "text": {
            "type": "string"
          },
          "tls_config": {
            "$ref": "#/components/schemas/TLSConfig"
          },
          "to": {
            "description": "Email address to notify.",
            "type": "string"
          }
        },
        "title": "EmailConfig configures notifications via mail.",
        "type": "object"
      },
      "EmailDTO": {
        "properties": {
          "recipient": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmbeddedContactPoint": {
        "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation.",
        "properties": {
          "disableResolveMessage": {
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "Name is used as grouping key in the UI. Contact points with the\nsame name will be grouped in the UI.",
            "example": "webhook_1",
            "type": "string"
          },
          "provenance": {
            "readOnly": true,
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/Json"
          },
          "type": {
            "enum": [
              "alertmanager",
              " dingding",
              " discord",
              " email",
              " googlechat",
              " kafka",
              " line",
              " opsgenie",
              " pagerduty",
              " pushover",
              " sensugo",
              " slack",
              " teams",
              " telegram",
              " threema",
              " victorops",
              " webhook",
              " wecom"
            ],
            "example": "webhook",
            "type": "string"
          },
          "uid": {
            "description": "UID is the unique identifier of the contact point. The UID can be\nset by the user.",
            "example": "my_external_reference",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-\\_]+$",
            "type": "string"
          }
        },
        "required": [
          "type",
          "settings"
        ],
        "type": "object"
      },
      "EnumFieldConfig": {
        "description": "Enum field config\nVector values are used as lookup keys into the enum fields",
        "properties": {
          "color": {
            "description": "Color is the color value for a given index (empty is undefined)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "Description of the enum state",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "icon": {
            "description": "Icon supports setting an icon for a given index value",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "text": {
            "description": "Value is the string display value for a given index",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorResponseBody": {
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "ErrorSource": {
        "description": "ErrorSource type defines the source of the error",
        "type": "string"
      },
      "ErrorType": {
        "title": "ErrorType models the different API error types.",
        "type": "string"
      },
      "EvalAlertConditionCommand": {
        "description": "EvalAlertConditionCommand is the command for evaluating a condition",
        "properties": {
          "condition": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertQuery"
            },
            "type": "array"
          },
          "now": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EvalQueriesPayload": {
        "properties": {
          "condition": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertQuery"
            },
            "type": "array"
          },
          "now": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EvalQueriesResponse": {
        "type": "object"
      },
      "ExplorePanelsState": {
        "description": "This is an object constructed with the keys as the values of the enum VisType and the value being a bag of properties"
      },
      "ExtKeyUsage": {
        "description": "Each of the ExtKeyUsage* constants define a unique action.",
        "format": "int64",
        "title": "ExtKeyUsage represents an extended set of actions that are valid for a given key.",
        "type": "integer"
      },
      "ExtendedReceiver": {
        "properties": {
          "email_configs": {
            "$ref": "#/components/schemas/EmailConfig"
          },
          "grafana_managed_receiver": {
            "$ref": "#/components/schemas/PostableGrafanaReceiver"
          },
          "opsgenie_configs": {
            "$ref": "#/components/schemas/OpsGenieConfig"
          },
          "pagerduty_configs": {
            "$ref": "#/components/schemas/PagerdutyConfig"
          },
          "pushover_configs": {
            "$ref": "#/components/schemas/PushoverConfig"
          },
          "slack_configs": {
            "$ref": "#/components/schemas/SlackConfig"
          },
          "victorops_configs": {
            "$ref": "#/components/schemas/VictorOpsConfig"
          },
          "webhook_configs": {
            "$ref": "#/components/schemas/WebhookConfig"
          },
          "wechat_configs": {
            "$ref": "#/components/schemas/WechatConfig"
          }
        },
        "type": "object"
      },
      "Extension": {
        "description": "Extension represents the ASN.1 structure of the same name. See RFC\n5280, section 4.2.",
        "properties": {
          "Critical": {
            "type": "boolean"
          },
          "Id": {
            "$ref": "#/components/schemas/ObjectIdentifier"
          },
          "Value": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FailedUser": {
        "description": "FailedUser holds the information of an user that failed",
        "properties": {
          "Error": {
            "type": "string"
          },
          "Login": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Failure": {
        "$ref": "#/components/schemas/ResponseDetails"
      },
      "Field": {
        "description": "A Field is essentially a slice of various types with extra properties and methods.\nSee NewField() for supported types.\n\nThe slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/FieldConfig"
          },
          "labels": {
            "$ref": "#/components/schemas/FrameLabels"
          },
          "name": {
            "description": "Name is default identifier of the field. The name does not have to be unique, but the combination\nof name and Labels should be unique for proper behavior in all situations.",
            "type": "string"
          }
        },
        "title": "Field represents a typed column of data within a Frame.",
        "type": "object"
      },
      "FieldConfig": {
        "properties": {
          "color": {
            "additionalProperties": {},
            "description": "Map values to a display color\nNOTE: this interface is under development in the frontend... so simple map for now",
            "type": "object"
          },
          "custom": {
            "additionalProperties": {},
            "description": "Panel Specific Values",
            "type": "object"
          },
          "decimals": {
            "format": "uint16",
            "type": "integer"
          },
          "description": {
            "description": "Description is human readable field metadata",
            "type": "string"
          },
          "displayName": {
            "description": "DisplayName overrides Grafana default naming, should not be used from a data source",
            "type": "string"
          },
          "displayNameFromDS": {
            "description": "DisplayNameFromDS overrides Grafana default naming strategy.",
            "type": "string"
          },
          "filterable": {
            "description": "Filterable indicates if the Field's data can be filtered by additional calls.",
            "type": "boolean"
          },
          "interval": {
            "description": "Interval indicates the expected regular step between values in the series.\nWhen an interval exists, consumers can identify \"missing\" values when the expected value is not present.\nThe grafana timeseries visualization will render disconnected values when missing values are found it the time field.\nThe interval uses the same units as the values.  For time.Time, this is defined in milliseconds.",
            "format": "double",
            "type": "number"
          },
          "links": {
            "description": "The behavior when clicking on a result",
            "items": {
              "$ref": "#/components/schemas/DataLink"
            },
            "type": "array"
          },
          "mappings": {
            "$ref": "#/components/schemas/ValueMappings"
          },
          "max": {
            "$ref": "#/components/schemas/ConfFloat64"
          },
          "min": {
            "$ref": "#/components/schemas/ConfFloat64"
          },
          "noValue": {
            "description": "Alternative to empty string",
            "type": "string"
          },
          "path": {
            "description": "Path is an explicit path to the field in the datasource. When the frame meta includes a path,\nthis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used as an identifier to update values in a subsequent request",
            "type": "string"
          },
          "thresholds": {
            "$ref": "#/components/schemas/ThresholdsConfig"
          },
          "type": {
            "$ref": "#/components/schemas/FieldTypeConfig"
          },
          "unit": {
            "description": "Numeric Options",
            "type": "string"
          },
          "writeable": {
            "description": "Writeable indicates that the datasource knows how to update this value",
            "type": "boolean"
          }
        },
        "title": "FieldConfig represents the display properties for a Field.",
        "type": "object"
      },
      "FieldTypeConfig": {
        "description": "FieldTypeConfig has type specific configs, only one should be active at a time",
        "properties": {
          "enum": {
            "$ref": "#/components/schemas/EnumFieldConfig"
          }
        },
        "type": "object"
      },
      "FindTagsResult": {
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagsDTO"
            },
            "type": "array"
          }
        },
        "title": "FindTagsResult is the result of a tags search.",
        "type": "object"
      },
      "FloatHistogram": {
        "description": "A FloatHistogram is needed by PromQL to handle operations that might result\nin fractional counts. Since the counts in a histogram are unlikely to be too\nlarge to be represented precisely by a float64, a FloatHistogram can also be\nused to represent a histogram with integer counts and thus serves as a more\ngeneralized representation.",
        "properties": {
          "Count": {
            "description": "Total number of observations. Must be zero or positive.",
            "format": "double",
            "type": "number"
          },
          "CounterResetHint": {
            "$ref": "#/components/schemas/CounterResetHint"
          },
          "PositiveBuckets": {
            "description": "Observation counts in buckets. Each represents an absolute count and\nmust be zero or positive.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "PositiveSpans": {
            "description": "Spans for positive and negative buckets (see Span below).",
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "type": "array"
          },
          "Schema": {
            "description": "Currently valid schema numbers are -4 \u003c= n \u003c= 8.  They are all for\nbase-2 bucket schemas, where 1 is a bucket boundary in each case, and\nthen each power of two is divided into 2^n logarithmic buckets.  Or\nin other words, each bucket boundary is the previous boundary times\n2^(2^-n).",
            "format": "int32",
            "type": "integer"
          },
          "Sum": {
            "description": "Sum of observations. This is also used as the stale marker.",
            "format": "double",
            "type": "number"
          },
          "ZeroCount": {
            "description": "Observations falling into the zero bucket. Must be zero or positive.",
            "format": "double",
            "type": "number"
          },
          "ZeroThreshold": {
            "description": "Width of the zero bucket.",
            "format": "double",
            "type": "number"
          }
        },
        "title": "FloatHistogram is similar to Histogram but uses float64 for all\ncounts. Additionally, bucket counts are absolute and not deltas.",
        "type": "object"
      },
      "Folder": {
        "properties": {
          "accessControl": {
            "$ref": "#/components/schemas/Metadata"
          },
          "canAdmin": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canSave": {
            "type": "boolean"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "hasAcl": {
            "type": "boolean"
          },
          "id": {
            "description": "Deprecated: use UID instead",
            "format": "int64",
            "type": "integer"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "parentUid": {
            "description": "only used if nested folders are enabled",
            "type": "string"
          },
          "parents": {
            "description": "the parent folders starting from the root going down",
            "items": {
              "$ref": "#/components/schemas/Folder"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FolderSearchHit": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "parentUid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ForbiddenError": {
        "properties": {
          "body": {
            "$ref": "#/components/schemas/PublicError"
          }
        },
        "type": "object"
      },
      "Frame": {
        "description": "Each Field is well typed by its FieldType and supports optional Labels.\n\nA Frame is a general data container for Grafana. A Frame can be table data\nor time series data depending on its content and field types.",
        "properties": {
          "Fields": {
            "description": "Fields are the columns of a frame.\nAll Fields must be of the same the length when marshalling the Frame for transmission.\nThere should be no `nil` entries in the Fields slice (making them pointers was a mistake).",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "type": "array"
          },
          "Meta": {
            "$ref": "#/components/schemas/FrameMeta"
          },
          "Name": {
            "description": "Name is used in some Grafana visualizations.",
            "type": "string"
          },
          "RefID": {
            "description": "RefID is a property that can be set to match a Frame to its originating query.",
            "type": "string"
          }
        },
        "title": "Frame is a columnar data structure where each column is a Field.",
        "type": "object"
      },
      "FrameLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Labels are used to add metadata to an object.  The JSON will always be sorted keys",
        "type": "object"
      },
      "FrameMeta": {
        "description": "https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11\nNOTE -- in javascript this can accept any `[key: string]: any;` however\nthis interface only exposes the values we want to be exposed",
        "properties": {
          "channel": {
            "description": "Channel is the path to a stream in grafana live that has real-time updates for this data.",
            "type": "string"
          },
          "custom": {
            "description": "Custom datasource specific values."
          },
          "dataTopic": {
            "$ref": "#/components/schemas/DataTopic"
          },
          "executedQueryString": {
            "description": "ExecutedQueryString is the raw query sent to the underlying system. All macros and templating\nhave been applied.  When metadata contains this value, it will be shown in the query inspector.",
            "type": "string"
          },
          "notices": {
            "description": "Notices provide additional information about the data in the Frame that\nGrafana can display to the user in the user interface.",
            "items": {
              "$ref": "#/components/schemas/Notice"
            },
            "type": "array"
          },
          "path": {
            "description": "Path is a browsable path on the datasource.",
            "type": "string"
          },
          "pathSeparator": {
            "description": "PathSeparator defines the separator pattern to decode a hierarchy. The default separator is '/'.",
            "type": "string"
          },
          "preferredVisualisationPluginId": {
            "description": "PreferredVisualizationPluginId sets the panel plugin id to use to render the data when using Explore. If\nthe plugin cannot be found will fall back to PreferredVisualization.",
            "type": "string"
          },
          "preferredVisualisationType": {
            "$ref": "#/components/schemas/VisType"
          },
          "stats": {
            "description": "Stats is an array of query result statistics.",
            "items": {
              "$ref": "#/components/schemas/QueryStat"
            },
            "type": "array"
          },
          "type": {
            "$ref": "#/components/schemas/FrameType"
          },
          "typeVersion": {
            "$ref": "#/components/schemas/FrameTypeVersion"
          },
          "uniqueRowIdFields": {
            "description": "Array of field indices which values create a unique id for each row. Ideally this should be globally unique ID\nbut that isn't guarantied. Should help with keeping track and deduplicating rows in visualizations, especially\nwith streaming data with frequent updates.",
            "example": "TraceID in Tempo, table name + primary key in SQL",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "title": "FrameMeta matches:",
        "type": "object"
      },
      "FrameType": {
        "description": "A FrameType string, when present in a frame's metadata, asserts that the\nframe's structure conforms to the FrameType's specification.\nThis property is currently optional, so FrameType may be FrameTypeUnknown even if the properties of\nthe Frame correspond to a defined FrameType.\n+enum",
        "type": "string"
      },
      "FrameTypeVersion": {
        "items": {
          "format": "uint64",
          "type": "integer"
        },
        "title": "FrameType is a 2 number version (Major / Minor).",
        "type": "array"
      },
      "Frames": {
        "description": "It is the main data container within a backend.DataResponse.\nThere should be no `nil` entries in the Frames slice (making them pointers was a mistake).",
        "items": {
          "$ref": "#/components/schemas/Frame"
        },
        "title": "Frames is a slice of Frame pointers.",
        "type": "array"
      },
      "GetAccessTokenResponseDTO": {
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string"
          },
          "firstUsedAt": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastUsedAt": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetAnnotationTagsResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/FindTagsResult"
          }
        },
        "title": "GetAnnotationTagsResponse is a response struct for FindTagsResult.",
        "type": "object"
      },
      "GetHomeDashboardResponse": {
        "allOf": [
          {
            "properties": {
              "dashboard": {
                "$ref": "#/components/schemas/Json"
              },
              "meta": {
                "$ref": "#/components/schemas/DashboardMeta"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "redirectUri": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "title": "Get home dashboard response."
      },
      "GetSnapshotResponseDTO": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "finished": {
            "format": "date-time",
            "type": "string"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/MigrateDataResponseItemDTO"
            },
            "type": "array"
          },
          "sessionUid": {
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/SnapshotResourceStats"
          },
          "status": {
            "enum": [
              "INITIALIZING",
              "CREATING",
              "PENDING_UPLOAD",
              "UPLOADING",
              "PENDING_PROCESSING",
              "PROCESSING",
              "FINISHED",
              "CANCELED",
              "ERROR",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GettableAlertmanagers": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AlertManagersResult"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GettableApiAlertingConfig": {
        "properties": {
          "global": {
            "$ref": "#/components/schemas/GlobalConfig"
          },
          "inhibit_rules": {
            "items": {
              "$ref": "#/components/schemas/InhibitRule"
            },
            "type": "array"
          },
          "muteTimeProvenances": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Provenance"
            },
            "type": "object"
          },
          "mute_time_intervals": {
            "description": "MuteTimeIntervals is deprecated and will be removed before Alertmanager 1.0.",
            "items": {
              "$ref": "#/components/schemas/MuteTimeInterval"
            },
            "type": "array"
          },
          "receivers": {
            "description": "Override with our superset receiver type",
            "items": {
              "$ref": "#/components/schemas/GettableApiReceiver"
            },
            "type": "array"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          },
          "templates": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GettableApiReceiver": {
        "properties": {
          "discord_configs": {
            "items": {
              "$ref": "#/components/schemas/DiscordConfig"
            },
            "type": "array"
          },
          "email_configs": {
            "items": {
              "$ref": "#/components/schemas/EmailConfig"
            },
            "type": "array"
          },
          "grafana_managed_receiver_configs": {
            "items": {
              "$ref": "#/components/schemas/GettableGrafanaReceiver"
            },
            "type": "array"
          },
          "msteams_configs": {
            "items": {
              "$ref": "#/components/schemas/MSTeamsConfig"
            },
            "type": "array"
          },
          "name": {
            "description": "A unique identifier for this receiver.",
            "type": "string"
          },
          "opsgenie_configs": {
            "items": {
              "$ref": "#/components/schemas/OpsGenieConfig"
            },
            "type": "array"
          },
          "pagerduty_configs": {
            "items": {
              "$ref": "#/components/schemas/PagerdutyConfig"
            },
            "type": "array"
          },
          "pushover_configs": {
            "items": {
              "$ref": "#/components/schemas/PushoverConfig"
            },
            "type": "array"
          },
          "slack_configs": {
            "items": {
              "$ref": "#/components/schemas/SlackConfig"
            },
            "type": "array"
          },
          "sns_configs": {
            "items": {
              "$ref": "#/components/schemas/SNSConfig"
            },
            "type": "array"
          },
          "telegram_configs": {
            "items": {
              "$ref": "#/components/schemas/TelegramConfig"
            },
            "type": "array"
          },
          "victorops_configs": {
            "items": {
              "$ref": "#/components/schemas/VictorOpsConfig"
            },
            "type": "array"
          },
          "webex_configs": {
            "items": {
              "$ref": "#/components/schemas/WebexConfig"
            },
            "type": "array"
          },
          "webhook_configs": {
            "items": {
              "$ref": "#/components/schemas/WebhookConfig"
            },
            "type": "array"
          },
          "wechat_configs": {
            "items": {
              "$ref": "#/components/schemas/WechatConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GettableExtendedRuleNode": {
        "properties": {
          "alert": {
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expr": {
            "type": "string"
          },
          "for": {
            "type": "string"
          },
          "grafana_alert": {
            "$ref": "#/components/schemas/GettableGrafanaRule"
          },
          "keep_firing_for": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "record": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GettableGrafanaReceiver": {
        "properties": {
          "disableResolveMessage": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "secureFields": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "settings": {
            "$ref": "#/components/schemas/RawMessage"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GettableGrafanaReceivers": {
        "properties": {
          "grafana_managed_receiver_configs": {
            "items": {
              "$ref": "#/components/schemas/GettableGrafanaReceiver"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GettableGrafanaRule": {
        "properties": {
          "condition": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertQuery"
            },
            "type": "array"
          },
          "exec_err_state": {
            "enum": [
              "OK",
              "Alerting",
              "Error"
            ],
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "intervalSeconds": {
            "format": "int64",
            "type": "integer"
          },
          "is_paused": {
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/AlertRuleMetadata"
          },
          "namespace_uid": {
            "type": "string"
          },
          "no_data_state": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ],
            "type": "string"
          },
          "notification_settings": {
            "$ref": "#/components/schemas/AlertRuleNotificationSettings"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "record": {
            "$ref": "#/components/schemas/Record"
          },
          "rule_group": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GettableHistoricUserConfig": {
        "properties": {
          "alertmanager_config": {
            "$ref": "#/components/schemas/GettableApiAlertingConfig"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "last_applied": {
            "format": "date-time",
            "type": "string"
          },
          "template_file_provenances": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Provenance"
            },
            "type": "object"
          },
          "template_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GettableNGalertConfig": {
        "properties": {
          "alertmanagersChoice": {
            "enum": [
              "all",
              "internal",
              "external"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GettableRuleGroupConfig": {
        "properties": {
          "align_evaluation_time_on_interval": {
            "type": "boolean"
          },
          "evaluation_delay": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration"
          },
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "query_offset": {
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/GettableExtendedRuleNode"
            },
            "type": "array"
          },
          "source_tenants": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GettableStatus": {
        "properties": {
          "cluster": {
            "$ref": "#/components/schemas/clusterStatus"
          },
          "config": {
            "$ref": "#/components/schemas/PostableApiAlertingConfig"
          },
          "uptime": {
            "description": "uptime",
            "format": "date-time",
            "type": "string"
          },
          "versionInfo": {
            "$ref": "#/components/schemas/versionInfo"
          }
        },
        "required": [
          "cluster",
          "config",
          "uptime",
          "versionInfo"
        ],
        "type": "object"
      },
      "GettableTimeIntervals": {
        "properties": {
          "name": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeIntervalItem"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GettableUserConfig": {
        "properties": {
          "alertmanager_config": {
            "$ref": "#/components/schemas/GettableApiAlertingConfig"
          },
          "template_file_provenances": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Provenance"
            },
            "type": "object"
          },
          "template_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GlobalConfig": {
        "description": "GlobalConfig defines configuration parameters that are valid globally\nunless overwritten.",
        "properties": {
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "opsgenie_api_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "opsgenie_api_key_file": {
            "type": "string"
          },
          "opsgenie_api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "pagerduty_url": {
            "$ref": "#/components/schemas/URL"
          },
          "resolve_timeout": {
            "$ref": "#/components/schemas/Duration"
          },
          "slack_api_url": {
            "$ref": "#/components/schemas/SecretURL"
          },
          "slack_api_url_file": {
            "type": "string"
          },
          "smtp_auth_identity": {
            "type": "string"
          },
          "smtp_auth_password": {
            "$ref": "#/components/schemas/Secret"
          },
          "smtp_auth_password_file": {
            "type": "string"
          },
          "smtp_auth_secret": {
            "$ref": "#/components/schemas/Secret"
          },
          "smtp_auth_username": {
            "type": "string"
          },
          "smtp_from": {
            "type": "string"
          },
          "smtp_hello": {
            "type": "string"
          },
          "smtp_require_tls": {
            "type": "boolean"
          },
          "smtp_smarthost": {
            "$ref": "#/components/schemas/HostPort"
          },
          "telegram_api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "victorops_api_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "victorops_api_key_file": {
            "type": "string"
          },
          "victorops_api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "webex_api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "wechat_api_corp_id": {
            "type": "string"
          },
          "wechat_api_secret": {
            "$ref": "#/components/schemas/Secret"
          },
          "wechat_api_url": {
            "$ref": "#/components/schemas/URL"
          }
        },
        "type": "object"
      },
      "Group": {
        "properties": {
          "groupID": {
            "type": "string"
          },
          "mappings": {}
        },
        "type": "object"
      },
      "GroupAttributes": {
        "properties": {
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupMapping": {
        "properties": {
          "groupID": {
            "type": "string"
          },
          "orgID": {
            "format": "int64",
            "type": "integer"
          },
          "uid": {
            "type": "string"
          },
          "variant": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPClientConfig": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/Authorization"
          },
          "basic_auth": {
            "$ref": "#/components/schemas/BasicAuth"
          },
          "bearer_token": {
            "$ref": "#/components/schemas/Secret"
          },
          "bearer_token_file": {
            "description": "The bearer token file for the targets. Deprecated in favour of\nAuthorization.CredentialsFile.",
            "type": "string"
          },
          "enable_http2": {
            "description": "EnableHTTP2 specifies whether the client should configure HTTP2.\nThe omitempty flag is not set, because it would be hidden from the\nmarshalled configuration when set to false.",
            "type": "boolean"
          },
          "follow_redirects": {
            "description": "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.\nThe omitempty flag is not set, because it would be hidden from the\nmarshalled configuration when set to false.",
            "type": "boolean"
          },
          "http_headers": {
            "$ref": "#/components/schemas/Headers"
          },
          "no_proxy": {
            "description": "NoProxy contains addresses that should not use a proxy.",
            "type": "string"
          },
          "oauth2": {
            "$ref": "#/components/schemas/OAuth2"
          },
          "proxy_connect_header": {
            "$ref": "#/components/schemas/ProxyHeader"
          },
          "proxy_from_environment": {
            "description": "ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function\nto determine proxies.",
            "type": "boolean"
          },
          "proxy_url": {
            "$ref": "#/components/schemas/URL"
          },
          "tls_config": {
            "$ref": "#/components/schemas/TLSConfig"
          }
        },
        "title": "HTTPClientConfig configures an HTTP client.",
        "type": "object"
      },
      "Header": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secrets": {
            "items": {
              "$ref": "#/components/schemas/Secret"
            },
            "type": "array"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "Header represents the configuration for a single HTTP header.",
        "type": "object"
      },
      "Headers": {
        "properties": {
          "Headers": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Header"
            },
            "type": "object"
          }
        },
        "title": "Headers represents the configuration for HTTP headers.",
        "type": "object"
      },
      "Hit": {
        "properties": {
          "folderId": {
            "format": "int64",
            "type": "integer"
          },
          "folderTitle": {
            "type": "string"
          },
          "folderUid": {
            "type": "string"
          },
          "folderUrl": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isStarred": {
            "type": "boolean"
          },
          "permanentlyDeleteDate": {
            "format": "date-time",
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "sortMeta": {
            "format": "int64",
            "type": "integer"
          },
          "sortMetaName": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/HitType"
          },
          "uid": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HitList": {
        "items": {
          "$ref": "#/components/schemas/Hit"
        },
        "type": "array"
      },
      "HitType": {
        "type": "string"
      },
      "HostPort": {
        "properties": {
          "Host": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          }
        },
        "title": "HostPort represents a \"host:port\" network address.",
        "type": "object"
      },
      "IPMask": {
        "description": "See type [IPNet] and func [ParseCIDR] for details.",
        "items": {
          "format": "uint8",
          "type": "integer"
        },
        "title": "An IPMask is a bitmask that can be used to manipulate\nIP addresses for IP addressing and routing.",
        "type": "array"
      },
      "IPNet": {
        "properties": {
          "IP": {
            "type": "string"
          },
          "Mask": {
            "$ref": "#/components/schemas/IPMask"
          }
        },
        "title": "An IPNet represents an IP network.",
        "type": "object"
      },
      "ImportDashboardInput": {
        "properties": {
          "name": {
            "type": "string"
          },
          "pluginId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "ImportDashboardInput definition of input parameters when importing a dashboard.",
        "type": "object"
      },
      "ImportDashboardRequest": {
        "properties": {
          "dashboard": {
            "$ref": "#/components/schemas/Json"
          },
          "folderId": {
            "description": "Deprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "type": "string"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/ImportDashboardInput"
            },
            "type": "array"
          },
          "overwrite": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "pluginId": {
            "type": "string"
          }
        },
        "title": "ImportDashboardRequest request object for importing a dashboard.",
        "type": "object"
      },
      "ImportDashboardResponse": {
        "properties": {
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "folderId": {
            "description": "Deprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "type": "string"
          },
          "imported": {
            "type": "boolean"
          },
          "importedRevision": {
            "format": "int64",
            "type": "integer"
          },
          "importedUri": {
            "type": "string"
          },
          "importedUrl": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "pluginId": {
            "type": "string"
          },
          "removed": {
            "type": "boolean"
          },
          "revision": {
            "format": "int64",
            "type": "integer"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "title": "ImportDashboardResponse response object returned when importing a dashboard.",
        "type": "object"
      },
      "InhibitRule": {
        "description": "InhibitRule defines an inhibition rule that mutes alerts that match the\ntarget labels if an alert matching the source labels exists.\nBoth alerts have to have a set of labels being equal.",
        "properties": {
          "equal": {
            "$ref": "#/components/schemas/LabelNames"
          },
          "source_match": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "SourceMatch defines a set of labels that have to equal the given\nvalue for source alerts. Deprecated. Remove before v1.0 release.",
            "type": "object"
          },
          "source_match_re": {
            "$ref": "#/components/schemas/MatchRegexps"
          },
          "source_matchers": {
            "$ref": "#/components/schemas/Matchers"
          },
          "target_match": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "TargetMatch defines a set of labels that have to equal the given\nvalue for target alerts. Deprecated. Remove before v1.0 release.",
            "type": "object"
          },
          "target_match_re": {
            "$ref": "#/components/schemas/MatchRegexps"
          },
          "target_matchers": {
            "$ref": "#/components/schemas/Matchers"
          }
        },
        "type": "object"
      },
      "InspectType": {
        "format": "int64",
        "title": "InspectType is a type for the Inspect property of a Notice.",
        "type": "integer"
      },
      "InternalDataLink": {
        "description": "InternalDataLink definition to allow Explore links to be constructed in the backend",
        "properties": {
          "datasourceName": {
            "type": "string"
          },
          "datasourceUid": {
            "type": "string"
          },
          "panelsState": {
            "$ref": "#/components/schemas/ExplorePanelsState"
          },
          "query": {},
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "transformations": {
            "items": {
              "$ref": "#/components/schemas/LinkTransformationConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JSONWebKey": {
        "description": "JSONWebKey represents a public or private key in JWK format. It can be\nmarshaled into JSON and unmarshaled from JSON.",
        "properties": {
          "Algorithm": {
            "description": "Key algorithm, parsed from `alg` header.",
            "type": "string"
          },
          "CertificateThumbprintSHA1": {
            "description": "X.509 certificate thumbprint (SHA-1), parsed from `x5t` header.",
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "CertificateThumbprintSHA256": {
            "description": "X.509 certificate thumbprint (SHA-256), parsed from `x5t#S256` header.",
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "Certificates": {
            "description": "X.509 certificate chain, parsed from `x5c` header.",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            },
            "type": "array"
          },
          "CertificatesURL": {
            "$ref": "#/components/schemas/URL"
          },
          "Key": {
            "description": "Key is the Go in-memory representation of this key. It must have one\nof these types:\ned25519.PublicKey\ned25519.PrivateKey\necdsa.PublicKey\necdsa.PrivateKey\nrsa.PublicKey\nrsa.PrivateKey\n[]byte (a symmetric key)\n\nWhen marshaling this JSONWebKey into JSON, the \"kty\" header parameter\nwill be automatically set based on the type of this field."
          },
          "KeyID": {
            "description": "Key identifier, parsed from `kid` header.",
            "type": "string"
          },
          "Use": {
            "description": "Key use, parsed from `use` header.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Json": {
        "type": "object"
      },
      "KeyUsage": {
        "description": "KeyUsage represents the set of actions that are valid for a given key. It's\na bitmap of the KeyUsage* constants.",
        "format": "int64",
        "type": "integer"
      },
      "Label": {
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "title": "Label is a key/value pair of strings.",
        "type": "object"
      },
      "LabelName": {
        "description": "A LabelName is a key for a LabelSet or Metric.  It has a value associated\ntherewith.",
        "type": "string"
      },
      "LabelNames": {
        "items": {
          "$ref": "#/components/schemas/LabelName"
        },
        "title": "LabelNames is a sortable LabelName slice. In implements sort.Interface.",
        "type": "array"
      },
      "LabelSet": {
        "additionalProperties": {
          "$ref": "#/components/schemas/LabelValue"
        },
        "description": "A LabelSet is a collection of LabelName and LabelValue pairs.  The LabelSet\nmay be fully-qualified down to the point where it may resolve to a single\nMetric in the data store or not.  All operations that occur within the realm\nof a LabelSet can emit a vector of Metric entities to which the LabelSet may\nmatch.",
        "type": "object"
      },
      "LabelValue": {
        "title": "A LabelValue is an associated value for a LabelName.",
        "type": "string"
      },
      "Labels": {
        "description": "Labels is a sorted set of labels. Order has to be guaranteed upon\ninstantiation.",
        "items": {
          "$ref": "#/components/schemas/Label"
        },
        "type": "array"
      },
      "LibraryElementArrayResponse": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/LibraryElementDTO"
            },
            "type": "array"
          }
        },
        "title": "LibraryElementArrayResponse is a response struct for an array of LibraryElementDTO.",
        "type": "object"
      },
      "LibraryElementConnectionDTO": {
        "properties": {
          "connectionId": {
            "format": "int64",
            "type": "integer"
          },
          "connectionUid": {
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/LibraryElementDTOMetaUser"
          },
          "elementId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "kind": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "LibraryElementConnectionDTO is the frontend DTO for element connections.",
        "type": "object"
      },
      "LibraryElementConnectionsResponse": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/LibraryElementConnectionDTO"
            },
            "type": "array"
          }
        },
        "title": "LibraryElementConnectionsResponse is a response struct for an array of LibraryElementConnectionDTO.",
        "type": "object"
      },
      "LibraryElementDTO": {
        "properties": {
          "description": {
            "type": "string"
          },
          "folderId": {
            "description": "Deprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "kind": {
            "format": "int64",
            "type": "integer"
          },
          "meta": {
            "$ref": "#/components/schemas/LibraryElementDTOMeta"
          },
          "model": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "schemaVersion": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "LibraryElementDTO is the frontend DTO for entities.",
        "type": "object"
      },
      "LibraryElementDTOMeta": {
        "properties": {
          "connectedDashboards": {
            "format": "int64",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/LibraryElementDTOMetaUser"
          },
          "folderName": {
            "type": "string"
          },
          "folderUid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/LibraryElementDTOMetaUser"
          }
        },
        "title": "LibraryElementDTOMeta is the meta information for LibraryElementDTO.",
        "type": "object"
      },
      "LibraryElementDTOMetaUser": {
        "properties": {
          "avatarUrl": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "LibraryElementDTOMetaUser defines model for LibraryElementDTOMetaUser.",
        "type": "object"
      },
      "LibraryElementResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LibraryElementDTO"
          }
        },
        "title": "LibraryElementResponse is a response struct for LibraryElementDTO.",
        "type": "object"
      },
      "LibraryElementSearchResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LibraryElementSearchResult"
          }
        },
        "title": "LibraryElementSearchResponse is a response struct for LibraryElementSearchResult.",
        "type": "object"
      },
      "LibraryElementSearchResult": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/LibraryElementDTO"
            },
            "type": "array"
          },
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "LibraryElementSearchResult is the search result for entities.",
        "type": "object"
      },
      "LinkTransformationConfig": {
        "properties": {
          "expression": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "mapValue": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SupportedTransformationTypes"
          }
        },
        "type": "object"
      },
      "MSTeamsConfig": {
        "properties": {
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "webhook_url": {
            "$ref": "#/components/schemas/SecretURL"
          },
          "webhook_url_file": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MassDeleteAnnotationsCmd": {
        "properties": {
          "annotationId": {
            "format": "int64",
            "type": "integer"
          },
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "dashboardUID": {
            "type": "string"
          },
          "panelId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MatchRegexps": {
        "additionalProperties": {
          "type": "string"
        },
        "title": "MatchRegexps represents a map of Regexp.",
        "type": "object"
      },
      "MatchType": {
        "format": "int64",
        "title": "MatchType is an enum for label matching types.",
        "type": "integer"
      },
      "Matcher": {
        "properties": {
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/MatchType"
          },
          "Value": {
            "type": "string"
          }
        },
        "title": "Matcher models the matching of a label.",
        "type": "object"
      },
      "Matchers": {
        "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted.",
        "items": {
          "$ref": "#/components/schemas/Matcher"
        },
        "type": "array"
      },
      "Metadata": {
        "additionalProperties": {
          "type": "boolean"
        },
        "description": "Metadata contains user accesses for a given resource\nEx: map[string]bool{\"create\":true, \"delete\": true}",
        "type": "object"
      },
      "MetricRequest": {
        "properties": {
          "debug": {
            "type": "boolean"
          },
          "from": {
            "description": "From Start time in epoch timestamps in milliseconds or relative using Grafana time units.",
            "example": "now-1h",
            "type": "string"
          },
          "queries": {
            "description": "queries.refId – Specifies an identifier of the query. Is optional and default to “A”.\nqueries.datasourceId – Specifies the data source to be queried. Each query in the request must have an unique datasourceId.\nqueries.maxDataPoints - Species maximum amount of data points that dashboard panel can render. Is optional and default to 100.\nqueries.intervalMs - Specifies the time interval in milliseconds of time series. Is optional and defaults to 1000.",
            "example": [
              {
                "datasource": {
                  "uid": "PD8C576611E62080A"
                },
                "format": "table",
                "intervalMs": 86400000,
                "maxDataPoints": 1092,
                "rawSql": "SELECT 1 as valueOne, 2 as valueTwo",
                "refId": "A"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Json"
            },
            "type": "array"
          },
          "to": {
            "description": "To End time in epoch timestamps in milliseconds or relative using Grafana time units.",
            "example": "now",
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "queries"
        ],
        "type": "object"
      },
      "MigrateDataResponseDTO": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MigrateDataResponseItemDTO"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MigrateDataResponseItemDTO": {
        "properties": {
          "errorCode": {
            "enum": [
              "DATASOURCE_NAME_CONFLICT",
              "DATASOURCE_INVALID_URL",
              "DATASOURCE_ALREADY_MANAGED",
              "FOLDER_NAME_CONFLICT",
              "DASHBOARD_ALREADY_MANAGED",
              "LIBRARY_ELEMENT_NAME_CONFLICT",
              "UNSUPPORTED_DATA_TYPE",
              "RESOURCE_CONFLICT",
              "UNEXPECTED_STATUS_CODE",
              "INTERNAL_SERVICE_ERROR",
              "ONLY_CORE_DATA_SOURCES",
              "GENERIC_ERROR"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentName": {
            "type": "string"
          },
          "refId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "OK",
              "WARNING",
              "ERROR",
              "PENDING",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "DASHBOARD",
              "DATASOURCE",
              "FOLDER",
              "LIBRARY_ELEMENT",
              "ALERT_RULE",
              "CONTACT_POINT",
              "NOTIFICATION_POLICY",
              "NOTIFICATION_TEMPLATE",
              "MUTE_TIMING"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "refId",
          "status"
        ],
        "type": "object"
      },
      "MigrateDataResponseListDTO": {
        "properties": {
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MoveFolderCommand": {
        "description": "MoveFolderCommand captures the information required by the folder service\nto move a folder.",
        "properties": {
          "parentUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiStatus": {
        "type": "object"
      },
      "MuteTimeInterval": {
        "properties": {
          "name": {
            "type": "string"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            },
            "type": "array"
          }
        },
        "title": "MuteTimeInterval represents a named set of time intervals for which a route should be muted.",
        "type": "object"
      },
      "MuteTimeIntervalExport": {
        "properties": {
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MuteTimings": {
        "items": {
          "$ref": "#/components/schemas/MuteTimeInterval"
        },
        "type": "array"
      },
      "Name": {
        "description": "Name represents an X.509 distinguished name. This only includes the common\nelements of a DN. Note that Name is only an approximation of the X.509\nstructure. If an accurate representation is needed, asn1.Unmarshal the raw\nsubject or issuer as an [RDNSequence].",
        "properties": {
          "Country": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ExtraNames": {
            "description": "ExtraNames contains attributes to be copied, raw, into any marshaled\ndistinguished names. Values override any attributes with the same OID.\nThe ExtraNames field is not populated when parsing, see Names.",
            "items": {
              "$ref": "#/components/schemas/AttributeTypeAndValue"
            },
            "type": "array"
          },
          "Locality": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Names": {
            "description": "Names contains all parsed attributes. When parsing distinguished names,\nthis can be used to extract non-standard attributes that are not parsed\nby this package. When marshaling to RDNSequences, the Names field is\nignored, see ExtraNames.",
            "items": {
              "$ref": "#/components/schemas/AttributeTypeAndValue"
            },
            "type": "array"
          },
          "SerialNumber": {
            "type": "string"
          },
          "StreetAddress": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NamespaceConfigResponse": {
        "additionalProperties": {
          "items": {
            "$ref": "#/components/schemas/GettableRuleGroupConfig"
          },
          "type": "array"
        },
        "type": "object"
      },
      "NavbarPreference": {
        "properties": {
          "bookmarkUrls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "NavbarPreference defines model for NavbarPreference.",
        "type": "object"
      },
      "NewApiKeyResult": {
        "properties": {
          "id": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "key": {
            "example": "glsa_yscW25imSKJIuav8zF37RZmnbiDvB05G_fcaaf58a",
            "type": "string"
          },
          "name": {
            "example": "grafana",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotFound": {
        "type": "object"
      },
      "Notice": {
        "properties": {
          "inspect": {
            "$ref": "#/components/schemas/InspectType"
          },
          "link": {
            "description": "Link is an optional link for display in the user interface and can be an\nabsolute URL or a path relative to Grafana's root url.",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/NoticeSeverity"
          },
          "text": {
            "description": "Text is freeform descriptive text for the notice.",
            "type": "string"
          }
        },
        "title": "Notice provides a structure for presenting notifications in Grafana's user interface.",
        "type": "object"
      },
      "NoticeSeverity": {
        "format": "int64",
        "title": "NoticeSeverity is a type for the Severity property of a Notice.",
        "type": "integer"
      },
      "NotificationPolicyExport": {
        "properties": {
          "continue": {
            "type": "boolean"
          },
          "group_by": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_interval": {
            "type": "string"
          },
          "group_wait": {
            "type": "string"
          },
          "match": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Deprecated. Remove before v1.0 release.",
            "type": "object"
          },
          "match_re": {
            "$ref": "#/components/schemas/MatchRegexps"
          },
          "matchers": {
            "$ref": "#/components/schemas/Matchers"
          },
          "mute_time_intervals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "object_matchers": {
            "$ref": "#/components/schemas/ObjectMatchers"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "receiver": {
            "type": "string"
          },
          "repeat_interval": {
            "type": "string"
          },
          "routes": {
            "items": {
              "$ref": "#/components/schemas/RouteExport"
            },
            "type": "array"
          }
        },
        "title": "NotificationPolicyExport is the provisioned file export of alerting.NotificiationPolicyV1.",
        "type": "object"
      },
      "NotificationTemplate": {
        "properties": {
          "name": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "template": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationTemplateContent": {
        "properties": {
          "template": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationTemplates": {
        "items": {
          "$ref": "#/components/schemas/NotificationTemplate"
        },
        "type": "array"
      },
      "NotifierConfig": {
        "properties": {
          "send_resolved": {
            "type": "boolean"
          }
        },
        "title": "NotifierConfig contains base options common across all notifier configurations.",
        "type": "object"
      },
      "OAuth2": {
        "properties": {
          "TLSConfig": {
            "$ref": "#/components/schemas/TLSConfig"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "$ref": "#/components/schemas/Secret"
          },
          "client_secret_file": {
            "type": "string"
          },
          "client_secret_ref": {
            "description": "ClientSecretRef is the name of the secret within the secret manager to use as the client\nsecret.",
            "type": "string"
          },
          "endpoint_params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "no_proxy": {
            "description": "NoProxy contains addresses that should not use a proxy.",
            "type": "string"
          },
          "proxy_connect_header": {
            "$ref": "#/components/schemas/ProxyHeader"
          },
          "proxy_from_environment": {
            "description": "ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function\nto determine proxies.",
            "type": "boolean"
          },
          "proxy_url": {
            "$ref": "#/components/schemas/URL"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token_url": {
            "type": "string"
          }
        },
        "title": "OAuth2 is the oauth2 client configuration.",
        "type": "object"
      },
      "ObjectIdentifier": {
        "items": {
          "format": "int64",
          "type": "integer"
        },
        "title": "An ObjectIdentifier represents an ASN.1 OBJECT IDENTIFIER.",
        "type": "array"
      },
      "ObjectMatcher": {
        "items": {
          "type": "string"
        },
        "title": "ObjectMatcher is a matcher that can be used to filter alerts.",
        "type": "array"
      },
      "ObjectMatchers": {
        "items": {
          "$ref": "#/components/schemas/ObjectMatcher"
        },
        "title": "ObjectMatchers is a list of matchers that can be used to filter alerts.",
        "type": "array"
      },
      "OpsGenieConfig": {
        "properties": {
          "actions": {
            "type": "string"
          },
          "api_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "api_key_file": {
            "type": "string"
          },
          "api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "entity": {
            "type": "string"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "responders": {
            "items": {
              "$ref": "#/components/schemas/OpsGenieConfigResponder"
            },
            "type": "array"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "source": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "update_alerts": {
            "type": "boolean"
          }
        },
        "title": "OpsGenieConfig configures notifications via OpsGenie.",
        "type": "object"
      },
      "OpsGenieConfigResponder": {
        "properties": {
          "id": {
            "description": "One of those 3 should be filled.",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "description": "team, user, escalation, schedule etc.",
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrgDTO": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrgDetailsDTO": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrgUserDTO": {
        "properties": {
          "accessControl": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "authLabels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "avatarUrl": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isExternallySynced": {
            "type": "boolean"
          },
          "lastSeenAt": {
            "format": "date-time",
            "type": "string"
          },
          "lastSeenAtAge": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PagerdutyConfig": {
        "properties": {
          "class": {
            "type": "string"
          },
          "client": {
            "type": "string"
          },
          "client_url": {
            "type": "string"
          },
          "component": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "group": {
            "type": "string"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/PagerdutyImage"
            },
            "type": "array"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/PagerdutyLink"
            },
            "type": "array"
          },
          "routing_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "routing_key_file": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "service_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "service_key_file": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/URL"
          }
        },
        "title": "PagerdutyConfig configures notifications via PagerDuty.",
        "type": "object"
      },
      "PagerdutyImage": {
        "properties": {
          "alt": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "src": {
            "type": "string"
          }
        },
        "title": "PagerdutyImage is an image.",
        "type": "object"
      },
      "PagerdutyLink": {
        "properties": {
          "href": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "title": "PagerdutyLink is a link.",
        "type": "object"
      },
      "Password": {
        "type": "string"
      },
      "PatchAnnotationsCmd": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Json"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          },
          "timeEnd": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchLibraryElementCommand": {
        "description": "PatchLibraryElementCommand is the command for patching a LibraryElement",
        "properties": {
          "folderId": {
            "description": "ID of the folder where the library element is stored.\n\nDeprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "description": "UID of the folder where the library element is stored.",
            "type": "string"
          },
          "kind": {
            "description": "Kind of element to create, Use 1 for library panels or 2 for c.\nDescription:\n1 - library panels\n2 - library variables",
            "enum": [
              1,
              2
            ],
            "format": "int64",
            "type": "integer"
          },
          "model": {
            "description": "The JSON model for the library element.",
            "type": "object"
          },
          "name": {
            "description": "Name of the library element.",
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "version": {
            "description": "Version of the library element you are updating.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchPrefsCmd": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/CookieType"
            },
            "type": "array"
          },
          "homeDashboardId": {
            "default": 0,
            "description": "The numerical :id of a favorited dashboard",
            "format": "int64",
            "type": "integer"
          },
          "homeDashboardUID": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "navbar": {
            "$ref": "#/components/schemas/NavbarPreference"
          },
          "queryHistory": {
            "$ref": "#/components/schemas/QueryHistoryPreference"
          },
          "theme": {
            "enum": [
              "light",
              "dark"
            ],
            "type": "string"
          },
          "timezone": {
            "enum": [
              "utc",
              "browser"
            ],
            "type": "string"
          },
          "weekStart": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchQueryCommentInQueryHistoryCommand": {
        "description": "PatchQueryCommentInQueryHistoryCommand is the command for updating comment for query in query history",
        "properties": {
          "comment": {
            "description": "Updated comment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Permission": {
        "properties": {
          "action": {
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "Permission is the model for access control permissions.",
        "type": "object"
      },
      "PermissionDenied": {
        "type": "object"
      },
      "PermissionType": {
        "format": "int64",
        "type": "integer"
      },
      "Playlist": {
        "description": "Playlist model",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "interval": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaylistDTO": {
        "properties": {
          "interval": {
            "description": "Interval sets the time between switching views in a playlist.",
            "type": "string"
          },
          "items": {
            "description": "The ordered list of items that the playlist will iterate over.",
            "items": {
              "$ref": "#/components/schemas/PlaylistItemDTO"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the playlist.",
            "type": "string"
          },
          "uid": {
            "description": "Unique playlist identifier. Generated on creation, either by the\ncreator of the playlist of by the application.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaylistDashboard": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "order": {
            "format": "int64",
            "type": "integer"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaylistDashboardsSlice": {
        "items": {
          "$ref": "#/components/schemas/PlaylistDashboard"
        },
        "type": "array"
      },
      "PlaylistItem": {
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "PlaylistId": {
            "format": "int64",
            "type": "integer"
          },
          "order": {
            "format": "int64",
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaylistItemDTO": {
        "properties": {
          "title": {
            "description": "Title is an unused property -- it will be removed in the future",
            "type": "string"
          },
          "type": {
            "description": "Type of the item.",
            "type": "string"
          },
          "value": {
            "description": "Value depends on type and describes the playlist item.\n\ndashboard_by_id: The value is an internal numerical identifier set by Grafana. This\nis not portable as the numerical identifier is non-deterministic between different instances.\nWill be replaced by dashboard_by_uid in the future. (deprecated)\ndashboard_by_tag: The value is a tag which is set on any number of dashboards. All\ndashboards behind the tag will be added to the playlist.\ndashboard_by_uid: The value is the dashboard UID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Playlists": {
        "items": {
          "$ref": "#/components/schemas/Playlist"
        },
        "type": "array"
      },
      "PostAnnotationsCmd": {
        "properties": {
          "dashboardId": {
            "format": "int64",
            "type": "integer"
          },
          "dashboardUID": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Json"
          },
          "panelId": {
            "format": "int64",
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          },
          "timeEnd": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "PostGraphiteAnnotationsCmd": {
        "properties": {
          "data": {
            "type": "string"
          },
          "tags": {},
          "what": {
            "type": "string"
          },
          "when": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PostableApiAlertingConfig": {
        "description": "nolint:revive",
        "properties": {
          "global": {
            "$ref": "#/components/schemas/GlobalConfig"
          },
          "inhibit_rules": {
            "items": {
              "$ref": "#/components/schemas/InhibitRule"
            },
            "type": "array"
          },
          "mute_time_intervals": {
            "description": "MuteTimeIntervals is deprecated and will be removed before Alertmanager 1.0.",
            "items": {
              "$ref": "#/components/schemas/MuteTimeInterval"
            },
            "type": "array"
          },
          "receivers": {
            "description": "Override with our superset receiver type",
            "items": {
              "$ref": "#/components/schemas/PostableApiReceiver"
            },
            "type": "array"
          },
          "route": {
            "$ref": "#/components/schemas/Route"
          },
          "templates": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PostableApiReceiver": {
        "description": "nolint:revive",
        "properties": {
          "discord_configs": {
            "items": {
              "$ref": "#/components/schemas/DiscordConfig"
            },
            "type": "array"
          },
          "email_configs": {
            "items": {
              "$ref": "#/components/schemas/EmailConfig"
            },
            "type": "array"
          },
          "grafana_managed_receiver_configs": {
            "items": {
              "$ref": "#/components/schemas/PostableGrafanaReceiver"
            },
            "type": "array"
          },
          "msteams_configs": {
            "items": {
              "$ref": "#/components/schemas/MSTeamsConfig"
            },
            "type": "array"
          },
          "name": {
            "description": "A unique identifier for this receiver.",
            "type": "string"
          },
          "opsgenie_configs": {
            "items": {
              "$ref": "#/components/schemas/OpsGenieConfig"
            },
            "type": "array"
          },
          "pagerduty_configs": {
            "items": {
              "$ref": "#/components/schemas/PagerdutyConfig"
            },
            "type": "array"
          },
          "pushover_configs": {
            "items": {
              "$ref": "#/components/schemas/PushoverConfig"
            },
            "type": "array"
          },
          "slack_configs": {
            "items": {
              "$ref": "#/components/schemas/SlackConfig"
            },
            "type": "array"
          },
          "sns_configs": {
            "items": {
              "$ref": "#/components/schemas/SNSConfig"
            },
            "type": "array"
          },
          "telegram_configs": {
            "items": {
              "$ref": "#/components/schemas/TelegramConfig"
            },
            "type": "array"
          },
          "victorops_configs": {
            "items": {
              "$ref": "#/components/schemas/VictorOpsConfig"
            },
            "type": "array"
          },
          "webex_configs": {
            "items": {
              "$ref": "#/components/schemas/WebexConfig"
            },
            "type": "array"
          },
          "webhook_configs": {
            "items": {
              "$ref": "#/components/schemas/WebhookConfig"
            },
            "type": "array"
          },
          "wechat_configs": {
            "items": {
              "$ref": "#/components/schemas/WechatConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PostableExtendedRuleNode": {
        "properties": {
          "alert": {
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expr": {
            "type": "string"
          },
          "for": {
            "type": "string"
          },
          "grafana_alert": {
            "$ref": "#/components/schemas/PostableGrafanaRule"
          },
          "keep_firing_for": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "record": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostableExtendedRuleNodeExtended": {
        "properties": {
          "folderTitle": {
            "example": "project_x",
            "type": "string"
          },
          "folderUid": {
            "example": "okrd3I0Vz",
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/PostableExtendedRuleNode"
          },
          "ruleGroup": {
            "example": "eval_group_1",
            "type": "string"
          }
        },
        "required": [
          "rule"
        ],
        "type": "object"
      },
      "PostableGrafanaReceiver": {
        "properties": {
          "disableResolveMessage": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "secureSettings": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "settings": {
            "$ref": "#/components/schemas/RawMessage"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostableGrafanaReceivers": {
        "properties": {
          "grafana_managed_receiver_configs": {
            "items": {
              "$ref": "#/components/schemas/PostableGrafanaReceiver"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PostableGrafanaRule": {
        "properties": {
          "condition": {
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AlertQuery"
            },
            "type": "array"
          },
          "exec_err_state": {
            "enum": [
              "OK",
              "Alerting",
              "Error"
            ],
            "type": "string"
          },
          "is_paused": {
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/AlertRuleMetadata"
          },
          "no_data_state": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ],
            "type": "string"
          },
          "notification_settings": {
            "$ref": "#/components/schemas/AlertRuleNotificationSettings"
          },
          "record": {
            "$ref": "#/components/schemas/Record"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostableNGalertConfig": {
        "properties": {
          "alertmanagersChoice": {
            "enum": [
              "all",
              "internal",
              "external"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostableRuleGroupConfig": {
        "properties": {
          "align_evaluation_time_on_interval": {
            "type": "boolean"
          },
          "evaluation_delay": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration"
          },
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "query_offset": {
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/PostableExtendedRuleNode"
            },
            "type": "array"
          },
          "source_tenants": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PostableTimeIntervals": {
        "properties": {
          "name": {
            "type": "string"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeIntervalItem"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostableUserConfig": {
        "properties": {
          "alertmanager_config": {
            "$ref": "#/components/schemas/PostableApiAlertingConfig"
          },
          "template_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Preferences": {
        "description": "Spec defines user, team or org Grafana preferences",
        "properties": {
          "cookiePreferences": {
            "$ref": "#/components/schemas/CookiePreferences"
          },
          "homeDashboardUID": {
            "description": "UID for the home dashboard",
            "type": "string"
          },
          "language": {
            "description": "Selected language (beta)",
            "type": "string"
          },
          "navbar": {
            "$ref": "#/components/schemas/NavbarPreference"
          },
          "queryHistory": {
            "$ref": "#/components/schemas/QueryHistoryPreference"
          },
          "theme": {
            "description": "Theme light, dark, empty is default",
            "type": "string"
          },
          "timezone": {
            "description": "The timezone selection\nTODO: this should use the timezone defined in common",
            "type": "string"
          },
          "weekStart": {
            "description": "WeekStart day of the week (sunday, monday, etc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrometheusRemoteWriteTargetJSON": {
        "properties": {
          "data_source_uid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "remote_write_path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Provenance": {
        "type": "string"
      },
      "ProvisionedAlertRule": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "runbook_url": "https://supercoolrunbook.com/page/13"
            },
            "type": "object"
          },
          "condition": {
            "example": "A",
            "type": "string"
          },
          "data": {
            "example": [
              {
                "datasourceUid": "__expr__",
                "model": {
                  "conditions": [
                    {
                      "evaluator": {
                        "params": [
                          0,
                          0
                        ],
                        "type": "gt"
                      },
                      "operator": {
                        "type": "and"
                      },
                      "query": {
                        "params": []
                      },
                      "reducer": {
                        "params": [],
                        "type": "avg"
                      },
                      "type": "query"
                    }
                  ],
                  "datasource": {
                    "type": "__expr__",
                    "uid": "__expr__"
                  },
                  "expression": "1 == 1",
                  "hide": false,
                  "intervalMs": 1000,
                  "maxDataPoints": 43200,
                  "refId": "A",
                  "type": "math"
                },
                "queryType": "",
                "refId": "A",
                "relativeTimeRange": {
                  "from": 0,
                  "to": 0
                }
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AlertQuery"
            },
            "type": "array"
          },
          "execErrState": {
            "enum": [
              "OK",
              "Alerting",
              "Error"
            ],
            "type": "string"
          },
          "folderUID": {
            "example": "project_x",
            "type": "string"
          },
          "for": {
            "format": "duration",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isPaused": {
            "example": false,
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "team": "sre-team-1"
            },
            "type": "object"
          },
          "noDataState": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ],
            "type": "string"
          },
          "notification_settings": {
            "$ref": "#/components/schemas/AlertRuleNotificationSettings"
          },
          "orgID": {
            "format": "int64",
            "type": "integer"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "record": {
            "$ref": "#/components/schemas/Record"
          },
          "ruleGroup": {
            "example": "eval_group_1",
            "maxLength": 190,
            "minLength": 1,
            "type": "string"
          },
          "title": {
            "example": "Always firing",
            "maxLength": 190,
            "minLength": 1,
            "type": "string"
          },
          "uid": {
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9-_]+$",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "orgID",
          "folderUID",
          "ruleGroup",
          "title",
          "condition",
          "data",
          "noDataState",
          "execErrState",
          "for"
        ],
        "type": "object"
      },
      "ProvisionedAlertRules": {
        "items": {
          "$ref": "#/components/schemas/ProvisionedAlertRule"
        },
        "type": "array"
      },
      "ProxyConfig": {
        "properties": {
          "no_proxy": {
            "description": "NoProxy contains addresses that should not use a proxy.",
            "type": "string"
          },
          "proxy_connect_header": {
            "$ref": "#/components/schemas/ProxyHeader"
          },
          "proxy_from_environment": {
            "description": "ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function\nto determine proxies.",
            "type": "boolean"
          },
          "proxy_url": {
            "$ref": "#/components/schemas/URL"
          }
        },
        "type": "object"
      },
      "ProxyHeader": {
        "additionalProperties": {
          "items": {
            "$ref": "#/components/schemas/Secret"
          },
          "type": "array"
        },
        "type": "object"
      },
      "PublicDashboard": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "annotationsEnabled": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "format": "int64",
            "type": "integer"
          },
          "dashboardUid": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "recipients": {
            "items": {
              "$ref": "#/components/schemas/EmailDTO"
            },
            "type": "array"
          },
          "share": {
            "$ref": "#/components/schemas/ShareType"
          },
          "timeSelectionEnabled": {
            "type": "boolean"
          },
          "uid": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PublicDashboardDTO": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "annotationsEnabled": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "share": {
            "$ref": "#/components/schemas/ShareType"
          },
          "timeSelectionEnabled": {
            "type": "boolean"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicDashboardListResponse": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "dashboardUid": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicDashboardListResponseWithPagination": {
        "properties": {
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "publicDashboards": {
            "items": {
              "$ref": "#/components/schemas/PublicDashboardListResponse"
            },
            "type": "array"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PublicError": {
        "description": "PublicError is derived from Error and only contains information\navailable to the end user.",
        "properties": {
          "extra": {
            "additionalProperties": {},
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "statusCode": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PublicKeyAlgorithm": {
        "format": "int64",
        "type": "integer"
      },
      "PushoverConfig": {
        "properties": {
          "device": {
            "type": "string"
          },
          "expire": {
            "type": "string"
          },
          "html": {
            "type": "boolean"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "retry": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "sound": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "token": {
            "$ref": "#/components/schemas/Secret"
          },
          "token_file": {
            "type": "string"
          },
          "ttl": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "url_title": {
            "type": "string"
          },
          "user_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "user_key_file": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "QueryDataResponse": {
        "description": "It is the return type of a QueryData call.",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/Responses"
          }
        },
        "title": "QueryDataResponse contains the results from a QueryDataRequest.",
        "type": "object"
      },
      "QueryHistoryDTO": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "createdAt": {
            "format": "int64",
            "type": "integer"
          },
          "createdBy": {
            "format": "int64",
            "type": "integer"
          },
          "datasourceUid": {
            "type": "string"
          },
          "queries": {
            "$ref": "#/components/schemas/Json"
          },
          "starred": {
            "type": "boolean"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "QueryHistoryDeleteQueryResponse": {
        "description": "QueryHistoryDeleteQueryResponse is the response struct for deleting a query from query history",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "QueryHistoryPreference": {
        "properties": {
          "homeTab": {
            "description": "HomeTab one of: '' | 'query' | 'starred';",
            "type": "string"
          }
        },
        "title": "QueryHistoryPreference defines model for QueryHistoryPreference.",
        "type": "object"
      },
      "QueryHistoryResponse": {
        "description": "QueryHistoryResponse is a response struct for QueryHistoryDTO",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/QueryHistoryDTO"
          }
        },
        "type": "object"
      },
      "QueryHistorySearchResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/QueryHistorySearchResult"
          }
        },
        "type": "object"
      },
      "QueryHistorySearchResult": {
        "properties": {
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "queryHistory": {
            "items": {
              "$ref": "#/components/schemas/QueryHistoryDTO"
            },
            "type": "array"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "QueryStat": {
        "description": "The embedded FieldConfig's display name must be set.\nIt corresponds to the QueryResultMetaStat on the frontend (https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L53).",
        "properties": {
          "color": {
            "additionalProperties": {},
            "description": "Map values to a display color\nNOTE: this interface is under development in the frontend... so simple map for now",
            "type": "object"
          },
          "custom": {
            "additionalProperties": {},
            "description": "Panel Specific Values",
            "type": "object"
          },
          "decimals": {
            "format": "uint16",
            "type": "integer"
          },
          "description": {
            "description": "Description is human readable field metadata",
            "type": "string"
          },
          "displayName": {
            "description": "DisplayName overrides Grafana default naming, should not be used from a data source",
            "type": "string"
          },
          "displayNameFromDS": {
            "description": "DisplayNameFromDS overrides Grafana default naming strategy.",
            "type": "string"
          },
          "filterable": {
            "description": "Filterable indicates if the Field's data can be filtered by additional calls.",
            "type": "boolean"
          },
          "interval": {
            "description": "Interval indicates the expected regular step between values in the series.\nWhen an interval exists, consumers can identify \"missing\" values when the expected value is not present.\nThe grafana timeseries visualization will render disconnected values when missing values are found it the time field.\nThe interval uses the same units as the values.  For time.Time, this is defined in milliseconds.",
            "format": "double",
            "type": "number"
          },
          "links": {
            "description": "The behavior when clicking on a result",
            "items": {
              "$ref": "#/components/schemas/DataLink"
            },
            "type": "array"
          },
          "mappings": {
            "$ref": "#/components/schemas/ValueMappings"
          },
          "max": {
            "$ref": "#/components/schemas/ConfFloat64"
          },
          "min": {
            "$ref": "#/components/schemas/ConfFloat64"
          },
          "noValue": {
            "description": "Alternative to empty string",
            "type": "string"
          },
          "path": {
            "description": "Path is an explicit path to the field in the datasource. When the frame meta includes a path,\nthis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used as an identifier to update values in a subsequent request",
            "type": "string"
          },
          "thresholds": {
            "$ref": "#/components/schemas/ThresholdsConfig"
          },
          "type": {
            "$ref": "#/components/schemas/FieldTypeConfig"
          },
          "unit": {
            "description": "Numeric Options",
            "type": "string"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "writeable": {
            "description": "Writeable indicates that the datasource knows how to update this value",
            "type": "boolean"
          }
        },
        "title": "QueryStat is used for storing arbitrary statistics metadata related to a query and its result, e.g. total request time, data processing time.",
        "type": "object"
      },
      "QuotaDTO": {
        "properties": {
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "org_id": {
            "format": "int64",
            "type": "integer"
          },
          "target": {
            "type": "string"
          },
          "used": {
            "format": "int64",
            "type": "integer"
          },
          "user_id": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RawMessage": {
        "type": "object"
      },
      "Receiver": {
        "properties": {
          "discord_configs": {
            "items": {
              "$ref": "#/components/schemas/DiscordConfig"
            },
            "type": "array"
          },
          "email_configs": {
            "items": {
              "$ref": "#/components/schemas/EmailConfig"
            },
            "type": "array"
          },
          "msteams_configs": {
            "items": {
              "$ref": "#/components/schemas/MSTeamsConfig"
            },
            "type": "array"
          },
          "name": {
            "description": "A unique identifier for this receiver.",
            "type": "string"
          },
          "opsgenie_configs": {
            "items": {
              "$ref": "#/components/schemas/OpsGenieConfig"
            },
            "type": "array"
          },
          "pagerduty_configs": {
            "items": {
              "$ref": "#/components/schemas/PagerdutyConfig"
            },
            "type": "array"
          },
          "pushover_configs": {
            "items": {
              "$ref": "#/components/schemas/PushoverConfig"
            },
            "type": "array"
          },
          "slack_configs": {
            "items": {
              "$ref": "#/components/schemas/SlackConfig"
            },
            "type": "array"
          },
          "sns_configs": {
            "items": {
              "$ref": "#/components/schemas/SNSConfig"
            },
            "type": "array"
          },
          "telegram_configs": {
            "items": {
              "$ref": "#/components/schemas/TelegramConfig"
            },
            "type": "array"
          },
          "victorops_configs": {
            "items": {
              "$ref": "#/components/schemas/VictorOpsConfig"
            },
            "type": "array"
          },
          "webex_configs": {
            "items": {
              "$ref": "#/components/schemas/WebexConfig"
            },
            "type": "array"
          },
          "webhook_configs": {
            "items": {
              "$ref": "#/components/schemas/WebhookConfig"
            },
            "type": "array"
          },
          "wechat_configs": {
            "items": {
              "$ref": "#/components/schemas/WechatConfig"
            },
            "type": "array"
          }
        },
        "title": "Receiver configuration provides configuration on how to contact a receiver.",
        "type": "object"
      },
      "ReceiverExport": {
        "properties": {
          "disableResolveMessage": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/RawMessage"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "title": "ReceiverExport is the provisioned file export of alerting.ReceiverV1.",
        "type": "object"
      },
      "Record": {
        "properties": {
          "from": {
            "description": "Which expression node should be used as the input for the recorded metric.",
            "example": "A",
            "type": "string"
          },
          "metric": {
            "description": "Name of the recorded metric.",
            "example": "grafana_alerts_ratio",
            "type": "string"
          }
        },
        "required": [
          "metric",
          "from"
        ],
        "type": "object"
      },
      "RecordingRuleJSON": {
        "description": "RecordingRuleJSON is the external representation of a recording rule",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "count": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "dest_data_source_uid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "interval": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "prom_name": {
            "type": "string"
          },
          "queries": {
            "items": {
              "additionalProperties": {},
              "type": "object"
            },
            "type": "array"
          },
          "range": {
            "format": "int64",
            "type": "integer"
          },
          "target_ref_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelativeTimeRange": {
        "description": "RelativeTimeRange is the per query start and end time\nfor requests.",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Duration"
          },
          "to": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "type": "object"
      },
      "RelativeTimeRangeExport": {
        "properties": {
          "from": {
            "format": "int64",
            "type": "integer"
          },
          "to": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Report": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "dashboards": {
            "items": {
              "$ref": "#/components/schemas/ReportDashboard"
            },
            "type": "array"
          },
          "enableCsv": {
            "type": "boolean"
          },
          "enableDashboardUrl": {
            "type": "boolean"
          },
          "formats": {
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "type": "array"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/ReportOptions"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "recipients": {
            "type": "string"
          },
          "replyTo": {
            "type": "string"
          },
          "scaleFactor": {
            "format": "int64",
            "type": "integer"
          },
          "schedule": {
            "$ref": "#/components/schemas/ReportSchedule"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReportBrandingOptions": {
        "properties": {
          "emailFooterLink": {
            "type": "string"
          },
          "emailFooterMode": {
            "type": "string"
          },
          "emailFooterText": {
            "type": "string"
          },
          "emailLogoUrl": {
            "type": "string"
          },
          "reportLogoUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportDashboard": {
        "properties": {
          "dashboard": {
            "$ref": "#/components/schemas/ReportDashboardID"
          },
          "reportVariables": {
            "type": "object"
          },
          "timeRange": {
            "$ref": "#/components/schemas/ReportTimeRange"
          }
        },
        "type": "object"
      },
      "ReportDashboardID": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportEmail": {
        "properties": {
          "emails": {
            "description": "Comma-separated list of emails to which to send the report to.",
            "type": "string"
          },
          "id": {
            "description": "Send the report to the emails specified in the report. Required if emails is not present.",
            "format": "int64",
            "type": "string"
          },
          "useEmailsFromReport": {
            "description": "Send the report to the emails specified in the report. Required if emails is not present.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportOptions": {
        "properties": {
          "layout": {
            "type": "string"
          },
          "orientation": {
            "type": "string"
          },
          "pdfCombineOneFile": {
            "type": "boolean"
          },
          "pdfShowTemplateVariables": {
            "type": "boolean"
          },
          "timeRange": {
            "$ref": "#/components/schemas/ReportTimeRange"
          }
        },
        "type": "object"
      },
      "ReportSchedule": {
        "properties": {
          "dayOfMonth": {
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "frequency": {
            "type": "string"
          },
          "intervalAmount": {
            "format": "int64",
            "type": "integer"
          },
          "intervalFrequency": {
            "type": "string"
          },
          "startDate": {
            "format": "date-time",
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "workdaysOnly": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportSettings": {
        "properties": {
          "branding": {
            "$ref": "#/components/schemas/ReportBrandingOptions"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReportTimeRange": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResponseDetails": {
        "properties": {
          "msg": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Responses": {
        "additionalProperties": {
          "$ref": "#/components/schemas/DataResponse"
        },
        "description": "The QueryData method the QueryDataHandler method will set the RefId\nproperty on the DataResponses' frames based on these RefIDs.",
        "title": "Responses is a map of RefIDs (Unique Query ID) to DataResponses.",
        "type": "object"
      },
      "RestoreDashboardVersionCommand": {
        "properties": {
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RestoreDeletedDashboardCommand": {
        "properties": {
          "folderUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RevokeAuthTokenCmd": {
        "properties": {
          "authTokenId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RoleAssignmentsDTO": {
        "properties": {
          "role_uid": {
            "type": "string"
          },
          "service_accounts": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "teams": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RoleDTO": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "delegatable": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "group": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RolesSearchQuery": {
        "properties": {
          "includeHidden": {
            "type": "boolean"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "teamIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "userIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Route": {
        "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property.",
        "properties": {
          "active_time_intervals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "continue": {
            "type": "boolean"
          },
          "group_by": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_interval": {
            "type": "string"
          },
          "group_wait": {
            "type": "string"
          },
          "match": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Deprecated. Remove before v1.0 release.",
            "type": "object"
          },
          "match_re": {
            "$ref": "#/components/schemas/MatchRegexps"
          },
          "matchers": {
            "$ref": "#/components/schemas/Matchers"
          },
          "mute_time_intervals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "object_matchers": {
            "$ref": "#/components/schemas/ObjectMatchers"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "receiver": {
            "type": "string"
          },
          "repeat_interval": {
            "type": "string"
          },
          "routes": {
            "items": {
              "$ref": "#/components/schemas/Route"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RouteExport": {
        "description": "RouteExport is the provisioned file export of definitions.Route. This is needed to hide fields that aren't useable in\nprovisioning file format. An alternative would be to define a custom MarshalJSON and MarshalYAML that excludes them.",
        "properties": {
          "continue": {
            "type": "boolean"
          },
          "group_by": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_interval": {
            "type": "string"
          },
          "group_wait": {
            "type": "string"
          },
          "match": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Deprecated. Remove before v1.0 release.",
            "type": "object"
          },
          "match_re": {
            "$ref": "#/components/schemas/MatchRegexps"
          },
          "matchers": {
            "$ref": "#/components/schemas/Matchers"
          },
          "mute_time_intervals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "object_matchers": {
            "$ref": "#/components/schemas/ObjectMatchers"
          },
          "receiver": {
            "type": "string"
          },
          "repeat_interval": {
            "type": "string"
          },
          "routes": {
            "items": {
              "$ref": "#/components/schemas/RouteExport"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Rule": {
        "description": "adapted from cortex",
        "properties": {
          "evaluationTime": {
            "format": "double",
            "type": "number"
          },
          "health": {
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "lastError": {
            "type": "string"
          },
          "lastEvaluation": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "query",
          "health",
          "type"
        ],
        "type": "object"
      },
      "RuleDiscovery": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/RuleGroup"
            },
            "type": "array"
          },
          "totals": {
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            },
            "type": "object"
          }
        },
        "required": [
          "groups"
        ],
        "type": "object"
      },
      "RuleGroup": {
        "properties": {
          "evaluationTime": {
            "format": "double",
            "type": "number"
          },
          "file": {
            "type": "string"
          },
          "interval": {
            "format": "double",
            "type": "number"
          },
          "lastEvaluation": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rules": {
            "description": "In order to preserve rule ordering, while exposing type (alerting or recording)\nspecific properties, both alerting and recording rules are exposed in the\nsame array.",
            "items": {
              "$ref": "#/components/schemas/AlertingRule"
            },
            "type": "array"
          },
          "totals": {
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            },
            "type": "object"
          }
        },
        "required": [
          "name",
          "file",
          "rules",
          "interval"
        ],
        "type": "object"
      },
      "RuleGroupConfigResponse": {
        "properties": {
          "align_evaluation_time_on_interval": {
            "type": "boolean"
          },
          "evaluation_delay": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration"
          },
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "query_offset": {
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/GettableExtendedRuleNode"
            },
            "type": "array"
          },
          "source_tenants": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RuleResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RuleDiscovery"
          },
          "error": {
            "type": "string"
          },
          "errorType": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "SNSConfig": {
        "properties": {
          "api_url": {
            "type": "string"
          },
          "attributes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "sigv4": {
            "$ref": "#/components/schemas/SigV4Config"
          },
          "subject": {
            "type": "string"
          },
          "target_arn": {
            "type": "string"
          },
          "topic_arn": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Sample": {
        "description": "Sample is a single sample belonging to a metric. It represents either a float\nsample or a histogram sample. If H is nil, it is a float sample. Otherwise,\nit is a histogram sample.",
        "properties": {
          "F": {
            "format": "double",
            "type": "number"
          },
          "H": {
            "$ref": "#/components/schemas/FloatHistogram"
          },
          "Metric": {
            "$ref": "#/components/schemas/Labels"
          },
          "T": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SaveDashboardCommand": {
        "properties": {
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "dashboard": {
            "$ref": "#/components/schemas/Json"
          },
          "folderId": {
            "description": "Deprecated: use FolderUID instead",
            "format": "int64",
            "type": "integer"
          },
          "folderUid": {
            "type": "string"
          },
          "isFolder": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "overwrite": {
            "type": "boolean"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchDTO": {
        "properties": {
          "action": {
            "type": "string"
          },
          "basicRole": {
            "type": "string"
          },
          "onlyRoles": {
            "type": "boolean"
          },
          "roleName": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchDeviceQueryResult": {
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/DeviceSearchHitDTO"
            },
            "type": "array"
          },
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchOrgServiceAccountsResult": {
        "description": "swagger: model",
        "properties": {
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "serviceAccounts": {
            "items": {
              "$ref": "#/components/schemas/ServiceAccountDTO"
            },
            "type": "array"
          },
          "totalCount": {
            "description": "It can be used for pagination of the user list\nE.g. if totalCount is equal to 100 users and\nthe perpage parameter is set to 10 then there are 10 pages of users.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchOrgUsersQueryResult": {
        "properties": {
          "orgUsers": {
            "items": {
              "$ref": "#/components/schemas/OrgUserDTO"
            },
            "type": "array"
          },
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchResult": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/SearchResultItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchResultItem": {
        "properties": {
          "action": {
            "type": "string"
          },
          "basicRole": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "roleName": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchTeamQueryResult": {
        "properties": {
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/TeamDTO"
            },
            "type": "array"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchUserQueryResult": {
        "properties": {
          "page": {
            "format": "int64",
            "type": "integer"
          },
          "perPage": {
            "format": "int64",
            "type": "integer"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserSearchHitDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Secret": {
        "title": "Secret special type for storing secrets.",
        "type": "string"
      },
      "SecretURL": {
        "$ref": "#/components/schemas/URL"
      },
      "ServiceAccountDTO": {
        "description": "swagger: model",
        "properties": {
          "accessControl": {
            "additionalProperties": {
              "type": "boolean"
            },
            "example": {
              "serviceaccounts:delete": true,
              "serviceaccounts:read": true,
              "serviceaccounts:write": true
            },
            "type": "object"
          },
          "avatarUrl": {
            "example": "/avatar/85ec38023d90823d3e5b43ef35646af9",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isDisabled": {
            "example": false,
            "type": "boolean"
          },
          "isExternal": {
            "example": false,
            "type": "boolean"
          },
          "login": {
            "example": "sa-grafana",
            "type": "string"
          },
          "name": {
            "example": "grafana",
            "type": "string"
          },
          "orgId": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "role": {
            "example": "Viewer",
            "type": "string"
          },
          "tokens": {
            "example": 0,
            "format": "int64",
            "type": "integer"
          },
          "uid": {
            "example": "fe1xejlha91xce",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceAccountProfileDTO": {
        "properties": {
          "accessControl": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "avatarUrl": {
            "example": "/avatar/8ea890a677d6a223c591a1beea6ea9d2",
            "type": "string"
          },
          "createdAt": {
            "example": "2022-03-21T14:35:33Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int64",
            "type": "integer"
          },
          "isDisabled": {
            "example": false,
            "type": "boolean"
          },
          "isExternal": {
            "example": false,
            "type": "boolean"
          },
          "login": {
            "example": "sa-grafana",
            "type": "string"
          },
          "name": {
            "example": "test",
            "type": "string"
          },
          "orgId": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "requiredBy": {
            "example": "grafana-app",
            "type": "string"
          },
          "role": {
            "example": "Editor",
            "type": "string"
          },
          "teams": {
            "example": [],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tokens": {
            "format": "int64",
            "type": "integer"
          },
          "uid": {
            "example": "fe1xejlha91xce",
            "type": "string"
          },
          "updatedAt": {
            "example": "2022-03-21T14:35:33Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetResourcePermissionCommand": {
        "properties": {
          "builtInRole": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SetRoleAssignmentsCommand": {
        "properties": {
          "service_accounts": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "teams": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SetTeamMembershipsCommand": {
        "properties": {
          "admins": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "members": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SetUserRolesCommand": {
        "properties": {
          "global": {
            "type": "boolean"
          },
          "includeHidden": {
            "type": "boolean"
          },
          "roleUids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SettingsBag": {
        "additionalProperties": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "type": "object"
      },
      "ShareType": {
        "type": "string"
      },
      "SigV4Config": {
        "description": "SigV4Config is the configuration for signing remote write requests with\nAWS's SigV4 verification process. Empty values will be retrieved using the\nAWS default credentials chain.",
        "properties": {
          "AccessKey": {
            "type": "string"
          },
          "Profile": {
            "type": "string"
          },
          "Region": {
            "type": "string"
          },
          "RoleARN": {
            "type": "string"
          },
          "SecretKey": {
            "$ref": "#/components/schemas/Secret"
          }
        },
        "type": "object"
      },
      "SignatureAlgorithm": {
        "format": "int64",
        "type": "integer"
      },
      "SilenceMetadata": {
        "properties": {
          "folder_uid": {
            "type": "string"
          },
          "rule_title": {
            "type": "string"
          },
          "rule_uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlackAction": {
        "description": "See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons\nfor more information.",
        "properties": {
          "confirm": {
            "$ref": "#/components/schemas/SlackConfirmationField"
          },
          "name": {
            "type": "string"
          },
          "style": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "SlackAction configures a single Slack action that is sent with each notification.",
        "type": "object"
      },
      "SlackConfig": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/SlackAction"
            },
            "type": "array"
          },
          "api_url": {
            "$ref": "#/components/schemas/SecretURL"
          },
          "api_url_file": {
            "type": "string"
          },
          "callback_id": {
            "type": "string"
          },
          "channel": {
            "description": "Slack channel override, (like #other-channel or @username).",
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "fallback": {
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/SlackField"
            },
            "type": "array"
          },
          "footer": {
            "type": "string"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "icon_emoji": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "link_names": {
            "type": "boolean"
          },
          "mrkdwn_in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pretext": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "short_fields": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "thumb_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "title_link": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "SlackConfig configures notifications via Slack.",
        "type": "object"
      },
      "SlackConfirmationField": {
        "description": "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions\nby asking them to confirm their button click one more time.\nSee https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
        "properties": {
          "dismiss_text": {
            "type": "string"
          },
          "ok_text": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlackField": {
        "description": "Each field must contain a title, value, and optionally, a boolean value to indicate if the field\nis short enough to be displayed next to other fields designated as short.\nSee https://api.slack.com/docs/message-attachments#fields for more information.",
        "properties": {
          "short": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "SlackField configures a single Slack field that is sent with each notification.",
        "type": "object"
      },
      "SmtpNotEnabled": {
        "$ref": "#/components/schemas/ResponseDetails"
      },
      "SnapshotDTO": {
        "description": "Base snapshot without results",
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "finished": {
            "format": "date-time",
            "type": "string"
          },
          "sessionUid": {
            "type": "string"
          },
          "status": {
            "enum": [
              "INITIALIZING",
              "CREATING",
              "PENDING_UPLOAD",
              "UPLOADING",
              "PENDING_PROCESSING",
              "PROCESSING",
              "FINISHED",
              "CANCELED",
              "ERROR",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SnapshotListResponseDTO": {
        "properties": {
          "snapshots": {
            "items": {
              "$ref": "#/components/schemas/SnapshotDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SnapshotResourceStats": {
        "properties": {
          "statuses": {
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            },
            "type": "object"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          },
          "types": {
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Source": {
        "title": "Source type defines the status source.",
        "type": "string"
      },
      "Span": {
        "properties": {
          "Length": {
            "description": "Length of the span.",
            "format": "uint32",
            "type": "integer"
          },
          "Offset": {
            "description": "Gap to previous span (always positive), or starting index for the 1st\nspan (which can be negative).",
            "format": "int32",
            "type": "integer"
          }
        },
        "title": "A Span defines a continuous sequence of buckets.",
        "type": "object"
      },
      "State": {
        "description": "+enum",
        "type": "string"
      },
      "Status": {
        "format": "int64",
        "type": "integer"
      },
      "Success": {
        "$ref": "#/components/schemas/ResponseDetails"
      },
      "SuccessResponseBody": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SupportedTransformationTypes": {
        "type": "string"
      },
      "SyncResult": {
        "properties": {
          "Elapsed": {
            "$ref": "#/components/schemas/Duration"
          },
          "FailedUsers": {
            "items": {
              "$ref": "#/components/schemas/FailedUser"
            },
            "type": "array"
          },
          "MissingUserIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "Started": {
            "format": "date-time",
            "type": "string"
          },
          "UpdatedUserIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "title": "SyncResult holds the result of a sync with LDAP. This gives us information on which users were updated and how.",
        "type": "object"
      },
      "TLSConfig": {
        "properties": {
          "ca": {
            "description": "Text of the CA cert to use for the targets.",
            "type": "string"
          },
          "ca_file": {
            "description": "The CA cert to use for the targets.",
            "type": "string"
          },
          "ca_ref": {
            "description": "CARef is the name of the secret within the secret manager to use as the CA cert for the\ntargets.",
            "type": "string"
          },
          "cert": {
            "description": "Text of the client cert file for the targets.",
            "type": "string"
          },
          "cert_file": {
            "description": "The client cert file for the targets.",
            "type": "string"
          },
          "cert_ref": {
            "description": "CertRef is the name of the secret within the secret manager to use as the client cert for\nthe targets.",
            "type": "string"
          },
          "insecure_skip_verify": {
            "description": "Disable target certificate validation.",
            "type": "boolean"
          },
          "key": {
            "$ref": "#/components/schemas/Secret"
          },
          "key_file": {
            "description": "The client key file for the targets.",
            "type": "string"
          },
          "key_ref": {
            "description": "KeyRef is the name of the secret within the secret manager to use as the client key for\nthe targets.",
            "type": "string"
          },
          "max_version": {
            "$ref": "#/components/schemas/TLSVersion"
          },
          "min_version": {
            "$ref": "#/components/schemas/TLSVersion"
          },
          "server_name": {
            "description": "Used to verify the hostname for the targets.",
            "type": "string"
          }
        },
        "title": "TLSConfig configures the options for TLS connections.",
        "type": "object"
      },
      "TLSVersion": {
        "format": "uint16",
        "type": "integer"
      },
      "TagsDTO": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "tag": {
            "type": "string"
          }
        },
        "title": "TagsDTO is the frontend DTO for Tag.",
        "type": "object"
      },
      "TeamDTO": {
        "properties": {
          "accessControl": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "avatarUrl": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "memberCount": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionType"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamGroupDTO": {
        "properties": {
          "groupId": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TeamGroupMapping": {
        "properties": {
          "groupId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamLBACRule": {
        "properties": {
          "rules": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "teamId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamLBACRules": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/TeamLBACRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TeamMemberDTO": {
        "properties": {
          "auth_module": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionType"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          },
          "teamUID": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TelegramConfig": {
        "properties": {
          "api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "chat": {
            "format": "int64",
            "type": "integer"
          },
          "disable_notifications": {
            "type": "boolean"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "parse_mode": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "token": {
            "$ref": "#/components/schemas/Secret"
          },
          "token_file": {
            "type": "string"
          }
        },
        "title": "TelegramConfig configures notifications via Telegram.",
        "type": "object"
      },
      "TempUserDTO": {
        "properties": {
          "code": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailSent": {
            "type": "boolean"
          },
          "emailSentOn": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "invitedByEmail": {
            "type": "string"
          },
          "invitedByLogin": {
            "type": "string"
          },
          "invitedByName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TempUserStatus"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TempUserStatus": {
        "type": "string"
      },
      "TestReceiverConfigResult": {
        "properties": {
          "error": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestReceiverResult": {
        "properties": {
          "grafana_managed_receiver_configs": {
            "items": {
              "$ref": "#/components/schemas/TestReceiverConfigResult"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestReceiversConfigAlertParams": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/LabelSet"
          },
          "labels": {
            "$ref": "#/components/schemas/LabelSet"
          }
        },
        "type": "object"
      },
      "TestReceiversConfigBodyParams": {
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/TestReceiversConfigAlertParams"
          },
          "receivers": {
            "items": {
              "$ref": "#/components/schemas/PostableApiReceiver"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TestReceiversResult": {
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/TestReceiversConfigAlertParams"
          },
          "notified_at": {
            "format": "date-time",
            "type": "string"
          },
          "receivers": {
            "items": {
              "$ref": "#/components/schemas/TestReceiverResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TestRulePayload": {
        "properties": {
          "expr": {
            "example": "(node_filesystem_avail_bytes{fstype!=\"\",job=\"integrations/node_exporter\"} node_filesystem_size_bytes{fstype!=\"\",job=\"integrations/node_exporter\"} * 100 \u003c 5 and node_filesystem_readonly{fstype!=\"\",job=\"integrations/node_exporter\"} == 0)",
            "type": "string"
          },
          "grafana_condition": {
            "$ref": "#/components/schemas/EvalAlertConditionCommand"
          }
        },
        "type": "object"
      },
      "TestRuleResponse": {
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/Vector"
          },
          "grafana_alert_instances": {
            "$ref": "#/components/schemas/AlertInstancesResponse"
          }
        },
        "type": "object"
      },
      "TestTemplatesConfigBodyParams": {
        "properties": {
          "alerts": {
            "description": "Alerts to use as data when testing the template.",
            "items": {
              "$ref": "#/components/schemas/postableAlert"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the template file.",
            "type": "string"
          },
          "template": {
            "description": "Template string to test.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestTemplatesErrorResult": {
        "properties": {
          "kind": {
            "description": "Kind of template error that occurred.",
            "enum": [
              "invalid_template",
              "execution_error"
            ],
            "type": "string"
          },
          "message": {
            "description": "Error message.",
            "type": "string"
          },
          "name": {
            "description": "Name of the associated template for this error. Will be empty if the Kind is \"invalid_template\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestTemplatesResult": {
        "properties": {
          "name": {
            "description": "Name of the associated template definition for this result.",
            "type": "string"
          },
          "text": {
            "description": "Interpolated value of the template.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestTemplatesResults": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/TestTemplatesErrorResult"
            },
            "type": "array"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/TestTemplatesResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Threshold": {
        "description": "Threshold a single step on the threshold list",
        "properties": {
          "color": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ConfFloat64"
          }
        },
        "type": "object"
      },
      "ThresholdsConfig": {
        "description": "ThresholdsConfig setup thresholds",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ThresholdsMode"
          },
          "steps": {
            "description": "Must be sorted by 'value', first value is always -Infinity",
            "items": {
              "$ref": "#/components/schemas/Threshold"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ThresholdsMode": {
        "description": "ThresholdsMode absolute or percentage",
        "type": "string"
      },
      "TimeInterval": {
        "properties": {
          "name": {
            "type": "string"
          },
          "time_intervals": {
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            },
            "type": "array"
          }
        },
        "title": "TimeInterval represents a named set of time intervals for which a route should be muted.",
        "type": "object"
      },
      "TimeIntervalItem": {
        "properties": {
          "days_of_month": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "location": {
            "type": "string"
          },
          "months": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "times": {
            "items": {
              "$ref": "#/components/schemas/TimeIntervalTimeRange"
            },
            "type": "array"
          },
          "weekdays": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "years": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TimeIntervalTimeRange": {
        "properties": {
          "end_time": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeRange": {
        "description": "Redefining this to avoid an import cycle",
        "properties": {
          "from": {
            "format": "date-time",
            "type": "string"
          },
          "to": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Token": {
        "properties": {
          "account": {
            "type": "string"
          },
          "anonymousRatio": {
            "format": "int64",
            "type": "integer"
          },
          "company": {
            "type": "string"
          },
          "details_url": {
            "type": "string"
          },
          "exp": {
            "format": "int64",
            "type": "integer"
          },
          "iat": {
            "format": "int64",
            "type": "integer"
          },
          "included_users": {
            "format": "int64",
            "type": "integer"
          },
          "iss": {
            "type": "string"
          },
          "jti": {
            "type": "string"
          },
          "lexp": {
            "format": "int64",
            "type": "integer"
          },
          "lic_exp_warn_days": {
            "format": "int64",
            "type": "integer"
          },
          "lid": {
            "type": "string"
          },
          "limit_by": {
            "type": "string"
          },
          "max_concurrent_user_sessions": {
            "format": "int64",
            "type": "integer"
          },
          "nbf": {
            "format": "int64",
            "type": "integer"
          },
          "prod": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "slug": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TokenStatus"
          },
          "sub": {
            "type": "string"
          },
          "tok_exp_warn_days": {
            "format": "int64",
            "type": "integer"
          },
          "trial": {
            "type": "boolean"
          },
          "trial_exp": {
            "format": "int64",
            "type": "integer"
          },
          "update_days": {
            "format": "int64",
            "type": "integer"
          },
          "usage_billing": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TokenDTO": {
        "properties": {
          "created": {
            "example": "2022-03-23T10:31:02Z",
            "format": "date-time",
            "type": "string"
          },
          "expiration": {
            "example": "2022-03-23T10:31:02Z",
            "format": "date-time",
            "type": "string"
          },
          "hasExpired": {
            "example": false,
            "type": "boolean"
          },
          "id": {
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "isRevoked": {
            "example": false,
            "type": "boolean"
          },
          "lastUsedAt": {
            "example": "2022-03-23T10:31:02Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "grafana",
            "type": "string"
          },
          "secondsUntilExpiration": {
            "example": 0,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "TokenStatus": {
        "format": "int64",
        "type": "integer"
      },
      "Transformation": {
        "properties": {
          "expression": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "mapValue": {
            "type": "string"
          },
          "type": {
            "enum": [
              "regex",
              "logfmt"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transformations": {
        "items": {
          "$ref": "#/components/schemas/Transformation"
        },
        "type": "array"
      },
      "Type": {
        "description": "+enum",
        "type": "string"
      },
      "TypeMeta": {
        "description": "+k8s:deepcopy-gen=false",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
            "type": "string"
          }
        },
        "title": "TypeMeta describes an individual object in an API response or request\nwith strings representing the type of the object and its API schema version.\nStructures that are versioned or persisted should inline TypeMeta.",
        "type": "object"
      },
      "URL": {
        "description": "The general form represented is:\n\n[scheme:][//[userinfo@]host][/]path[?query][#fragment]\n\nURLs that do not start with a slash after the scheme are interpreted as:\n\nscheme:opaque[?query][#fragment]\n\nThe Host field contains the host and port subcomponents of the URL.\nWhen the port is present, it is separated from the host with a colon.\nWhen the host is an IPv6 address, it must be enclosed in square brackets:\n\"[fe80::1]:80\". The [net.JoinHostPort] function combines a host and port\ninto a string suitable for the Host field, adding square brackets to\nthe host when necessary.\n\nNote that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.\nA consequence is that it is impossible to tell which slashes in the Path were\nslashes in the raw URL and which were %2f. This distinction is rarely important,\nbut when it is, the code should use the [URL.EscapedPath] method, which preserves\nthe original encoding of Path.\n\nThe RawPath field is an optional field which is only set when the default\nencoding of Path is different from the escaped path. See the EscapedPath method\nfor more details.\n\nURL's String method uses the EscapedPath method to obtain the path.",
        "properties": {
          "ForceQuery": {
            "type": "boolean"
          },
          "Fragment": {
            "type": "string"
          },
          "Host": {
            "type": "string"
          },
          "OmitHost": {
            "type": "boolean"
          },
          "Opaque": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "RawFragment": {
            "type": "string"
          },
          "RawPath": {
            "type": "string"
          },
          "RawQuery": {
            "type": "string"
          },
          "Scheme": {
            "type": "string"
          },
          "User": {
            "$ref": "#/components/schemas/Userinfo"
          }
        },
        "title": "A URL represents a parsed URL (technically, a URI reference).",
        "type": "object"
      },
      "Unstructured": {
        "description": "Unstructured allows objects that do not have Golang structs registered to be manipulated\ngenerically.",
        "properties": {
          "Object": {
            "additionalProperties": {},
            "description": "Object is a JSON compatible map with string, float, int, bool, []interface{},\nor map[string]interface{} children.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "UpdateAnnotationsCmd": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Json"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          },
          "timeEnd": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateCorrelationCommand": {
        "description": "UpdateCorrelationCommand is the command for updating a correlation",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/CorrelationConfigUpdateDTO"
          },
          "description": {
            "description": "Optional description of the correlation",
            "example": "Logs to Traces",
            "type": "string"
          },
          "label": {
            "description": "Optional label identifying the correlation",
            "example": "My label",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CorrelationType"
          }
        },
        "type": "object"
      },
      "UpdateCorrelationResponseBody": {
        "properties": {
          "message": {
            "example": "Correlation updated",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/Correlation"
          }
        },
        "type": "object"
      },
      "UpdateDashboardACLCommand": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DashboardACLUpdateItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateDataSourceCommand": {
        "description": "Also acts as api DTO",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/DsAccess"
          },
          "basicAuth": {
            "type": "boolean"
          },
          "basicAuthUser": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "jsonData": {
            "$ref": "#/components/schemas/Json"
          },
          "name": {
            "type": "string"
          },
          "secureJsonData": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          },
          "withCredentials": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateFolderCommand": {
        "description": "UpdateFolderCommand captures the information required by the folder service\nto update a folder. Use Move to update a folder's parent folder.",
        "properties": {
          "description": {
            "description": "NewDescription it's an optional parameter used for overriding the existing folder description",
            "type": "string"
          },
          "overwrite": {
            "description": "Overwrite only used by the legacy folder implementation",
            "type": "boolean"
          },
          "title": {
            "description": "NewTitle it's an optional parameter used for overriding the existing folder title",
            "type": "string"
          },
          "version": {
            "description": "Version only used by the legacy folder implementation",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateOrgAddressForm": {
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zipcode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateOrgForm": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateOrgUserCommand": {
        "properties": {
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePlaylistCommand": {
        "properties": {
          "interval": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PlaylistItem"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePrefsCmd": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/CookieType"
            },
            "type": "array"
          },
          "homeDashboardId": {
            "default": 0,
            "description": "The numerical :id of a favorited dashboard",
            "format": "int64",
            "type": "integer"
          },
          "homeDashboardUID": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "navbar": {
            "$ref": "#/components/schemas/NavbarPreference"
          },
          "queryHistory": {
            "$ref": "#/components/schemas/QueryHistoryPreference"
          },
          "theme": {
            "enum": [
              "light",
              "dark",
              "system"
            ],
            "type": "string"
          },
          "timezone": {
            "enum": [
              "utc",
              "browser"
            ],
            "type": "string"
          },
          "weekStart": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateQuotaCmd": {
        "properties": {
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "target": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateRoleCommand": {
        "properties": {
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "group": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateRuleGroupResponse": {
        "properties": {
          "created": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deleted": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "message": {
            "type": "string"
          },
          "updated": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateServiceAccountForm": {
        "properties": {
          "isDisabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          },
          "serviceAccountId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateTeamCommand": {
        "properties": {
          "Email": {
            "type": "string"
          },
          "ID": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateTeamLBACCommand": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/TeamLBACRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateTeamMemberCommand": {
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionType"
          }
        },
        "type": "object"
      },
      "UpdateUserCommand": {
        "properties": {
          "email": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserLookupDTO": {
        "properties": {
          "avatarUrl": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserOrgDTO": {
        "properties": {
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "role": {
            "enum": [
              "None",
              "Viewer",
              "Editor",
              "Admin"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserProfileDTO": {
        "properties": {
          "accessControl": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "authLabels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "avatarUrl": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isExternal": {
            "type": "boolean"
          },
          "isExternallySynced": {
            "type": "boolean"
          },
          "isGrafanaAdmin": {
            "type": "boolean"
          },
          "isGrafanaAdminExternallySynced": {
            "type": "boolean"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "format": "int64",
            "type": "integer"
          },
          "theme": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserSearchHitDTO": {
        "properties": {
          "authLabels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "avatarUrl": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "lastSeenAt": {
            "format": "date-time",
            "type": "string"
          },
          "lastSeenAtAge": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserToken": {
        "description": "UserToken represents a user token",
        "properties": {
          "AuthToken": {
            "type": "string"
          },
          "AuthTokenSeen": {
            "type": "boolean"
          },
          "ClientIp": {
            "type": "string"
          },
          "CreatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "ExternalSessionId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "PrevAuthToken": {
            "type": "string"
          },
          "RevokedAt": {
            "format": "int64",
            "type": "integer"
          },
          "RotatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "SeenAt": {
            "format": "int64",
            "type": "integer"
          },
          "UnhashedToken": {
            "type": "string"
          },
          "UpdatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "UserAgent": {
            "type": "string"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Userinfo": {
        "description": "The Userinfo type is an immutable encapsulation of username and\npassword details for a [URL]. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.",
        "type": "object"
      },
      "ValidationError": {
        "properties": {
          "message": {
            "example": "error message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValueMapping": {
        "description": "ValueMapping allows mapping input values to text and color",
        "type": "object"
      },
      "ValueMappings": {
        "items": {
          "$ref": "#/components/schemas/ValueMapping"
        },
        "type": "array"
      },
      "Vector": {
        "description": "Vector is basically only an alias for []Sample, but the contract is that\nin a Vector, all Samples have the same timestamp.",
        "items": {
          "$ref": "#/components/schemas/Sample"
        },
        "type": "array"
      },
      "VictorOpsConfig": {
        "properties": {
          "api_key": {
            "$ref": "#/components/schemas/Secret"
          },
          "api_key_file": {
            "type": "string"
          },
          "api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "custom_fields": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "entity_display_name": {
            "type": "string"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message_type": {
            "type": "string"
          },
          "monitoring_tool": {
            "type": "string"
          },
          "routing_key": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "state_message": {
            "type": "string"
          }
        },
        "title": "VictorOpsConfig configures notifications via VictorOps.",
        "type": "object"
      },
      "VisType": {
        "title": "VisType is used to indicate how the data should be visualized in explore.",
        "type": "string"
      },
      "WebexConfig": {
        "properties": {
          "api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "room_id": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          }
        },
        "title": "WebexConfig configures notifications via Webex.",
        "type": "object"
      },
      "WebhookConfig": {
        "properties": {
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "max_alerts": {
            "description": "MaxAlerts is the maximum number of alerts to be sent per webhook message.\nAlerts exceeding this threshold will be truncated. Setting this to 0\nallows an unlimited number of alerts.",
            "format": "uint64",
            "type": "integer"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "url": {
            "$ref": "#/components/schemas/SecretURL"
          },
          "url_file": {
            "type": "string"
          }
        },
        "title": "WebhookConfig configures notifications via a generic webhook.",
        "type": "object"
      },
      "WechatConfig": {
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "api_secret": {
            "$ref": "#/components/schemas/Secret"
          },
          "api_url": {
            "$ref": "#/components/schemas/URL"
          },
          "corp_id": {
            "type": "string"
          },
          "http_config": {
            "$ref": "#/components/schemas/HTTPClientConfig"
          },
          "message": {
            "type": "string"
          },
          "message_type": {
            "type": "string"
          },
          "send_resolved": {
            "type": "boolean"
          },
          "to_party": {
            "type": "string"
          },
          "to_tag": {
            "type": "string"
          },
          "to_user": {
            "type": "string"
          }
        },
        "title": "WechatConfig configures notifications via Wechat.",
        "type": "object"
      },
      "alert": {
        "description": "Alert alert",
        "properties": {
          "generatorURL": {
            "description": "generator URL\nFormat: uri",
            "format": "uri",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labelSet"
          }
        },
        "required": [
          "labels"
        ],
        "type": "object"
      },
      "alertGroup": {
        "description": "AlertGroup alert group",
        "properties": {
          "alerts": {
            "description": "alerts",
            "items": {
              "$ref": "#/components/schemas/gettableAlert"
            },
            "type": "array"
          },
          "labels": {
            "$ref": "#/components/schemas/labelSet"
          },
          "receiver": {
            "$ref": "#/components/schemas/receiver"
          }
        },
        "required": [
          "alerts",
          "labels",
          "receiver"
        ],
        "type": "object"
      },
      "alertGroups": {
        "items": {
          "$ref": "#/components/schemas/alertGroup"
        },
        "type": "array"
      },
      "alertStatus": {
        "description": "AlertStatus alert status",
        "properties": {
          "inhibitedBy": {
            "description": "inhibited by",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "silencedBy": {
            "description": "silenced by",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "description": "state",
            "enum": [
              "[unprocessed active suppressed]"
            ],
            "type": "string"
          }
        },
        "required": [
          "inhibitedBy",
          "silencedBy",
          "state"
        ],
        "type": "object"
      },
      "alertmanagerConfig": {
        "description": "AlertmanagerConfig alertmanager config",
        "properties": {
          "original": {
            "description": "original",
            "type": "string"
          }
        },
        "required": [
          "original"
        ],
        "type": "object"
      },
      "alertmanagerStatus": {
        "description": "AlertmanagerStatus alertmanager status",
        "properties": {
          "cluster": {
            "$ref": "#/components/schemas/clusterStatus"
          },
          "config": {
            "$ref": "#/components/schemas/alertmanagerConfig"
          },
          "uptime": {
            "description": "uptime",
            "format": "date-time",
            "type": "string"
          },
          "versionInfo": {
            "$ref": "#/components/schemas/versionInfo"
          }
        },
        "required": [
          "cluster",
          "config",
          "uptime",
          "versionInfo"
        ],
        "type": "object"
      },
      "clusterStatus": {
        "description": "ClusterStatus cluster status",
        "properties": {
          "name": {
            "description": "name",
            "type": "string"
          },
          "peers": {
            "description": "peers",
            "items": {
              "$ref": "#/components/schemas/peerStatus"
            },
            "type": "array"
          },
          "status": {
            "description": "status",
            "enum": [
              "[ready settling disabled]"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "deviceDTO": {
        "properties": {
          "avatarUrl": {
            "type": "string"
          },
          "clientIp": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "lastSeenAt": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "getGroupMappings": {
        "properties": {
          "mappings": {
            "items": {
              "$ref": "#/components/schemas/GroupMapping"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "getGroupsResponse": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "gettableAlert": {
        "description": "GettableAlert gettable alert",
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/labelSet"
          },
          "endsAt": {
            "description": "ends at",
            "format": "date-time",
            "type": "string"
          },
          "fingerprint": {
            "description": "fingerprint",
            "type": "string"
          },
          "generatorURL": {
            "description": "generator URL\nFormat: uri",
            "format": "uri",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labelSet"
          },
          "receivers": {
            "description": "receivers",
            "items": {
              "$ref": "#/components/schemas/receiver"
            },
            "type": "array"
          },
          "startsAt": {
            "description": "starts at",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/alertStatus"
          },
          "updatedAt": {
            "description": "updated at",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "labels",
          "annotations",
          "endsAt",
          "fingerprint",
          "receivers",
          "startsAt",
          "status",
          "updatedAt"
        ],
        "type": "object"
      },
      "gettableAlerts": {
        "items": {
          "$ref": "#/components/schemas/gettableAlert"
        },
        "type": "array"
      },
      "gettableGrafanaSilence": {
        "properties": {
          "accessControl": {
            "additionalProperties": {
              "type": "boolean"
            },
            "example": {
              "create": false,
              "read": true,
              "write": false
            },
            "type": "object"
          },
          "comment": {
            "description": "comment",
            "type": "string"
          },
          "createdBy": {
            "description": "created by",
            "type": "string"
          },
          "endsAt": {
            "description": "ends at",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "id",
            "type": "string"
          },
          "matchers": {
            "$ref": "#/components/schemas/matchers"
          },
          "metadata": {
            "$ref": "#/components/schemas/SilenceMetadata"
          },
          "startsAt": {
            "description": "starts at",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/silenceStatus"
          },
          "updatedAt": {
            "description": "updated at",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "comment",
          "createdBy",
          "endsAt",
          "matchers",
          "startsAt",
          "id",
          "status",
          "updatedAt"
        ],
        "type": "object"
      },
      "gettableGrafanaSilences": {
        "items": {
          "$ref": "#/components/schemas/gettableGrafanaSilence"
        },
        "type": "array"
      },
      "gettableSilence": {
        "description": "GettableSilence gettable silence",
        "properties": {
          "comment": {
            "description": "comment",
            "type": "string"
          },
          "createdBy": {
            "description": "created by",
            "type": "string"
          },
          "endsAt": {
            "description": "ends at",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "id",
            "type": "string"
          },
          "matchers": {
            "$ref": "#/components/schemas/matchers"
          },
          "startsAt": {
            "description": "starts at",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/silenceStatus"
          },
          "updatedAt": {
            "description": "updated at",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "comment",
          "createdBy",
          "endsAt",
          "matchers",
          "startsAt",
          "id",
          "status",
          "updatedAt"
        ],
        "type": "object"
      },
      "gettableSilences": {
        "items": {
          "$ref": "#/components/schemas/gettableSilence"
        },
        "type": "array"
      },
      "groupMappingRequestBody": {
        "properties": {
          "groupID": {
            "type": "string"
          },
          "mapping": {
            "type": "object"
          },
          "variant": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "healthResponse": {
        "properties": {
          "commit": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "enterpriseCommit": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "labelSet": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "LabelSet label set",
        "type": "object"
      },
      "matcher": {
        "description": "Matcher matcher",
        "properties": {
          "isEqual": {
            "description": "is equal",
            "type": "boolean"
          },
          "isRegex": {
            "description": "is regex",
            "type": "boolean"
          },
          "name": {
            "description": "name",
            "type": "string"
          },
          "value": {
            "description": "value",
            "type": "string"
          }
        },
        "required": [
          "isRegex",
          "name",
          "value"
        ],
        "type": "object"
      },
      "matchers": {
        "description": "Matchers matchers",
        "items": {
          "$ref": "#/components/schemas/matcher"
        },
        "type": "array"
      },
      "messageResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "peerStatus": {
        "description": "PeerStatus peer status",
        "properties": {
          "address": {
            "description": "address",
            "type": "string"
          },
          "name": {
            "description": "name",
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ],
        "type": "object"
      },
      "postSilencesOKBody": {
        "properties": {
          "silenceID": {
            "description": "silence ID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postableAlert": {
        "description": "PostableAlert postable alert",
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/labelSet"
          },
          "endsAt": {
            "description": "ends at\nFormat: date-time",
            "format": "date-time",
            "type": "string"
          },
          "generatorURL": {
            "description": "generator URL\nFormat: uri",
            "format": "uri",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labelSet"
          },
          "startsAt": {
            "description": "starts at\nFormat: date-time",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "labels"
        ],
        "type": "object"
      },
      "postableAlerts": {
        "description": "PostableAlerts postable alerts",
        "items": {
          "$ref": "#/components/schemas/postableAlert"
        },
        "type": "array"
      },
      "postableSilence": {
        "description": "PostableSilence postable silence",
        "properties": {
          "comment": {
            "description": "comment",
            "type": "string"
          },
          "createdBy": {
            "description": "created by",
            "type": "string"
          },
          "endsAt": {
            "description": "ends at",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "id",
            "type": "string"
          },
          "matchers": {
            "$ref": "#/components/schemas/matchers"
          },
          "startsAt": {
            "description": "starts at",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "comment",
          "createdBy",
          "endsAt",
          "matchers",
          "startsAt"
        ],
        "type": "object"
      },
      "publicError": {
        "description": "PublicError is derived from Error and only contains information\navailable to the end user.",
        "properties": {
          "extra": {
            "additionalProperties": {},
            "description": "Extra Additional information about the error",
            "type": "object"
          },
          "message": {
            "description": "Message A human readable message",
            "type": "string"
          },
          "messageId": {
            "description": "MessageID A unique identifier for the error",
            "type": "string"
          },
          "statusCode": {
            "description": "StatusCode The HTTP status code returned",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "statusCode",
          "messageId"
        ],
        "type": "object"
      },
      "receiver": {
        "description": "Receiver receiver",
        "properties": {
          "name": {
            "description": "name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "resourcePermissionDTO": {
        "properties": {
          "actions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "builtInRole": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isInherited": {
            "type": "boolean"
          },
          "isManaged": {
            "type": "boolean"
          },
          "isServiceAccount": {
            "type": "boolean"
          },
          "permission": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "teamAvatarUrl": {
            "type": "string"
          },
          "teamId": {
            "format": "int64",
            "type": "integer"
          },
          "teamUid": {
            "type": "string"
          },
          "userAvatarUrl": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "userLogin": {
            "type": "string"
          },
          "userUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "setPermissionCommand": {
        "properties": {
          "permission": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "setPermissionsCommand": {
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/SetResourcePermissionCommand"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "silence": {
        "description": "Silence silence",
        "properties": {
          "comment": {
            "description": "comment",
            "type": "string"
          },
          "createdBy": {
            "description": "created by",
            "type": "string"
          },
          "endsAt": {
            "description": "ends at",
            "format": "date-time",
            "type": "string"
          },
          "matchers": {
            "$ref": "#/components/schemas/matchers"
          },
          "startsAt": {
            "description": "starts at",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "comment",
          "createdBy",
          "endsAt",
          "matchers",
          "startsAt"
        ],
        "type": "object"
      },
      "silenceStatus": {
        "description": "SilenceStatus silence status",
        "properties": {
          "state": {
            "description": "state",
            "enum": [
              "[expired active pending]"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "versionInfo": {
        "description": "VersionInfo version info",
        "properties": {
          "branch": {
            "description": "branch",
            "type": "string"
          },
          "buildDate": {
            "description": "build date",
            "type": "string"
          },
          "buildUser": {
            "description": "build user",
            "type": "string"
          },
          "goVersion": {
            "description": "go version",
            "type": "string"
          },
          "revision": {
            "description": "revision",
            "type": "string"
          },
          "version": {
            "description": "version",
            "type": "string"
          }
        },
        "required": [
          "branch",
          "buildDate",
          "buildUser",
          "goVersion",
          "revision",
          "version"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "basic": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "hello@grafana.com",
      "name": "Grafana Labs",
      "url": "https://grafana.com"
    },
    "description": "The Grafana backend exposes an HTTP API, the same API is used by the frontend to do\neverything from saving dashboards, creating users and updating data sources.",
    "title": "Grafana HTTP API.",
    "version": "0.0.1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/access-control/assignments/search": {
      "post": {
        "description": "Returns the result of the search through access-control role assignments.\n\nYou need to have a permission with action `teams.roles:read` on scope `teams:*`\nand a permission with action `users.roles:read` on scope `users:*`.",
        "operationId": "searchResult",
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchResultResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Debug permissions.",
        "tags": [
          "enterprise"
        ]
      }
    },
    "/access-control/roles": {
      "get": {
        "description": "Gets all existing roles. The response contains all global and organization local roles, for the organization which user is signed in.\n\nYou need to have a permission with action `roles:read` and scope `roles:*`.\n\nThe `delegatable` flag reduces the set of roles to only those for which the signed-in user has permissions to assign.",
        "operationId": "listRoles",
        "parameters": [
          {
            "in": "query",
            "name": "delegatable",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeHidden",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listRolesResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all roles.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "post": {
        "description": "Creates a new custom role and maps given permissions to that role. Note that roles with the same prefix as Fixed Roles can’t be created.\n\nYou need to have a permission with action `roles:write` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only create custom roles with the same, or a subset of permissions which the user has.\nFor example, if a user does not have required permissions for creating users, they won’t be able to create a custom role which allows to do that. This is done to prevent escalation of privileges.",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createRoleResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a new custom role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/roles/{roleUID}": {
      "delete": {
        "description": "Delete a role with the given UID, and it’s permissions. If the role is assigned to a built-in role, the deletion operation will fail, unless force query param is set to true, and in that case all assignments will also be deleted.\n\nYou need to have a permission with action `roles:delete` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only delete a custom role with the same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to delete a custom role which allows to do that.",
        "operationId": "deleteRole",
        "parameters": [
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "global",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete a custom role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "get": {
        "description": "Get a role for the given UID.\n\nYou need to have a permission with action `roles:read` and scope `roles:*`.",
        "operationId": "getRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getRoleResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "put": {
        "description": "You need to have a permission with action `roles:write` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only create custom roles with the same, or a subset of permissions which the user has.",
        "operationId": "updateRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/getRoleResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update a custom role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/roles/{roleUID}/assignments": {
      "get": {
        "description": "Get role assignments for the role with the given UID.\nDoes not include role assignments mapped through group attribute sync.\n\nYou need to have a permission with action `teams.roles:list` and scope `teams:id:*` and `users.roles:list` and scope `users:id:*`.",
        "operationId": "getRoleAssignments",
        "parameters": [
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getRoleAssignmentsResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get role assignments.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "put": {
        "description": "Set role assignments for the role with the given UID.\n\nYou need to have a permission with action `teams.roles:add` and `teams.roles:remove` and scope `permissions:type:delegate`, and `users.roles:add` and `users.roles:remove` and scope `permissions:type:delegate`.",
        "operationId": "setRoleAssignments",
        "parameters": [
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRoleAssignmentsCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/setRoleAssignmentsResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set role assignments.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/status": {
      "get": {
        "description": "Returns an indicator to check if fine-grained access control is enabled or not.\n\nYou need to have a permission with action `status:accesscontrol` and scope `services:accesscontrol`.",
        "operationId": "getAccessControlStatus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAccessControlStatusResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get status.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/teams/roles/search": {
      "post": {
        "description": "Lists the roles that have been directly assigned to the given teams.\n\nYou need to have a permission with action `teams.roles:read` and scope `teams:id:*`.",
        "operationId": "listTeamsRoles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesSearchQuery"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/listTeamsRolesResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List roles assigned to multiple teams.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/teams/{teamId}/roles": {
      "get": {
        "description": "You need to have a permission with action `teams.roles:read` and scope `teams:id:\u003cteam ID\u003e`.",
        "operationId": "listTeamRoles",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get team roles.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "post": {
        "description": "You need to have a permission with action `teams.roles:add` and scope `permissions:type:delegate`.",
        "operationId": "addTeamRole",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamRoleCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add team role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "put": {
        "description": "You need to have a permission with action `teams.roles:add` and `teams.roles:remove` and scope `permissions:type:delegate` for each.",
        "operationId": "setTeamRoles",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update team role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/teams/{teamId}/roles/{roleUID}": {
      "delete": {
        "description": "You need to have a permission with action `teams.roles:remove` and scope `permissions:type:delegate`.",
        "operationId": "removeTeamRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove team role.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/users/roles/search": {
      "post": {
        "description": "Lists the roles that have been directly assigned to the given users. The list does not include built-in roles (Viewer, Editor, Admin or Grafana Admin), and it does not include roles that have been inherited from a team.\n\nYou need to have a permission with action `users.roles:read` and scope `users:id:*`.",
        "operationId": "listUsersRoles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesSearchQuery"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/listUsersRolesResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List roles assigned to multiple users.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/users/{userId}/roles": {
      "get": {
        "description": "Lists the roles that have been directly assigned to a given user. The list does not include built-in roles (Viewer, Editor, Admin or Grafana Admin), and it does not include roles that have been inherited from a team.\n\nYou need to have a permission with action `users.roles:read` and scope `users:id:\u003cuser ID\u003e`.",
        "operationId": "listUserRoles",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAllRolesResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List roles assigned to a user.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "post": {
        "description": "Assign a role to a specific user. For bulk updates consider Set user role assignments.\n\nYou need to have a permission with action `users.roles:add` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only assign roles which have same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to assign a role which will allow to do that. This is done to prevent escalation of privileges.",
        "operationId": "addUserRole",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserRoleCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add a user role assignment.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      },
      "put": {
        "description": "Update the user’s role assignments to match the provided set of UIDs. This will remove any assigned roles that aren’t in the request and add roles that are in the set but are not already assigned to the user.\nRoles mapped through group attribute sync are not impacted.\nIf you want to add or remove a single role, consider using Add a user role assignment or Remove a user role assignment instead.\n\nYou need to have a permission with action `users.roles:add` and `users.roles:remove` and scope `permissions:type:delegate` for each. `permissions:type:delegate`  scope ensures that users can only assign or unassign roles which have same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to assign or unassign a role which will allow to do that. This is done to prevent escalation of privileges.",
        "operationId": "setUserRoles",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserRolesCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set user role assignments.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/users/{userId}/roles/{roleUID}": {
      "delete": {
        "description": "Revoke a role from a user. For bulk updates consider Set user role assignments.\n\nYou need to have a permission with action `users.roles:remove` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only unassign roles which have same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to unassign a role which will allow to do that. This is done to prevent escalation of privileges.",
        "operationId": "removeUserRole",
        "parameters": [
          {
            "description": "A flag indicating if the assignment is global or not. If set to false, the default org ID of the authenticated user will be used from the request to remove assignment.",
            "in": "query",
            "name": "global",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "roleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove a user role assignment.",
        "tags": [
          "access_control",
          "enterprise"
        ]
      }
    },
    "/access-control/{resource}/description": {
      "get": {
        "operationId": "getResourceDescription",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/resourcePermissionsDescription"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a description of a resource's access control properties.",
        "tags": [
          "access_control"
        ]
      }
    },
    "/access-control/{resource}/{resourceID}": {
      "get": {
        "operationId": "getResourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getResourcePermissionsResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get permissions for a resource.",
        "tags": [
          "access_control"
        ]
      },
      "post": {
        "description": "Assigns permissions for a resource by a given type (`:resource`) and `:resourceID` to one or many\nassignment types. Allowed resources are `datasources`, `teams`, `dashboards`, `folders`, and `serviceaccounts`.\nRefer to the `/access-control/{resource}/description` endpoint for allowed Permissions.",
        "operationId": "setResourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setPermissionsCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set resource permissions.",
        "tags": [
          "access_control"
        ]
      }
    },
    "/access-control/{resource}/{resourceID}/builtInRoles/{builtInRole}": {
      "post": {
        "description": "Assigns permissions for a resource by a given type (`:resource`) and `:resourceID` to a built-in role.\nAllowed resources are `datasources`, `teams`, `dashboards`, `folders`, and `serviceaccounts`.\nRefer to the `/access-control/{resource}/description` endpoint for allowed Permissions.",
        "operationId": "setResourcePermissionsForBuiltInRole",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "builtInRole",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setPermissionCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set resource permissions for a built-in role.",
        "tags": [
          "access_control"
        ]
      }
    },
    "/access-control/{resource}/{resourceID}/teams/{teamID}": {
      "post": {
        "description": "Assigns permissions for a resource by a given type (`:resource`) and `:resourceID` to a team.\nAllowed resources are `datasources`, `teams`, `dashboards`, `folders`, and `serviceaccounts`.\nRefer to the `/access-control/{resource}/description` endpoint for allowed Permissions.",
        "operationId": "setResourcePermissionsForTeam",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "teamID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setPermissionCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set resource permissions for a team.",
        "tags": [
          "access_control"
        ]
      }
    },
    "/access-control/{resource}/{resourceID}/users/{userID}": {
      "post": {
        "description": "Assigns permissions for a resource by a given type (`:resource`) and `:resourceID` to a user or a service account.\nAllowed resources are `datasources`, `teams`, `dashboards`, `folders`, and `serviceaccounts`.\nRefer to the `/access-control/{resource}/description` endpoint for allowed Permissions.",
        "operationId": "setResourcePermissionsForUser",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setPermissionCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set resource permissions for a user.",
        "tags": [
          "access_control"
        ]
      }
    },
    "/admin/ldap-sync-status": {
      "get": {
        "description": "You need to have a permission with action `ldap.status:read`.",
        "operationId": "getSyncStatus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSyncStatusResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Returns the current state of the LDAP background sync integration.",
        "tags": [
          "ldap_debug",
          "enterprise"
        ]
      }
    },
    "/admin/ldap/reload": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `ldap.config:reload`.",
        "operationId": "reloadLDAPCfg",
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Reloads the LDAP configuration.",
        "tags": [
          "admin_ldap"
        ]
      }
    },
    "/admin/ldap/status": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `ldap.status:read`.",
        "operationId": "getLDAPStatus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Attempts to connect to all the configured LDAP servers and returns information on whenever they're available or not.",
        "tags": [
          "admin_ldap"
        ]
      }
    },
    "/admin/ldap/sync/{user_id}": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `ldap.user:sync`.",
        "operationId": "postSyncUserWithLDAP",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Enables a single Grafana user to be synchronized against LDAP.",
        "tags": [
          "admin_ldap"
        ]
      }
    },
    "/admin/ldap/{user_name}": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `ldap.user:read`.",
        "operationId": "getUserFromLDAP",
        "parameters": [
          {
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Finds an user based on a username in LDAP. This helps illustrate how would the particular user be mapped in Grafana when synced.",
        "tags": [
          "admin_ldap"
        ]
      }
    },
    "/admin/provisioning/access-control/reload": {
      "post": {
        "operationId": "adminProvisioningReloadAccessControl",
        "responses": {
          "202": {
            "$ref": "#/components/responses/acceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          }
        },
        "summary": "You need to have a permission with action `provisioning:reload` with scope `provisioners:accesscontrol`.",
        "tags": [
          "access_control_provisioning",
          "enterprise"
        ]
      }
    },
    "/admin/provisioning/dashboards/reload": {
      "post": {
        "description": "Reloads the provisioning config files for dashboards again. It won’t return until the new provisioned entities are already stored in the database. In case of dashboards, it will stop polling for changes in dashboard files and then restart it with new configurations after returning.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `provisioning:reload` and scope `provisioners:dashboards`.",
        "operationId": "adminProvisioningReloadDashboards",
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Reload dashboard provisioning configurations.",
        "tags": [
          "admin_provisioning"
        ]
      }
    },
    "/admin/provisioning/datasources/reload": {
      "post": {
        "description": "Reloads the provisioning config files for datasources again. It won’t return until the new provisioned entities are already stored in the database. In case of dashboards, it will stop polling for changes in dashboard files and then restart it with new configurations after returning.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `provisioning:reload` and scope `provisioners:datasources`.",
        "operationId": "adminProvisioningReloadDatasources",
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Reload datasource provisioning configurations.",
        "tags": [
          "admin_provisioning"
        ]
      }
    },
    "/admin/provisioning/plugins/reload": {
      "post": {
        "description": "Reloads the provisioning config files for plugins again. It won’t return until the new provisioned entities are already stored in the database. In case of dashboards, it will stop polling for changes in dashboard files and then restart it with new configurations after returning.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `provisioning:reload` and scope `provisioners:plugin`.",
        "operationId": "adminProvisioningReloadPlugins",
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Reload plugin provisioning configurations.",
        "tags": [
          "admin_provisioning"
        ]
      }
    },
    "/admin/settings": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `settings:read` and scopes: `settings:*`, `settings:auth.saml:` and `settings:auth.saml:enabled` (property level).",
        "operationId": "adminGetSettings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/adminGetSettingsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Fetch settings.",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/stats": {
      "get": {
        "description": "Only works with Basic Authentication (username and password). See introduction for an explanation.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `server:stats:read`.",
        "operationId": "adminGetStats",
        "responses": {
          "200": {
            "$ref": "#/components/responses/adminGetStatsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch Grafana Stats.",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/users": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users:create`.\nNote that OrgId is an optional parameter that can be used to assign a new user to a different organization when `auto_assign_org` is set to `true`.",
        "operationId": "adminCreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateUserForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/adminCreateUserResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "412": {
            "$ref": "#/components/responses/preconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Create new user.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}": {
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users:delete` and scope `global.users:*`.",
        "operationId": "adminDeleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Delete global User.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/auth-tokens": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.authtoken:list` and scope `global.users:*`.",
        "operationId": "adminGetUserAuthTokens",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/adminGetUserAuthTokensResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Return a list of all auth tokens (devices) that the user currently have logged in from.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/disable": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users:disable` and scope `global.users:1` (userIDScope).",
        "operationId": "adminDisableUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Disable user.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/enable": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users:enable` and scope `global.users:1` (userIDScope).",
        "operationId": "adminEnableUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Enable user.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/logout": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.logout` and scope `global.users:*`.",
        "operationId": "adminLogoutUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Logout user revokes all auth tokens (devices) for the user. User of issued auth tokens (devices) will no longer be logged in and will be required to authenticate again upon next activity.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/password": {
      "put": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.password:update` and scope `global.users:*`.",
        "operationId": "adminUpdateUserPassword",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateUserPasswordForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Set password for user.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/permissions": {
      "put": {
        "description": "Only works with Basic Authentication (username and password). See introduction for an explanation.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.permissions:update` and scope `global.users:*`.",
        "operationId": "adminUpdateUserPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateUserPermissionsForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set permissions for user.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/quotas": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.quotas:list` and scope `global.users:1` (userIDScope).",
        "operationId": "getUserQuota",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQuotaResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Fetch user quota.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/quotas/{quota_target}": {
      "put": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.quotas:update` and scope `global.users:1` (userIDScope).",
        "operationId": "updateUserQuota",
        "parameters": [
          {
            "in": "path",
            "name": "quota_target",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuotaCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update user quota.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/admin/users/{user_id}/revoke-auth-token": {
      "post": {
        "description": "Revokes the given auth token (device) for the user. User of issued auth token (device) will no longer be logged in and will be required to authenticate again upon next activity.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `users.authtoken:update` and scope `global.users:*`.",
        "operationId": "adminRevokeUserAuthToken",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeAuthTokenCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Revoke auth token for user.",
        "tags": [
          "admin_users"
        ]
      }
    },
    "/annotations": {
      "get": {
        "description": "Starting in Grafana v6.4 regions annotations are now returned in one entity that now includes the timeEnd property.",
        "operationId": "getAnnotations",
        "parameters": [
          {
            "description": "Find annotations created after specific epoch datetime in milliseconds.",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Find annotations created before specific epoch datetime in milliseconds.",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Limit response to annotations created by specific user.",
            "in": "query",
            "name": "userId",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Find annotations for a specified alert.",
            "in": "query",
            "name": "alertId",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Find annotations that are scoped to a specific dashboard",
            "in": "query",
            "name": "dashboardId",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Find annotations that are scoped to a specific dashboard",
            "in": "query",
            "name": "dashboardUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Find annotations that are scoped to a specific panel",
            "in": "query",
            "name": "panelId",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Max limit for results returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Use this to filter organization annotations. Organization annotations are annotations from an annotation data source that are not connected specifically to a dashboard or panel. You can filter by multiple tags.",
            "in": "query",
            "name": "tags",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Return alerts or user created annotations",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "alert",
                "annotation"
              ],
              "type": "string"
            }
          },
          {
            "description": "Match any or all tags",
            "in": "query",
            "name": "matchAny",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAnnotationsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Find Annotations.",
        "tags": [
          "annotations"
        ]
      },
      "post": {
        "description": "Creates an annotation in the Grafana database. The dashboardId and panelId fields are optional. If they are not specified then an organization annotation is created and can be queried in any dashboard that adds the Grafana annotations data source. When creating a region annotation include the timeEnd property.\nThe format for `time` and `timeEnd` should be epoch numbers in millisecond resolution.\nThe response for this HTTP request is slightly different in versions prior to v6.4. In prior versions you would also get an endId if you where creating a region. But in 6.4 regions are represented using a single event with time and timeEnd properties.",
        "operationId": "postAnnotation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAnnotationsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postAnnotationResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create Annotation.",
        "tags": [
          "annotations"
        ]
      }
    },
    "/annotations/graphite": {
      "post": {
        "description": "Creates an annotation by using Graphite-compatible event format. The `when` and `data` fields are optional. If `when` is not specified then the current time will be used as annotation’s timestamp. The `tags` field can also be in prior to Graphite `0.10.0` format (string with multiple tags being separated by a space).",
        "operationId": "postGraphiteAnnotation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostGraphiteAnnotationsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postAnnotationResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create Annotation in Graphite format.",
        "tags": [
          "annotations"
        ]
      }
    },
    "/annotations/mass-delete": {
      "post": {
        "operationId": "massDeleteAnnotations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MassDeleteAnnotationsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete multiple annotations.",
        "tags": [
          "annotations"
        ]
      }
    },
    "/annotations/tags": {
      "get": {
        "description": "Find all the event tags created in the annotations.",
        "operationId": "getAnnotationTags",
        "parameters": [
          {
            "description": "Tag is a string that you can use to filter tags.",
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max limit for results returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": "100",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAnnotationTagsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Find Annotations Tags.",
        "tags": [
          "annotations"
        ]
      }
    },
    "/annotations/{annotation_id}": {
      "delete": {
        "description": "Deletes the annotation that matches the specified ID.",
        "operationId": "deleteAnnotationByID",
        "parameters": [
          {
            "in": "path",
            "name": "annotation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete Annotation By ID.",
        "tags": [
          "annotations"
        ]
      },
      "get": {
        "operationId": "getAnnotationByID",
        "parameters": [
          {
            "in": "path",
            "name": "annotation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAnnotationByIDResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get Annotation by ID.",
        "tags": [
          "annotations"
        ]
      },
      "patch": {
        "description": "Updates one or more properties of an annotation that matches the specified ID.\nThis operation currently supports updating of the `text`, `tags`, `time` and `timeEnd` properties.\nThis is available in Grafana 6.0.0-beta2 and above.",
        "operationId": "patchAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "annotation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAnnotationsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Patch Annotation.",
        "tags": [
          "annotations"
        ]
      },
      "put": {
        "description": "Updates all properties of an annotation that matches the specified id. To only update certain property, consider using the Patch Annotation operation.",
        "operationId": "updateAnnotation",
        "parameters": [
          {
            "in": "path",
            "name": "annotation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnotationsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Annotation.",
        "tags": [
          "annotations"
        ]
      }
    },
    "/auth/keys": {
      "get": {
        "description": "Will return auth keys.\n\nDeprecated: true.\n\nDeprecated. Please use GET /api/serviceaccounts and GET /api/serviceaccounts/{id}/tokens instead\nsee https://grafana.com/docs/grafana/next/administration/service-accounts/migrate-api-keys/.",
        "operationId": "getAPIkeys",
        "parameters": [
          {
            "description": "Show expired keys",
            "in": "query",
            "name": "includeExpired",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAPIkeyResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get auth keys.",
        "tags": [
          "api_keys"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Will return details of the created API key.",
        "operationId": "addAPIkey",
        "responses": {
          "410": {
            "$ref": "#/components/responses/goneError"
          }
        },
        "summary": "Creates an API key.",
        "tags": [
          "api_keys"
        ]
      }
    },
    "/auth/keys/{id}": {
      "delete": {
        "deprecated": true,
        "description": "Deletes an API key.\nDeprecated. See: https://grafana.com/docs/grafana/next/administration/service-accounts/migrate-api-keys/.",
        "operationId": "deleteAPIkey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete API key.",
        "tags": [
          "api_keys"
        ]
      }
    },
    "/cloudmigration/migration": {
      "get": {
        "operationId": "getSessionList",
        "responses": {
          "200": {
            "$ref": "#/components/responses/cloudMigrationSessionListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a list of all cloud migration sessions that have been created.",
        "tags": [
          "migrations"
        ]
      },
      "post": {
        "operationId": "createSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudMigrationSessionRequestDTO"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/cloudMigrationSessionResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a migration session.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/migration/{uid}": {
      "delete": {
        "operationId": "deleteSession",
        "parameters": [
          {
            "description": "UID of a migration session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete a migration session by its uid.",
        "tags": [
          "migrations"
        ]
      },
      "get": {
        "operationId": "getSession",
        "parameters": [
          {
            "description": "UID of a migration session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/cloudMigrationSessionResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a cloud migration session by its uid.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/migration/{uid}/snapshot": {
      "post": {
        "description": "If the snapshot initialization is successful, the snapshot uid is returned.",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "description": "UID of a session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/createSnapshotResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Trigger the creation of an instance snapshot associated with the provided session.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/migration/{uid}/snapshot/{snapshotUid}": {
      "get": {
        "operationId": "getSnapshot",
        "parameters": [
          {
            "description": "ResultPage is used for pagination with ResultLimit",
            "in": "query",
            "name": "resultPage",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Max limit for snapshot results returned.",
            "in": "query",
            "name": "resultLimit",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Session UID of a session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "UID of a snapshot",
            "in": "path",
            "name": "snapshotUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSnapshotResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get metadata about a snapshot, including where it is in its processing and final results.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/migration/{uid}/snapshot/{snapshotUid}/cancel": {
      "post": {
        "description": "TODO: Implement",
        "operationId": "cancelSnapshot",
        "parameters": [
          {
            "description": "Session UID of a session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "UID of a snapshot",
            "in": "path",
            "name": "snapshotUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Cancel a snapshot, wherever it is in its processing chain.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/migration/{uid}/snapshot/{snapshotUid}/upload": {
      "post": {
        "operationId": "uploadSnapshot",
        "parameters": [
          {
            "description": "Session UID of a session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "UID of a snapshot",
            "in": "path",
            "name": "snapshotUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Upload a snapshot to the Grafana Migration Service for processing.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/migration/{uid}/snapshots": {
      "get": {
        "operationId": "getShapshotList",
        "parameters": [
          {
            "description": "Page is used for pagination with limit",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Max limit for results returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Session UID of a session",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort with value latest to return results sorted in descending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/snapshotListResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a list of snapshots for a session.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/token": {
      "get": {
        "operationId": "getCloudMigrationToken",
        "responses": {
          "200": {
            "$ref": "#/components/responses/cloudMigrationGetTokenResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch the cloud migration token if it exists.",
        "tags": [
          "migrations"
        ]
      },
      "post": {
        "operationId": "createCloudMigrationToken",
        "responses": {
          "200": {
            "$ref": "#/components/responses/cloudMigrationCreateTokenResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create gcom access token.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/cloudmigration/token/{uid}": {
      "delete": {
        "operationId": "deleteCloudMigrationToken",
        "parameters": [
          {
            "description": "UID of a cloud migration token",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/cloudMigrationDeleteTokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Deletes a cloud migration token.",
        "tags": [
          "migrations"
        ]
      }
    },
    "/dashboard/snapshots": {
      "get": {
        "operationId": "searchDashboardSnapshots",
        "parameters": [
          {
            "description": "Search Query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of returned results",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 1000,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchDashboardSnapshotsResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List snapshots.",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/dashboards/calculate-diff": {
      "post": {
        "operationId": "calculateDashboardDiff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "base": {
                    "$ref": "#/components/schemas/CalculateDiffTarget"
                  },
                  "diffType": {
                    "description": "The type of diff to return\nDescription:\n`basic`\n`json`",
                    "enum": [
                      "basic",
                      "json"
                    ],
                    "type": "string"
                  },
                  "new": {
                    "$ref": "#/components/schemas/CalculateDiffTarget"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/calculateDashboardDiffResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Perform diff on two dashboards.",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/db": {
      "post": {
        "description": "Creates a new dashboard or updates an existing dashboard.\nNote: This endpoint is not intended for creating folders, use `POST /api/folders` for that.",
        "operationId": "postDashboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDashboardCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "412": {
            "$ref": "#/components/responses/preconditionFailedError"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create / Update dashboard",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/home": {
      "get": {
        "operationId": "getHomeDashboard",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getHomeDashboardResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get home dashboard.",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/id/{DashboardID}/permissions": {
      "get": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/dashboard_permissions/getDashboardPermissionsListByUID) instead",
        "operationId": "getDashboardPermissionsListByID",
        "parameters": [
          {
            "in": "path",
            "name": "DashboardID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDashboardPermissionsListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all existing permissions for the given dashboard.",
        "tags": [
          "dashboard_permissions"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/dashboard_permissions/updateDashboardPermissionsByUID) instead\n\nThis operation will remove existing permissions if they’re not included in the request.",
        "operationId": "updateDashboardPermissionsByID",
        "parameters": [
          {
            "in": "path",
            "name": "DashboardID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboardACLCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Updates permissions for a dashboard.",
        "tags": [
          "dashboard_permissions"
        ]
      }
    },
    "/dashboards/id/{DashboardID}/restore": {
      "post": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/dashboard_versions/restoreDashboardVersionByUID) instead",
        "operationId": "restoreDashboardVersionByID",
        "parameters": [
          {
            "in": "path",
            "name": "DashboardID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreDashboardVersionCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postDashboardResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Restore a dashboard to a given dashboard version.",
        "tags": [
          "dashboard_versions"
        ]
      }
    },
    "/dashboards/id/{DashboardID}/versions": {
      "get": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/dashboard_versions/getDashboardVersionsByUID) instead",
        "operationId": "getDashboardVersionsByID",
        "parameters": [
          {
            "in": "path",
            "name": "DashboardID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/dashboardVersionsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all existing versions for the dashboard.",
        "tags": [
          "dashboard_versions"
        ]
      }
    },
    "/dashboards/id/{DashboardID}/versions/{DashboardVersionID}": {
      "get": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/dashboard_versions/getDashboardVersionByUID) instead",
        "operationId": "getDashboardVersionByID",
        "parameters": [
          {
            "in": "path",
            "name": "DashboardID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "DashboardVersionID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/dashboardVersionResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a specific dashboard version.",
        "tags": [
          "dashboard_versions"
        ]
      }
    },
    "/dashboards/import": {
      "post": {
        "operationId": "importDashboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportDashboardRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/importDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "412": {
            "$ref": "#/components/responses/preconditionFailedError"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Import dashboard.",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/public-dashboards": {
      "get": {
        "description": "Get list of public dashboards",
        "operationId": "listPublicDashboards",
        "responses": {
          "200": {
            "$ref": "#/components/responses/listPublicDashboardsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      }
    },
    "/dashboards/tags": {
      "get": {
        "operationId": "getDashboardTags",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDashboardsTagsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all dashboards tags of an organisation.",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/uid/{dashboardUid}/public-dashboards": {
      "get": {
        "description": "Get public dashboard by dashboardUid",
        "operationId": "getPublicDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboardUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPublicDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      },
      "post": {
        "description": "Create public dashboard for a dashboard",
        "operationId": "createPublicDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboardUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDashboardDTO"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createPublicDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      }
    },
    "/dashboards/uid/{dashboardUid}/public-dashboards/{uid}": {
      "delete": {
        "description": "Delete public dashboard for a dashboard",
        "operationId": "deletePublicDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboardUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      },
      "patch": {
        "description": "Update public dashboard for a dashboard",
        "operationId": "updatePublicDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboardUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDashboardDTO"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updatePublicDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      }
    },
    "/dashboards/uid/{uid}": {
      "delete": {
        "description": "Will delete the dashboard given the specified unique identifier (uid).",
        "operationId": "deleteDashboardByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteDashboardResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete dashboard by uid.",
        "tags": [
          "dashboards"
        ]
      },
      "get": {
        "description": "Will return the dashboard given the dashboard unique identifier (uid).",
        "operationId": "getDashboardByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/dashboardResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get dashboard by uid.",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/uid/{uid}/permissions": {
      "get": {
        "operationId": "getDashboardPermissionsListByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDashboardPermissionsListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all existing permissions for the given dashboard.",
        "tags": [
          "dashboard_permissions"
        ]
      },
      "post": {
        "description": "This operation will remove existing permissions if they’re not included in the request.",
        "operationId": "updateDashboardPermissionsByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboardACLCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Updates permissions for a dashboard.",
        "tags": [
          "dashboard_permissions"
        ]
      }
    },
    "/dashboards/uid/{uid}/restore": {
      "post": {
        "operationId": "restoreDashboardVersionByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreDashboardVersionCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postDashboardResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Restore a dashboard to a given dashboard version using UID.",
        "tags": [
          "dashboard_versions"
        ]
      }
    },
    "/dashboards/uid/{uid}/trash": {
      "delete": {
        "description": "Will delete the dashboard given the specified unique identifier (uid).",
        "operationId": "hardDeleteDashboardByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteDashboardResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Hard delete dashboard by uid.",
        "tags": [
          "dashboards"
        ]
      },
      "patch": {
        "operationId": "restoreDeletedDashboardByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreDeletedDashboardCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Restore a dashboard to a given dashboard version using UID.",
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/uid/{uid}/versions": {
      "get": {
        "operationId": "getDashboardVersionsByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Version to start from when returning queries",
            "in": "query",
            "name": "start",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/dashboardVersionsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all existing versions for the dashboard using UID.",
        "tags": [
          "dashboard_versions"
        ]
      }
    },
    "/dashboards/uid/{uid}/versions/{DashboardVersionID}": {
      "get": {
        "operationId": "getDashboardVersionByUID",
        "parameters": [
          {
            "in": "path",
            "name": "DashboardVersionID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/dashboardVersionResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a specific dashboard version using UID.",
        "tags": [
          "dashboard_versions"
        ]
      }
    },
    "/datasources": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scope: `datasources:*`.",
        "operationId": "getDataSources",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSourcesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all data sources.",
        "tags": [
          "datasources"
        ]
      },
      "post": {
        "description": "By defining `password` and `basicAuthPassword` under secureJsonData property\nGrafana encrypts them securely as an encrypted blob in the database.\nThe response then lists the encrypted fields under secureJsonFields.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:create`",
        "operationId": "addDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataSourceCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createOrUpdateDatasourceResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a data source.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/correlations": {
      "get": {
        "operationId": "getCorrelations",
        "parameters": [
          {
            "description": "Limit the maximum number of correlations to return per page",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "format": "int64",
              "maximum": 1000,
              "type": "integer"
            }
          },
          {
            "description": "Page index for starting fetching correlations",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Source datasource UID filter to be applied to correlations",
            "in": "query",
            "name": "sourceUID",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getCorrelationsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all correlations.",
        "tags": [
          "correlations"
        ]
      }
    },
    "/datasources/id/{name}": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource` (single data source).",
        "operationId": "getDataSourceIdByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSourceIDResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get data source Id by Name.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/name/{name}": {
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:delete` and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource` (single data source).",
        "operationId": "deleteDataSourceByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteDataSourceByNameResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete an existing data source by name.",
        "tags": [
          "datasources"
        ]
      },
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource` (single data source).",
        "operationId": "getDataSourceByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSourceResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a single data source by Name.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/proxy/uid/{uid}/{datasource_proxy_route}": {
      "delete": {
        "description": "Proxies all calls to the actual data source.",
        "operationId": "datasourceProxyDELETEByUIDcalls",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Data source proxy DELETE calls.",
        "tags": [
          "datasources"
        ]
      },
      "get": {
        "description": "Proxies all calls to the actual data source.",
        "operationId": "datasourceProxyGETByUIDcalls",
        "parameters": [
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Data source proxy GET calls.",
        "tags": [
          "datasources"
        ]
      },
      "post": {
        "description": "Proxies all calls to the actual data source. The data source should support POST methods for the specific path and role as defined",
        "operationId": "datasourceProxyPOSTByUIDcalls",
        "parameters": [
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true,
          "x-originalParamName": "DatasourceProxyParam"
        },
        "responses": {
          "201": {
            "description": "(empty)"
          },
          "202": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Data source proxy POST calls.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/proxy/{id}/{datasource_proxy_route}": {
      "delete": {
        "deprecated": true,
        "description": "Proxies all calls to the actual data source.\n\nPlease refer to [updated API](#/datasources/datasourceProxyDELETEByUIDcalls) instead",
        "operationId": "datasourceProxyDELETEcalls",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Data source proxy DELETE calls.",
        "tags": [
          "datasources"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "Proxies all calls to the actual data source.\n\nPlease refer to [updated API](#/datasources/datasourceProxyGETByUIDcalls) instead",
        "operationId": "datasourceProxyGETcalls",
        "parameters": [
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Data source proxy GET calls.",
        "tags": [
          "datasources"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Proxies all calls to the actual data source. The data source should support POST methods for the specific path and role as defined\n\nPlease refer to [updated API](#/datasources/datasourceProxyPOSTByUIDcalls) instead",
        "operationId": "datasourceProxyPOSTcalls",
        "parameters": [
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true,
          "x-originalParamName": "DatasourceProxyParam"
        },
        "responses": {
          "201": {
            "description": "(empty)"
          },
          "202": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Data source proxy POST calls.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/uid/{sourceUID}/correlations": {
      "get": {
        "operationId": "getCorrelationsBySourceUID",
        "parameters": [
          {
            "in": "path",
            "name": "sourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getCorrelationsBySourceUIDResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all correlations originating from the given data source.",
        "tags": [
          "correlations"
        ]
      },
      "post": {
        "operationId": "createCorrelation",
        "parameters": [
          {
            "in": "path",
            "name": "sourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorrelationCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createCorrelationResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add correlation.",
        "tags": [
          "correlations"
        ]
      }
    },
    "/datasources/uid/{sourceUID}/correlations/{correlationUID}": {
      "get": {
        "operationId": "getCorrelation",
        "parameters": [
          {
            "in": "path",
            "name": "sourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "correlationUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getCorrelationResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets a correlation.",
        "tags": [
          "correlations"
        ]
      },
      "patch": {
        "operationId": "updateCorrelation",
        "parameters": [
          {
            "in": "path",
            "name": "sourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "correlationUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorrelationCommand"
              }
            }
          },
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateCorrelationResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Updates a correlation.",
        "tags": [
          "correlations"
        ]
      }
    },
    "/datasources/uid/{uid}": {
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:delete` and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk` (single data source).",
        "operationId": "deleteDataSourceByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete an existing data source by UID.",
        "tags": [
          "datasources"
        ]
      },
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk` (single data source).",
        "operationId": "getDataSourceByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSourceResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a single data source by UID.",
        "tags": [
          "datasources"
        ]
      },
      "put": {
        "description": "Similar to creating a data source, `password` and `basicAuthPassword` should be defined under\nsecureJsonData in order to be stored securely as an encrypted blob in the database. Then, the\nencrypted fields are listed under secureJsonFields section in the response.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:write` and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:1` (single data source).",
        "operationId": "updateDataSourceByUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataSourceCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createOrUpdateDatasourceResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update an existing data source.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/uid/{uid}/correlations/{correlationUID}": {
      "delete": {
        "operationId": "deleteCorrelation",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "correlationUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteCorrelationResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete a correlation.",
        "tags": [
          "correlations"
        ]
      }
    },
    "/datasources/uid/{uid}/health": {
      "get": {
        "operationId": "checkDatasourceHealthWithUID",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Sends a health check request to the plugin datasource identified by the UID.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/uid/{uid}/lbac/teams": {
      "get": {
        "operationId": "getTeamLBACRulesApi",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getTeamLBACRulesResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Retrieves LBAC rules for a team.",
        "tags": [
          "enterprise"
        ]
      },
      "put": {
        "operationId": "updateTeamLBACRulesApi",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamLBACCommand"
              }
            }
          },
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateTeamLBACRulesResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Updates LBAC rules for a team.",
        "tags": [
          "enterprise"
        ]
      }
    },
    "/datasources/uid/{uid}/resources/{datasource_proxy_route}": {
      "get": {
        "operationId": "callDatasourceResourceWithUID",
        "parameters": [
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch data source resources.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/{dataSourceUID}/cache": {
      "get": {
        "description": "get cache config for a single data source",
        "operationId": "getDataSourceCacheConfig",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheConfigResponse"
                }
              }
            },
            "description": "CacheConfigResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "enterprise"
        ]
      },
      "post": {
        "description": "set cache config for a single data source",
        "operationId": "setDataSourceCacheConfig",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheConfigSetter"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheConfigResponse"
                }
              }
            },
            "description": "CacheConfigResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "enterprise"
        ]
      }
    },
    "/datasources/{dataSourceUID}/cache/clean": {
      "post": {
        "description": "clean cache for a single data source",
        "operationId": "cleanDataSourceCache",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheConfigResponse"
                }
              }
            },
            "description": "CacheConfigResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "enterprise"
        ]
      }
    },
    "/datasources/{dataSourceUID}/cache/disable": {
      "post": {
        "description": "disable cache for a single data source",
        "operationId": "disableDataSourceCache",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheConfigResponse"
                }
              }
            },
            "description": "CacheConfigResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "enterprise"
        ]
      }
    },
    "/datasources/{dataSourceUID}/cache/enable": {
      "post": {
        "description": "enable cache for a single data source",
        "operationId": "enableDataSourceCache",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheConfigResponse"
                }
              }
            },
            "description": "CacheConfigResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "enterprise"
        ]
      }
    },
    "/datasources/{id}": {
      "delete": {
        "deprecated": true,
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:delete` and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single data source).\n\nPlease refer to [updated API](#/datasources/deleteDataSourceByUID) instead",
        "operationId": "deleteDataSourceByID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete an existing data source by id.",
        "tags": [
          "datasources"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single data source).\n\nPlease refer to [updated API](#/datasources/getDataSourceByUID) instead",
        "operationId": "getDataSourceByID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSourceResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a single data source by Id.",
        "tags": [
          "datasources"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "Similar to creating a data source, `password` and `basicAuthPassword` should be defined under\nsecureJsonData in order to be stored securely as an encrypted blob in the database. Then, the\nencrypted fields are listed under secureJsonFields section in the response.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:write` and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single data source).\n\nPlease refer to [updated API](#/datasources/updateDataSourceByUID) instead",
        "operationId": "updateDataSourceByID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataSourceCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createOrUpdateDatasourceResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update an existing data source by its sequential ID.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/{id}/health": {
      "get": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/datasources/checkDatasourceHealthWithUID) instead",
        "operationId": "checkDatasourceHealthByID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Sends a health check request to the plugin datasource identified by the ID.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/datasources/{id}/resources/{datasource_proxy_route}": {
      "get": {
        "deprecated": true,
        "description": "Please refer to [updated API](#/datasources/callDatasourceResourceWithUID) instead",
        "operationId": "callDatasourceResourceByID",
        "parameters": [
          {
            "in": "path",
            "name": "datasource_proxy_route",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch data source resources by Id.",
        "tags": [
          "datasources"
        ]
      }
    },
    "/ds/query": {
      "post": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:query`.",
        "operationId": "queryMetricsWithExpressions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryMetricsWithExpressionsRespons"
          },
          "207": {
            "$ref": "#/components/responses/queryMetricsWithExpressionsRespons"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "DataSource query metrics with expressions.",
        "tags": [
          "ds"
        ]
      }
    },
    "/folders": {
      "get": {
        "description": "It returns all folders that the authenticated user has permission to view.\nIf nested folders are enabled, it expects an additional query parameter with the parent folder UID\nand returns the immediate subfolders that the authenticated user has permission to view.\nIf the parameter is not supplied then it returns immediate subfolders under the root\nthat the authenticated user has permission to view.",
        "operationId": "getFolders",
        "parameters": [
          {
            "description": "Limit the maximum number of folders to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 1000,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Page index for starting fetching folders",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The parent folder UID",
            "in": "query",
            "name": "parentUid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Set to `Edit` to return folders that the user can edit",
            "in": "query",
            "name": "permission",
            "schema": {
              "default": "View",
              "enum": [
                "Edit",
                "View"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getFoldersResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all folders.",
        "tags": [
          "folders"
        ]
      },
      "post": {
        "description": "If nested folders are enabled then it additionally expects the parent folder UID.",
        "operationId": "createFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/folderResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create folder.",
        "tags": [
          "folders"
        ]
      }
    },
    "/folders/id/{folder_id}": {
      "get": {
        "deprecated": true,
        "description": "Returns the folder identified by id. This is deprecated.\nPlease refer to [updated API](#/folders/getFolderByUID) instead",
        "operationId": "getFolderByID",
        "parameters": [
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/folderResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get folder by id.",
        "tags": [
          "folders"
        ]
      }
    },
    "/folders/{folder_uid}": {
      "delete": {
        "description": "Deletes an existing folder identified by UID along with all dashboards (and their alerts) stored in the folder. This operation cannot be reverted.\nIf nested folders are enabled then it also deletes all the subfolders.",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If `true` any Grafana 8 Alerts under this folder will be deleted.\nSet to `false` so that the request will fail if the folder contains any Grafana 8 Alerts.",
            "in": "query",
            "name": "forceDeleteRules",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteFolderResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete folder.",
        "tags": [
          "folders"
        ]
      },
      "get": {
        "operationId": "getFolderByUID",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/folderResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get folder by uid.",
        "tags": [
          "folders"
        ]
      },
      "put": {
        "operationId": "updateFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderCommand"
              }
            }
          },
          "description": "To change the unique identifier (uid), provide another one.\nTo overwrite an existing folder with newer version, set `overwrite` to `true`.\nProvide the current version to safelly update the folder: if the provided version differs from the stored one the request will fail, unless `overwrite` is `true`.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/folderResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update folder.",
        "tags": [
          "folders"
        ]
      }
    },
    "/folders/{folder_uid}/counts": {
      "get": {
        "operationId": "getFolderDescendantCounts",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getFolderDescendantCountsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets the count of each descendant of a folder by kind. The folder is identified by UID.",
        "tags": [
          "folders"
        ]
      }
    },
    "/folders/{folder_uid}/move": {
      "post": {
        "operationId": "moveFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveFolderCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/folderResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Move folder.",
        "tags": [
          "folders"
        ]
      }
    },
    "/folders/{folder_uid}/permissions": {
      "get": {
        "operationId": "getFolderPermissionList",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getFolderPermissionListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Gets all existing permissions for the folder with the given `uid`.",
        "tags": [
          "folder_permissions"
        ]
      },
      "post": {
        "operationId": "updateFolderPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "folder_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboardACLCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Updates permissions for a folder. This operation will remove existing permissions if they’re not included in the request.",
        "tags": [
          "folder_permissions"
        ]
      }
    },
    "/groupsync/groups": {
      "get": {
        "operationId": "getMappedGroups",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getGroupsResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List groups that have mappings set. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      }
    },
    "/groupsync/groups/{group_id}": {
      "delete": {
        "operationId": "deleteGroupMappings",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete mappings for a group. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      },
      "post": {
        "operationId": "createGroupMappings",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAttributes"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/apiResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create mappings for a group. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      },
      "put": {
        "operationId": "updateGroupMappings",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAttributes"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/apiResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update mappings for a group. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      }
    },
    "/groupsync/groups/{group_id}/roles": {
      "get": {
        "operationId": "getGroupRoles",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getGroupRolesResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get roles mapped to a group. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      }
    },
    "/groupsync/mappings": {
      "get": {
        "operationId": "getGroupMappings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getGroupMappingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List group mappings. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      },
      "post": {
        "operationId": "createGroupMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupMappingRequestBody"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/apiResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a group mapping. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      }
    },
    "/groupsync/mappings/{mapping_uid}": {
      "delete": {
        "operationId": "deleteGroupMapping",
        "parameters": [
          {
            "in": "path",
            "name": "mapping_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete a group mapping. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      },
      "get": {
        "operationId": "getGroupMapping",
        "parameters": [
          {
            "in": "path",
            "name": "mapping_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getGroupMappingResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a group mapping. This endpoint is behind the feature flag `groupAttributeSync` and is considered experimental.",
        "tags": [
          "group_attribute_sync",
          "enterprise"
        ]
      }
    },
    "/health": {
      "get": {
        "description": "apiHealthHandler will return ok if Grafana's web server is running and it\ncan access the database. If the database cannot be accessed it will return\nhttp status code 503.",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthResponse"
                }
              }
            },
            "description": "healthResponse"
          },
          "503": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/library-elements": {
      "get": {
        "description": "Returns a list of all library elements the authenticated user has permission to view.\nUse the `perPage` query parameter to control the maximum number of library elements returned; the default limit is `100`.\nYou can also use the `page` query parameter to fetch library elements from any page other than the first one.",
        "operationId": "getLibraryElements",
        "parameters": [
          {
            "description": "Part of the name or description searched for.",
            "in": "query",
            "name": "searchString",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Kind of element to search for.",
            "in": "query",
            "name": "kind",
            "schema": {
              "enum": [
                1,
                2
              ],
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Sort order of elements.",
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "enum": [
                "alpha-asc",
                "alpha-desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of types to filter the elements by",
            "in": "query",
            "name": "typeFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Element UID to exclude from search results.",
            "in": "query",
            "name": "excludeUid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of folder ID(s) to filter the elements by.",
            "in": "query",
            "name": "folderFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results per page.",
            "in": "query",
            "name": "perPage",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The page for a set of records, given that only perPage records are returned at a time. Numbering starts at 1.",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLibraryElementsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all library elements.",
        "tags": [
          "library_elements"
        ]
      },
      "post": {
        "description": "Creates a new library element.",
        "operationId": "createLibraryElement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLibraryElementCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLibraryElementResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create library element.",
        "tags": [
          "library_elements"
        ]
      }
    },
    "/library-elements/name/{library_element_name}": {
      "get": {
        "description": "Returns a library element with the given name.",
        "operationId": "getLibraryElementByName",
        "parameters": [
          {
            "in": "path",
            "name": "library_element_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLibraryElementArrayResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get library element by name.",
        "tags": [
          "library_elements"
        ]
      }
    },
    "/library-elements/{library_element_uid}": {
      "delete": {
        "description": "Deletes an existing library element as specified by the UID. This operation cannot be reverted.\nYou cannot delete a library element that is connected. This operation cannot be reverted.",
        "operationId": "deleteLibraryElementByUID",
        "parameters": [
          {
            "in": "path",
            "name": "library_element_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete library element.",
        "tags": [
          "library_elements"
        ]
      },
      "get": {
        "description": "Returns a library element with the given UID.",
        "operationId": "getLibraryElementByUID",
        "parameters": [
          {
            "in": "path",
            "name": "library_element_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLibraryElementResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get library element by UID.",
        "tags": [
          "library_elements"
        ]
      },
      "patch": {
        "description": "Updates an existing library element identified by uid.",
        "operationId": "updateLibraryElement",
        "parameters": [
          {
            "in": "path",
            "name": "library_element_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchLibraryElementCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLibraryElementResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "412": {
            "$ref": "#/components/responses/preconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update library element.",
        "tags": [
          "library_elements"
        ]
      }
    },
    "/library-elements/{library_element_uid}/connections/": {
      "get": {
        "description": "Returns a list of connections for a library element based on the UID specified.",
        "operationId": "getLibraryElementConnections",
        "parameters": [
          {
            "in": "path",
            "name": "library_element_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLibraryElementConnectionsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get library element connections.",
        "tags": [
          "library_elements"
        ]
      }
    },
    "/licensing/check": {
      "get": {
        "operationId": "getStatus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getStatusResponse"
          }
        },
        "summary": "Check license availability.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      }
    },
    "/licensing/custom-permissions": {
      "get": {
        "deprecated": true,
        "description": "You need to have a permission with action `licensing.reports:read`.",
        "operationId": "getCustomPermissionsReport",
        "responses": {
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get custom permissions report.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      }
    },
    "/licensing/custom-permissions-csv": {
      "get": {
        "deprecated": true,
        "description": "You need to have a permission with action `licensing.reports:read`.",
        "operationId": "getCustomPermissionsCSV",
        "responses": {
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get custom permissions report in CSV format.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      }
    },
    "/licensing/refresh-stats": {
      "get": {
        "description": "You need to have a permission with action `licensing:read`.",
        "operationId": "refreshLicenseStats",
        "responses": {
          "200": {
            "$ref": "#/components/responses/refreshLicenseStatsResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Refresh license stats.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      }
    },
    "/licensing/token": {
      "delete": {
        "description": "Removes the license stored in the Grafana database. Available in Grafana Enterprise v7.4+.\n\nYou need to have a permission with action `licensing:delete`.",
        "operationId": "deleteLicenseToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTokenCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/acceptedResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove license from database.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      },
      "get": {
        "description": "You need to have a permission with action `licensing:read`.",
        "operationId": "getLicenseToken",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLicenseTokenResponse"
          }
        },
        "summary": "Get license token.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      },
      "post": {
        "description": "You need to have a permission with action `licensing:update`.",
        "operationId": "postLicenseToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTokenCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/getLicenseTokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          }
        },
        "summary": "Create license token.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      }
    },
    "/licensing/token/renew": {
      "post": {
        "description": "Manually ask license issuer for a new token. Available in Grafana Enterprise v7.4+.\n\nYou need to have a permission with action `licensing:update`.",
        "operationId": "postRenewLicenseToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postRenewLicenseTokenResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          }
        },
        "summary": "Manually force license refresh.",
        "tags": [
          "licensing",
          "enterprise"
        ]
      }
    },
    "/logout/saml": {
      "get": {
        "operationId": "getSAMLLogout",
        "responses": {
          "302": {
            "description": "(empty)"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "GetLogout initiates single logout process.",
        "tags": [
          "saml",
          "enterprise"
        ]
      }
    },
    "/org": {
      "get": {
        "operationId": "getCurrentOrg",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getCurrentOrgResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get current Organization.",
        "tags": [
          "org"
        ]
      },
      "put": {
        "operationId": "updateCurrentOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update current Organization.",
        "tags": [
          "org"
        ]
      }
    },
    "/org/address": {
      "put": {
        "operationId": "updateCurrentOrgAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgAddressForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update current Organization's address.",
        "tags": [
          "org"
        ]
      }
    },
    "/org/invites": {
      "get": {
        "operationId": "getPendingOrgInvites",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPendingOrgInvitesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get pending invites.",
        "tags": [
          "org_invites"
        ]
      },
      "post": {
        "operationId": "addOrgInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddInviteForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "412": {
            "$ref": "#/components/responses/SMTPNotEnabledError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add invite.",
        "tags": [
          "org_invites"
        ]
      }
    },
    "/org/invites/{invitation_code}/revoke": {
      "delete": {
        "operationId": "revokeInvite",
        "parameters": [
          {
            "in": "path",
            "name": "invitation_code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Revoke invite.",
        "tags": [
          "org_invites"
        ]
      }
    },
    "/org/preferences": {
      "get": {
        "operationId": "getOrgPreferences",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPreferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get Current Org Prefs.",
        "tags": [
          "org_preferences"
        ]
      },
      "patch": {
        "operationId": "patchOrgPreferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPrefsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Patch Current Org Prefs.",
        "tags": [
          "org_preferences"
        ]
      },
      "put": {
        "operationId": "updateOrgPreferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrefsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Current Org Prefs.",
        "tags": [
          "org_preferences"
        ]
      }
    },
    "/org/quotas": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `orgs.quotas:read` and scope `org:id:1` (orgIDScope).",
        "operationId": "getCurrentOrgQuota",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQuotaResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch Organization quota.",
        "tags": [
          "getCurrentOrg"
        ]
      }
    },
    "/org/users": {
      "get": {
        "description": "Returns all org users within the current organization. Accessible to users with org admin role.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:read` with scope `users:*`.",
        "operationId": "getOrgUsersForCurrentOrg",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getOrgUsersForCurrentOrgResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all users within the current organization.",
        "tags": [
          "org"
        ]
      },
      "post": {
        "description": "Adds a global user to the current organization.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:add` with scope `users:*`.",
        "operationId": "addOrgUserToCurrentOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrgUserCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add a new user to the current organization.",
        "tags": [
          "org"
        ]
      }
    },
    "/org/users/lookup": {
      "get": {
        "description": "Returns all org users within the current organization, but with less detailed information.\nAccessible to users with org admin role, admin in any folder or admin of any team.\nMainly used by Grafana UI for providing list of users when adding team members and when editing folder/dashboard permissions.",
        "operationId": "getOrgUsersForCurrentOrgLookup",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getOrgUsersForCurrentOrgLookupResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get all users within the current organization (lookup)",
        "tags": [
          "org"
        ]
      }
    },
    "/org/users/{user_id}": {
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:remove` with scope `users:*`.",
        "operationId": "removeOrgUserForCurrentOrg",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete user in current organization.",
        "tags": [
          "org"
        ]
      },
      "patch": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users.role:update` with scope `users:*`.",
        "operationId": "updateOrgUserForCurrentOrg",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgUserCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Updates the given user.",
        "tags": [
          "org"
        ]
      }
    },
    "/orgs": {
      "get": {
        "operationId": "searchOrgs",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page\nThe totalCount field in the response can be used for pagination list E.g. if totalCount is equal to 100 teams and the perpage parameter is set to 10 then there are 10 pages of teams.",
            "in": "query",
            "name": "perpage",
            "schema": {
              "default": 1000,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set it will return results where the query value is contained in the name field. Query values with spaces need to be URL encoded.",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchOrgsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Search all Organizations.",
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "description": "Only works if [users.allow_org_create](https://grafana.com/docs/grafana/latest/administration/configuration/#allow_org_create) is set.",
        "operationId": "createOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createOrgResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create Organization.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/name/{org_name}": {
      "get": {
        "operationId": "getOrgByName",
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getOrgByNameResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get Organization by ID.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}": {
      "delete": {
        "operationId": "deleteOrgByID",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Delete Organization.",
        "tags": [
          "orgs"
        ]
      },
      "get": {
        "operationId": "getOrgByID",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getOrgByIDResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get Organization by ID.",
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "operationId": "updateOrg",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update Organization.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}/address": {
      "put": {
        "operationId": "updateOrgAddress",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgAddressForm"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Organization's address.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}/quotas": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `orgs.quotas:read` and scope `org:id:1` (orgIDScope).",
        "operationId": "getOrgQuota",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQuotaResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch Organization quota.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}/quotas/{quota_target}": {
      "put": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, you need to have a permission with action `orgs.quotas:write` and scope `org:id:1` (orgIDScope).",
        "operationId": "updateOrgQuota",
        "parameters": [
          {
            "in": "path",
            "name": "quota_target",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuotaCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update user quota.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}/users": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:read` with scope `users:*`.",
        "operationId": "getOrgUsers",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getOrgUsersResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get Users in Organization.",
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "description": "Adds a global user to the current organization.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:add` with scope `users:*`.",
        "operationId": "addOrgUser",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrgUserCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add a new user to the current organization.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}/users/search": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:read` with scope `users:*`.",
        "operationId": "searchOrgUsers",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchOrgUsersResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Search Users in Organization.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{org_id}/users/{user_id}": {
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users:remove` with scope `users:*`.",
        "operationId": "removeOrgUser",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete user in current organization.",
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `org.users.role:update` with scope `users:*`.",
        "operationId": "updateOrgUser",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgUserCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Users in Organization.",
        "tags": [
          "orgs"
        ]
      }
    },
    "/playlists": {
      "get": {
        "operationId": "searchPlaylists",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "in:limit",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchPlaylistsResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get playlists.",
        "tags": [
          "playlists"
        ]
      },
      "post": {
        "operationId": "createPlaylist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlaylistCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createPlaylistResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create playlist.",
        "tags": [
          "playlists"
        ]
      }
    },
    "/playlists/{uid}": {
      "delete": {
        "operationId": "deletePlaylist",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete playlist.",
        "tags": [
          "playlists"
        ]
      },
      "get": {
        "operationId": "getPlaylist",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPlaylistResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get playlist.",
        "tags": [
          "playlists"
        ]
      },
      "put": {
        "operationId": "updatePlaylist",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlaylistCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updatePlaylistResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update playlist.",
        "tags": [
          "playlists"
        ]
      }
    },
    "/playlists/{uid}/items": {
      "get": {
        "operationId": "getPlaylistItems",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPlaylistItemsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get playlist items.",
        "tags": [
          "playlists"
        ]
      }
    },
    "/public/dashboards/{accessToken}": {
      "get": {
        "description": "Get public dashboard for view",
        "operationId": "viewPublicDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "accessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/viewPublicDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      }
    },
    "/public/dashboards/{accessToken}/annotations": {
      "get": {
        "description": "Get annotations for a public dashboard",
        "operationId": "getPublicAnnotations",
        "parameters": [
          {
            "in": "path",
            "name": "accessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPublicAnnotationsResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      }
    },
    "/public/dashboards/{accessToken}/panels/{panelId}/query": {
      "post": {
        "description": "Get results for a given panel on a public dashboard",
        "operationId": "queryPublicDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "accessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "panelId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryPublicDashboardResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestPublicError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedPublicError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenPublicError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundPublicError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerPublicError"
          }
        },
        "tags": [
          "dashboard_public"
        ]
      }
    },
    "/query-history": {
      "get": {
        "description": "Returns a list of queries in the query history that matches the search criteria.\nQuery history search supports pagination. Use the `limit` parameter to control the maximum number of queries returned; the default limit is 100.\nYou can also use the `page` query parameter to fetch queries from any page other than the first one.",
        "operationId": "searchQueries",
        "parameters": [
          {
            "description": "List of data source UIDs to search for",
            "in": "query",
            "name": "datasourceUid",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Text inside query or comments that is searched for",
            "in": "query",
            "name": "searchString",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indicating if only starred queries should be returned",
            "in": "query",
            "name": "onlyStarred",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort method",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "time-desc",
              "enum": [
                "time-desc",
                "time-asc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size.",
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Limit the number of returned results",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "From range for the query history search",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "To range for the query history search",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQueryHistorySearchResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Query history search.",
        "tags": [
          "query_history"
        ]
      },
      "post": {
        "description": "Adds new query to query history.",
        "operationId": "createQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQueryInQueryHistoryCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQueryHistoryResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add query to query history.",
        "tags": [
          "query_history"
        ]
      }
    },
    "/query-history/star/{query_history_uid}": {
      "delete": {
        "description": "Removes star from query in query history as specified by the UID.",
        "operationId": "unstarQuery",
        "parameters": [
          {
            "in": "path",
            "name": "query_history_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQueryHistoryResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove star to query in query history.",
        "tags": [
          "query_history"
        ]
      },
      "post": {
        "description": "Adds star to query in query history as specified by the UID.",
        "operationId": "starQuery",
        "parameters": [
          {
            "in": "path",
            "name": "query_history_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQueryHistoryResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add star to query in query history.",
        "tags": [
          "query_history"
        ]
      }
    },
    "/query-history/{query_history_uid}": {
      "delete": {
        "description": "Deletes an existing query in query history as specified by the UID. This operation cannot be reverted.",
        "operationId": "deleteQuery",
        "parameters": [
          {
            "in": "path",
            "name": "query_history_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQueryHistoryDeleteQueryResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete query in query history.",
        "tags": [
          "query_history"
        ]
      },
      "patch": {
        "description": "Updates comment for query in query history as specified by the UID.",
        "operationId": "patchQueryComment",
        "parameters": [
          {
            "in": "path",
            "name": "query_history_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchQueryCommentInQueryHistoryCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQueryHistoryResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update comment for query in query history.",
        "tags": [
          "query_history"
        ]
      }
    },
    "/recording-rules": {
      "get": {
        "operationId": "listRecordingRules",
        "responses": {
          "200": {
            "$ref": "#/components/responses/listRecordingRulesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Lists all rules in the database: active or deleted.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      },
      "post": {
        "operationId": "createRecordingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordingRuleJSON"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/recordingRuleResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a recording rule that is then registered and started.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      },
      "put": {
        "operationId": "updateRecordingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordingRuleJSON"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/recordingRuleResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update the active status of a rule.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      }
    },
    "/recording-rules/test": {
      "post": {
        "operationId": "testCreateRecordingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordingRuleJSON"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Test a recording rule.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      }
    },
    "/recording-rules/writer": {
      "delete": {
        "operationId": "deleteRecordingRuleWriteTarget",
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete the remote write target.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      },
      "get": {
        "operationId": "getRecordingRuleWriteTarget",
        "responses": {
          "200": {
            "$ref": "#/components/responses/recordingRuleWriteTargetResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Return the prometheus remote write target.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      },
      "post": {
        "description": "It returns a 422 if there is not an existing prometheus data source configured.",
        "operationId": "createRecordingRuleWriteTarget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrometheusRemoteWriteTargetJSON"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/recordingRuleWriteTargetResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a remote write target.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      }
    },
    "/recording-rules/{recordingRuleID}": {
      "delete": {
        "operationId": "deleteRecordingRule",
        "parameters": [
          {
            "in": "path",
            "name": "recordingRuleID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete removes the rule from the registry and stops it.",
        "tags": [
          "recording_rules",
          "enterprise"
        ]
      }
    },
    "/reports": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports:read` with scope `reports:*`.",
        "operationId": "getReports",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getReportsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "List reports.",
        "tags": [
          "reports",
          "enterprise"
        ]
      },
      "post": {
        "description": "Available to org admins only and with a valid license.\n\nYou need to have a permission with action `reports.admin:create`.",
        "operationId": "createReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateReport"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createReportResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create a report.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/email": {
      "post": {
        "description": "Generate and send a report. This API waits for the report to be generated before returning. We recommend that you set the client’s timeout to at least 60 seconds. Available to org admins only and with a valid license.\n\nOnly available in Grafana Enterprise v7.0+.\nThis API endpoint is experimental and may be deprecated in a future release. On deprecation, a migration strategy will be provided and the endpoint will remain functional until the next major release of Grafana.\n\nYou need to have a permission with action `reports:send`.",
        "operationId": "sendReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportEmail"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Send a report.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/images/:image": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.settings:read`.",
        "operationId": "getSettingsImage",
        "responses": {
          "200": {
            "$ref": "#/components/responses/contentResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get custom branding report image.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/render/csvs": {
      "get": {
        "description": "Available to all users and with a valid license.",
        "operationId": "renderReportCSVs",
        "parameters": [
          {
            "in": "query",
            "name": "dashboards",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/contentResponse"
          },
          "204": {
            "$ref": "#/components/responses/noContentResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Download a CSV report.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/render/pdfs": {
      "get": {
        "description": "Available to all users and with a valid license.",
        "operationId": "renderReportPDFs",
        "parameters": [
          {
            "in": "query",
            "name": "dashboards",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orientation",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "layout",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleFactor",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeTables",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/contentResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Render report for multiple dashboards.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/settings": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.settings:read`x.",
        "operationId": "getReportSettings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getReportSettingsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get report settings.",
        "tags": [
          "reports",
          "enterprise"
        ]
      },
      "post": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.settings:write`xx.",
        "operationId": "saveReportSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSettings"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Save settings.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/test-email": {
      "post": {
        "description": "Available to org admins only and with a valid license.\n\nYou need to have a permission with action `reports:send`.",
        "operationId": "sendTestEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateReport"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Send test report via email.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/reports/{id}": {
      "delete": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.delete` with scope `reports:id:\u003creport ID\u003e`.",
        "operationId": "deleteReport",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete a report.",
        "tags": [
          "reports",
          "enterprise"
        ]
      },
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports:read` with scope `reports:id:\u003creport ID\u003e`.",
        "operationId": "getReport",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getReportResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get a report.",
        "tags": [
          "reports",
          "enterprise"
        ]
      },
      "put": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.admin:write` with scope `reports:id:\u003creport ID\u003e`.",
        "operationId": "updateReport",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateReport"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update a report.",
        "tags": [
          "reports",
          "enterprise"
        ]
      }
    },
    "/saml/acs": {
      "post": {
        "operationId": "postACS",
        "parameters": [
          {
            "in": "query",
            "name": "RelayState",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "(empty)"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "It performs Assertion Consumer Service (ACS).",
        "tags": [
          "saml",
          "enterprise"
        ]
      }
    },
    "/saml/metadata": {
      "get": {
        "operationId": "getMetadata",
        "responses": {
          "200": {
            "$ref": "#/components/responses/contentResponse"
          }
        },
        "summary": "It exposes the SP (Grafana's) metadata for the IdP's consumption.",
        "tags": [
          "saml",
          "enterprise"
        ]
      }
    },
    "/saml/slo": {
      "get": {
        "description": "There might be two possible requests:\n1. Logout response (callback) when Grafana initiates single logout and IdP returns response to logout request.\n2. Logout request when another SP initiates single logout and IdP sends logout request to the Grafana,\nor in case of IdP-initiated logout.",
        "operationId": "getSLO",
        "responses": {
          "302": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "It performs Single Logout (SLO) callback.",
        "tags": [
          "saml",
          "enterprise"
        ]
      },
      "post": {
        "description": "There might be two possible requests:\n1. Logout response (callback) when Grafana initiates single logout and IdP returns response to logout request.\n2. Logout request when another SP initiates single logout and IdP sends logout request to the Grafana,\nor in case of IdP-initiated logout.",
        "operationId": "postSLO",
        "parameters": [
          {
            "in": "query",
            "name": "SAMLRequest",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "SAMLResponse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "(empty)"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "It performs Single Logout (SLO) callback.",
        "tags": [
          "saml",
          "enterprise"
        ]
      }
    },
    "/search": {
      "get": {
        "operationId": "search",
        "parameters": [
          {
            "description": "Search Query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List of tags to search for",
            "in": "query",
            "name": "tag",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Type to search for, dash-folder or dash-db",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "dash-folder",
                "dash-db"
              ],
              "type": "string"
            }
          },
          {
            "description": "List of dashboard id’s to search for\nThis is deprecated: users should use the `dashboardUIDs` query parameter instead",
            "in": "query",
            "name": "dashboardIds",
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "List of dashboard uid’s to search for",
            "in": "query",
            "name": "dashboardUIDs",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "List of folder id’s to search in for dashboards\nIf it's `0` then it will query for the top level folders\nThis is deprecated: users should use the `folderUIDs` query parameter instead",
            "in": "query",
            "name": "folderIds",
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "List of folder UID’s to search in for dashboards\nIf it's an empty string then it will query for the top level folders",
            "in": "query",
            "name": "folderUIDs",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Flag indicating if only starred Dashboards should be returned",
            "in": "query",
            "name": "starred",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit the number of returned results (max 5000)",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.",
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Set to `Edit` to return dashboards/folders that the user can edit",
            "in": "query",
            "name": "permission",
            "schema": {
              "default": "View",
              "enum": [
                "Edit",
                "View"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort method; for listing all the possible sort methods use the search sorting endpoint.",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "alpha-asc",
              "enum": [
                "alpha-asc",
                "alpha-desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Flag indicating if only soft deleted Dashboards should be returned",
            "in": "query",
            "name": "deleted",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "search"
        ]
      },
      "post": {
        "operationId": "SearchDevices",
        "responses": {
          "200": {
            "$ref": "#/components/responses/devicesSearchResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Lists all devices within the last 30 days",
        "tags": [
          "devices"
        ]
      }
    },
    "/search/sorting": {
      "get": {
        "operationId": "listSortOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/listSortOptionsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          }
        },
        "summary": "List search sorting options.",
        "tags": [
          "search"
        ]
      }
    },
    "/serviceaccounts": {
      "post": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:write` scope: `serviceaccounts:*`\n\nRequires basic authentication and that the authenticated user is a Grafana Admin.",
        "operationId": "createServiceAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountForm"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createServiceAccountResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Create service account",
        "tags": [
          "service_accounts"
        ]
      }
    },
    "/serviceaccounts/search": {
      "get": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:read` scope: `serviceaccounts:*`",
        "operationId": "searchOrgServiceAccountsWithPaging",
        "parameters": [
          {
            "in": "query",
            "name": "Disabled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "expiredTokens",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "It will return results where the query value is contained in one of the name.\nQuery values with spaces need to be URL encoded.",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The default value is 1000.",
            "in": "query",
            "name": "perpage",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The default value is 1.",
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchOrgServiceAccountsWithPagingResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Search service accounts with paging",
        "tags": [
          "service_accounts"
        ]
      }
    },
    "/serviceaccounts/{serviceAccountId}": {
      "delete": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:delete` scope: `serviceaccounts:id:1` (single service account)",
        "operationId": "deleteServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete service account",
        "tags": [
          "service_accounts"
        ]
      },
      "get": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:read` scope: `serviceaccounts:id:1` (single service account)",
        "operationId": "retrieveServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveServiceAccountResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get single serviceaccount by Id",
        "tags": [
          "service_accounts"
        ]
      },
      "patch": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)",
        "operationId": "updateServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceAccountForm"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateServiceAccountResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update service account",
        "tags": [
          "service_accounts"
        ]
      }
    },
    "/serviceaccounts/{serviceAccountId}/tokens": {
      "get": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:read` scope: `global:serviceaccounts:id:1` (single service account)\n\nRequires basic authentication and that the authenticated user is a Grafana Admin.",
        "operationId": "listTokens",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listTokensResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get service account tokens",
        "tags": [
          "service_accounts"
        ]
      },
      "post": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)",
        "operationId": "createToken",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddServiceAccountTokenCommand"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createTokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "CreateNewToken adds a token to a service account",
        "tags": [
          "service_accounts"
        ]
      }
    },
    "/serviceaccounts/{serviceAccountId}/tokens/{tokenId}": {
      "delete": {
        "description": "Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\naction: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)\n\nRequires basic authentication and that the authenticated user is a Grafana Admin.",
        "operationId": "deleteToken",
        "parameters": [
          {
            "in": "path",
            "name": "tokenId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "serviceAccountId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "DeleteToken deletes service account tokens",
        "tags": [
          "service_accounts"
        ]
      }
    },
    "/signing-keys/keys": {
      "get": {
        "description": "Required permissions\nNone",
        "operationId": "retrieveJWKS",
        "responses": {
          "200": {
            "$ref": "#/components/responses/jwksResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get JSON Web Key Set (JWKS) with all the keys that can be used to verify tokens (public keys)",
        "tags": [
          "signing_keys"
        ]
      }
    },
    "/snapshot/shared-options": {
      "get": {
        "operationId": "getSharingOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSharingOptionsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          }
        },
        "summary": "Get snapshot sharing settings.",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots": {
      "post": {
        "description": "Snapshot public mode should be enabled or authentication is required.",
        "operationId": "createDashboardSnapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDashboardSnapshotCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createDashboardSnapshotResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "When creating a snapshot using the API, you have to provide the full dashboard payload including the snapshot data. This endpoint is designed for the Grafana UI.",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots-delete/{deleteKey}": {
      "get": {
        "description": "Snapshot public mode should be enabled or authentication is required.",
        "operationId": "deleteDashboardSnapshotByDeleteKey",
        "parameters": [
          {
            "in": "path",
            "name": "deleteKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete Snapshot by deleteKey.",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/snapshots/{key}": {
      "delete": {
        "operationId": "deleteDashboardSnapshot",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete Snapshot by Key.",
        "tags": [
          "snapshots"
        ]
      },
      "get": {
        "operationId": "getDashboardSnapshot",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDashboardSnapshotResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get Snapshot by Key.",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/stats": {
      "get": {
        "operationId": "listDevices",
        "responses": {
          "200": {
            "$ref": "#/components/responses/devicesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Lists all devices within the last 30 days",
        "tags": [
          "devices"
        ]
      }
    },
    "/teams": {
      "post": {
        "operationId": "createTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createTeamResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add Team.",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/search": {
      "get": {
        "operationId": "searchTeams",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page\nThe totalCount field in the response can be used for pagination list E.g. if totalCount is equal to 100 teams and the perpage parameter is set to 10 then there are 10 pages of teams.",
            "in": "query",
            "name": "perpage",
            "schema": {
              "default": 1000,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set it will return results where the query value is contained in the name field. Query values with spaces need to be URL encoded.",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchTeamsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Team Search With Paging.",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{teamId}/groups": {
      "delete": {
        "operationId": "removeTeamGroupApiQuery",
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove External Group.",
        "tags": [
          "sync_team_groups",
          "enterprise"
        ]
      },
      "get": {
        "operationId": "getTeamGroupsApi",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getTeamGroupsApiResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get External Groups.",
        "tags": [
          "sync_team_groups",
          "enterprise"
        ]
      },
      "post": {
        "operationId": "addTeamGroupApi",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamGroupMapping"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add External Group.",
        "tags": [
          "sync_team_groups",
          "enterprise"
        ]
      }
    },
    "/teams/{team_id}": {
      "delete": {
        "operationId": "deleteTeamByID",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Delete Team By ID.",
        "tags": [
          "teams"
        ]
      },
      "get": {
        "operationId": "getTeamByID",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getTeamByIDResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get Team By ID.",
        "tags": [
          "teams"
        ]
      },
      "put": {
        "operationId": "updateTeam",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Team.",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_id}/members": {
      "get": {
        "operationId": "getTeamMembers",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getTeamMembersResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get Team Members.",
        "tags": [
          "teams"
        ]
      },
      "post": {
        "operationId": "addTeamMember",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMemberCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Add Team Member.",
        "tags": [
          "teams"
        ]
      },
      "put": {
        "description": "Takes user emails, and updates team members and admins to the provided lists of users.\nAny current team members and admins not in the provided lists will be removed.",
        "operationId": "setTeamMemberships",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTeamMembershipsCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set team memberships.",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_id}/members/{user_id}": {
      "delete": {
        "operationId": "removeTeamMember",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove Member From Team.",
        "tags": [
          "teams"
        ]
      },
      "put": {
        "operationId": "updateTeamMember",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamMemberCommand"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Team Member.",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{team_id}/preferences": {
      "get": {
        "operationId": "getTeamPreferences",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPreferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get Team Preferences.",
        "tags": [
          "teams"
        ]
      },
      "put": {
        "operationId": "updateTeamPreferences",
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrefsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update Team Preferences.",
        "tags": [
          "teams"
        ]
      }
    },
    "/user": {
      "get": {
        "description": "Get (current authenticated user)",
        "operationId": "getSignedInUser",
        "responses": {
          "200": {
            "$ref": "#/components/responses/userResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "tags": [
          "signed_in_user"
        ]
      },
      "put": {
        "operationId": "updateSignedInUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserCommand"
              }
            }
          },
          "description": "To change the email, name, login, theme, provide another one.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update signed in User.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/auth-tokens": {
      "get": {
        "description": "Return a list of all auth tokens (devices) that the actual user currently have logged in from.",
        "operationId": "getUserAuthTokens",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserAuthTokensResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Auth tokens of the actual User.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/email/update": {
      "get": {
        "description": "Update the email of user given a verification code.",
        "operationId": "updateUserEmail",
        "responses": {
          "302": {
            "$ref": "#/components/responses/okResponse"
          }
        },
        "summary": "Update user email.",
        "tags": [
          "user"
        ]
      }
    },
    "/user/helpflags/clear": {
      "get": {
        "operationId": "clearHelpFlags",
        "responses": {
          "200": {
            "$ref": "#/components/responses/helpFlagResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Clear user help flag.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/helpflags/{flag_id}": {
      "put": {
        "operationId": "setHelpFlag",
        "parameters": [
          {
            "in": "path",
            "name": "flag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/helpFlagResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Set user help flag.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/orgs": {
      "get": {
        "description": "Return a list of all organizations of the current user.",
        "operationId": "getSignedInUserOrgList",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSignedInUserOrgListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Organizations of the actual User.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/password": {
      "put": {
        "description": "Changes the password for the user.",
        "operationId": "changeUserPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserPasswordCommand"
              }
            }
          },
          "description": "To change the email, name, login, theme, provide another one.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Change Password.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/preferences": {
      "get": {
        "operationId": "getUserPreferences",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPreferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get user preferences.",
        "tags": [
          "user_preferences"
        ]
      },
      "patch": {
        "operationId": "patchUserPreferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPrefsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Patch user preferences.",
        "tags": [
          "user_preferences"
        ]
      },
      "put": {
        "description": "Omitting a key (`theme`, `homeDashboardId`, `timezone`) will cause the current value to be replaced with the system default value.",
        "operationId": "updateUserPreferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrefsCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update user preferences.",
        "tags": [
          "user_preferences"
        ]
      }
    },
    "/user/quotas": {
      "get": {
        "operationId": "getUserQuotas",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getQuotaResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Fetch user quota.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/revoke-auth-token": {
      "post": {
        "description": "Revokes the given auth token (device) for the actual user. User of issued auth token (device) will no longer be logged in and will be required to authenticate again upon next activity.",
        "operationId": "revokeUserAuthToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeAuthTokenCmd"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Revoke an auth token of the actual User.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/stars/dashboard/uid/{dashboard_uid}": {
      "delete": {
        "description": "Deletes the starring of the given Dashboard for the actual user.",
        "operationId": "unstarDashboardByUID",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Unstar a dashboard.",
        "tags": [
          "signed_in_user"
        ]
      },
      "post": {
        "description": "Stars the given Dashboard for the actual user.",
        "operationId": "starDashboardByUID",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Star a dashboard.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/stars/dashboard/{dashboard_id}": {
      "delete": {
        "deprecated": true,
        "description": "Deletes the starring of the given Dashboard for the actual user.",
        "operationId": "unstarDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Unstar a dashboard.",
        "tags": [
          "signed_in_user"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Stars the given Dashboard for the actual user.",
        "operationId": "starDashboard",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Star a dashboard.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/teams": {
      "get": {
        "description": "Return a list of all teams that the current user is member of.",
        "operationId": "getSignedInUserTeamList",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSignedInUserTeamListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Teams that the actual User is member of.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/user/using/{org_id}": {
      "post": {
        "description": "Switch user context to the given organization.",
        "operationId": "userSetUsingOrg",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Switch user context for signed in user.",
        "tags": [
          "signed_in_user"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Returns all users that the authenticated user has permission to view, admin permission required.",
        "operationId": "searchUsers",
        "parameters": [
          {
            "description": "Limit the maximum number of users to return per page",
            "in": "query",
            "name": "perpage",
            "schema": {
              "default": 1000,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Page index for starting fetching users",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchUsersResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get users.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/lookup": {
      "get": {
        "operationId": "getUserByLoginOrEmail",
        "parameters": [
          {
            "description": "loginOrEmail of the user",
            "in": "query",
            "name": "loginOrEmail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/userResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get user by login or email.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/search": {
      "get": {
        "operationId": "searchUsersWithPaging",
        "responses": {
          "200": {
            "$ref": "#/components/responses/searchUsersWithPagingResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get users with paging.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "operationId": "getUserByID",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/userResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get user by id.",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "Update the user identified by id.",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserCommand"
              }
            }
          },
          "description": "To change the email, name, login, theme, provide another one.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/okResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "409": {
            "$ref": "#/components/responses/conflictError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update user.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/orgs": {
      "get": {
        "description": "Get organizations for user identified by id.",
        "operationId": "getUserOrgList",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserOrgListResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get organizations for user.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}/teams": {
      "get": {
        "description": "Get teams for user identified by id.",
        "operationId": "getUserTeams",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserTeamsResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Get teams for user.",
        "tags": [
          "users"
        ]
      }
    },
    "/v1/provisioning/alert-rules": {
      "get": {
        "operationId": "RouteGetAlertRules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionedAlertRules"
                }
              }
            },
            "description": "ProvisionedAlertRules"
          }
        },
        "summary": "Get all the alert rules.",
        "tags": [
          "provisioning"
        ]
      },
      "post": {
        "operationId": "RoutePostAlertRule",
        "parameters": [
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisionedAlertRule"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionedAlertRule"
                }
              }
            },
            "description": "ProvisionedAlertRule"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Create a new alert rule.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/alert-rules/export": {
      "get": {
        "operationId": "RouteGetAlertRulesExport",
        "parameters": [
          {
            "description": "Whether to initiate a download of the file or not.",
            "in": "query",
            "name": "download",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the downloaded file. Supported yaml, json or hcl. Accept header can also be used, but the query parameter will take precedence.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json",
                "hcl"
              ],
              "type": "string"
            }
          },
          {
            "description": "UIDs of folders from which to export rules",
            "in": "query",
            "name": "folderUid",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Name of group of rules to export. Must be specified only together with a single folder UID",
            "in": "query",
            "name": "group",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "UID of alert rule to export. If specified, parameters folderUid and group must be empty.",
            "in": "query",
            "name": "ruleUid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "404": {
            "description": " Not found."
          }
        },
        "summary": "Export all alert rules in provisioning file format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/alert-rules/{UID}": {
      "delete": {
        "operationId": "RouteDeleteAlertRule",
        "parameters": [
          {
            "description": "Alert rule UID",
            "in": "path",
            "name": "UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": " The alert rule was deleted successfully."
          }
        },
        "summary": "Delete a specific alert rule by UID.",
        "tags": [
          "provisioning"
        ]
      },
      "get": {
        "operationId": "RouteGetAlertRule",
        "parameters": [
          {
            "description": "Alert rule UID",
            "in": "path",
            "name": "UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionedAlertRule"
                }
              }
            },
            "description": "ProvisionedAlertRule"
          },
          "404": {
            "description": " Not found."
          }
        },
        "summary": "Get a specific alert rule by UID.",
        "tags": [
          "provisioning"
        ]
      },
      "put": {
        "operationId": "RoutePutAlertRule",
        "parameters": [
          {
            "description": "Alert rule UID",
            "in": "path",
            "name": "UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisionedAlertRule"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionedAlertRule"
                }
              }
            },
            "description": "ProvisionedAlertRule"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Update an existing alert rule.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/alert-rules/{UID}/export": {
      "get": {
        "operationId": "RouteGetAlertRuleExport",
        "parameters": [
          {
            "description": "Whether to initiate a download of the file or not.",
            "in": "query",
            "name": "download",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the downloaded file. Supported yaml, json or hcl. Accept header can also be used, but the query parameter will take precedence.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json",
                "hcl"
              ],
              "type": "string"
            }
          },
          {
            "description": "Alert rule UID",
            "in": "path",
            "name": "UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "404": {
            "description": " Not found."
          }
        },
        "summary": "Export an alert rule in provisioning file format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/contact-points": {
      "get": {
        "operationId": "RouteGetContactpoints",
        "parameters": [
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPoints"
                }
              }
            },
            "description": "ContactPoints"
          }
        },
        "summary": "Get all the contact points.",
        "tags": [
          "provisioning"
        ]
      },
      "post": {
        "operationId": "RoutePostContactpoints",
        "parameters": [
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddedContactPoint"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedContactPoint"
                }
              }
            },
            "description": "EmbeddedContactPoint"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Create a contact point.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/contact-points/export": {
      "get": {
        "operationId": "RouteGetContactpointsExport",
        "parameters": [
          {
            "description": "Whether to initiate a download of the file or not.",
            "in": "query",
            "name": "download",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the downloaded file. Supported yaml, json or hcl. Accept header can also be used, but the query parameter will take precedence.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json",
                "hcl"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether any contained secure settings should be decrypted or left redacted. Redacted settings will contain RedactedValue instead. Currently, only org admin can view decrypted secure settings.",
            "in": "query",
            "name": "decrypt",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "PermissionDenied"
          }
        },
        "summary": "Export all contact points in provisioning file format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/contact-points/{UID}": {
      "delete": {
        "operationId": "RouteDeleteContactpoints",
        "parameters": [
          {
            "description": "UID is the contact point unique identifier",
            "in": "path",
            "name": "UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": " The contact point was deleted successfully."
          }
        },
        "summary": "Delete a contact point.",
        "tags": [
          "provisioning"
        ]
      },
      "put": {
        "operationId": "RoutePutContactpoint",
        "parameters": [
          {
            "description": "UID is the contact point unique identifier",
            "in": "path",
            "name": "UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddedContactPoint"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                }
              }
            },
            "description": "Ack"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Update an existing contact point.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}": {
      "delete": {
        "description": "Delete rule group",
        "operationId": "RouteDeleteAlertRuleGroup",
        "parameters": [
          {
            "in": "path",
            "name": "FolderUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": " The alert rule group was deleted successfully."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            },
            "description": "ForbiddenError"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "tags": [
          "provisioning"
        ]
      },
      "get": {
        "operationId": "RouteGetAlertRuleGroup",
        "parameters": [
          {
            "in": "path",
            "name": "FolderUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRuleGroup"
                }
              }
            },
            "description": "AlertRuleGroup"
          },
          "404": {
            "description": " Not found."
          }
        },
        "summary": "Get a rule group.",
        "tags": [
          "provisioning"
        ]
      },
      "put": {
        "operationId": "RoutePutAlertRuleGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "FolderUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertRuleGroup"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRuleGroup"
                }
              }
            },
            "description": "AlertRuleGroup"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Create or update alert rule group.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}/export": {
      "get": {
        "operationId": "RouteGetAlertRuleGroupExport",
        "parameters": [
          {
            "description": "Whether to initiate a download of the file or not.",
            "in": "query",
            "name": "download",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the downloaded file. Supported yaml, json or hcl. Accept header can also be used, but the query parameter will take precedence.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json",
                "hcl"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "FolderUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "404": {
            "description": " Not found."
          }
        },
        "summary": "Export an alert rule group in provisioning file format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/mute-timings": {
      "get": {
        "operationId": "RouteGetMuteTimings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MuteTimings"
                }
              }
            },
            "description": "MuteTimings"
          }
        },
        "summary": "Get all the mute timings.",
        "tags": [
          "provisioning"
        ]
      },
      "post": {
        "operationId": "RoutePostMuteTiming",
        "parameters": [
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuteTimeInterval"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MuteTimeInterval"
                }
              }
            },
            "description": "MuteTimeInterval"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Create a new mute timing.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/mute-timings/export": {
      "get": {
        "operationId": "RouteExportMuteTimings",
        "parameters": [
          {
            "description": "Whether to initiate a download of the file or not.",
            "in": "query",
            "name": "download",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the downloaded file. Supported yaml, json or hcl. Accept header can also be used, but the query parameter will take precedence.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json",
                "hcl"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "PermissionDenied"
          }
        },
        "summary": "Export all mute timings in provisioning format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/mute-timings/{name}": {
      "delete": {
        "operationId": "RouteDeleteMuteTiming",
        "parameters": [
          {
            "description": "Mute timing name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of mute timing to use for optimistic concurrency. Leave empty to disable validation",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": " The mute timing was deleted successfully."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicError"
                }
              }
            },
            "description": "PublicError"
          }
        },
        "summary": "Delete a mute timing.",
        "tags": [
          "provisioning"
        ]
      },
      "get": {
        "operationId": "RouteGetMuteTiming",
        "parameters": [
          {
            "description": "Mute timing name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MuteTimeInterval"
                }
              }
            },
            "description": "MuteTimeInterval"
          },
          "404": {
            "description": " Not found."
          }
        },
        "summary": "Get a mute timing.",
        "tags": [
          "provisioning"
        ]
      },
      "put": {
        "operationId": "RoutePutMuteTiming",
        "parameters": [
          {
            "description": "Mute timing name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuteTimeInterval"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MuteTimeInterval"
                }
              }
            },
            "description": "MuteTimeInterval"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicError"
                }
              }
            },
            "description": "PublicError"
          }
        },
        "summary": "Replace an existing mute timing.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/mute-timings/{name}/export": {
      "get": {
        "operationId": "RouteExportMuteTiming",
        "parameters": [
          {
            "description": "Whether to initiate a download of the file or not.",
            "in": "query",
            "name": "download",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Format of the downloaded file. Supported yaml, json or hcl. Accept header can also be used, but the query parameter will take precedence.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json",
                "hcl"
              ],
              "type": "string"
            }
          },
          {
            "description": "Mute timing name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDenied"
                }
              }
            },
            "description": "PermissionDenied"
          }
        },
        "summary": "Export a mute timing in provisioning format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/policies": {
      "delete": {
        "operationId": "RouteResetPolicyTree",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                }
              }
            },
            "description": "Ack"
          }
        },
        "summary": "Clears the notification policy tree.",
        "tags": [
          "provisioning"
        ]
      },
      "get": {
        "operationId": "RouteGetPolicyTree",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Route"
          }
        },
        "summary": "Get the notification policy tree.",
        "tags": [
          "provisioning"
        ]
      },
      "put": {
        "operationId": "RoutePutPolicyTree",
        "parameters": [
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Route"
              }
            }
          },
          "description": "The new notification routing tree to use",
          "x-originalParamName": "Body"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                }
              }
            },
            "description": "Ack"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "ValidationError"
          }
        },
        "summary": "Sets the notification policy tree.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/policies/export": {
      "get": {
        "operationId": "RouteGetPolicyTreeExport",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AlertingFileExport"
                }
              }
            },
            "description": "AlertingFileExport"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              },
              "application/terraform+hcl": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              },
              "text/hcl": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "summary": "Export the notification policy tree in provisioning file format.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/templates": {
      "get": {
        "operationId": "RouteGetTemplates",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplates"
                }
              }
            },
            "description": "NotificationTemplates"
          }
        },
        "summary": "Get all notification templates.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/provisioning/templates/{name}": {
      "delete": {
        "operationId": "RouteDeleteTemplate",
        "parameters": [
          {
            "description": "Template name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of template to use for optimistic concurrency. Leave empty to disable validation",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": " The template was deleted successfully."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicError"
                }
              }
            },
            "description": "PublicError"
          }
        },
        "summary": "Delete a template.",
        "tags": [
          "provisioning"
        ]
      },
      "get": {
        "operationId": "RouteGetTemplate",
        "parameters": [
          {
            "description": "Template Name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplate"
                }
              }
            },
            "description": "NotificationTemplate"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicError"
                }
              }
            },
            "description": "PublicError"
          }
        },
        "summary": "Get a notification template.",
        "tags": [
          "provisioning"
        ]
      },
      "put": {
        "operationId": "RoutePutTemplate",
        "parameters": [
          {
            "description": "Template Name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Disable-Provenance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTemplateContent"
              }
            }
          },
          "x-originalParamName": "Body"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplate"
                }
              }
            },
            "description": "NotificationTemplate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicError"
                }
              }
            },
            "description": "PublicError"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicError"
                }
              }
            },
            "description": "PublicError"
          }
        },
        "summary": "Updates an existing notification template.",
        "tags": [
          "provisioning"
        ]
      }
    },
    "/v1/sso-settings": {
      "get": {
        "description": "You need to have a permission with action `settings:read` with scope `settings:auth.\u003cprovider\u003e:*`.",
        "operationId": "listAllProvidersSettings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/listSSOSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          }
        },
        "summary": "List all SSO Settings entries",
        "tags": [
          "sso_settings"
        ]
      }
    },
    "/v1/sso-settings/{key}": {
      "delete": {
        "description": "Removes the SSO Settings for a provider.\n\nYou need to have a permission with action `settings:write` and scope `settings:auth.\u003cprovider\u003e:*`.",
        "operationId": "removeProviderSettings",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Remove SSO Settings",
        "tags": [
          "sso_settings"
        ]
      },
      "get": {
        "description": "You need to have a permission with action `settings:read` with scope `settings:auth.\u003cprovider\u003e:*`.",
        "operationId": "getProviderSettings",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSSOSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError"
          }
        },
        "summary": "Get an SSO Settings entry by Key",
        "tags": [
          "sso_settings"
        ]
      },
      "put": {
        "description": "Inserts or updates the SSO Settings for a provider.\n\nYou need to have a permission with action `settings:write` and scope `settings:auth.\u003cprovider\u003e:*`.",
        "operationId": "updateProviderSettings",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "settings": {
                    "additionalProperties": {},
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/okResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequestError"
          },
          "401": {
            "$ref": "#/components/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/components/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/internalServerError"
          }
        },
        "summary": "Update SSO Settings",
        "tags": [
          "sso_settings"
        ]
      }
    }
  },
  "security": [
    {
      "basic": []
    },
    {
      "api_key": []
    }
  ],
  "servers": [
    {
      "url": "/api"
    }
  ],
  "tags": [
    {
      "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "datasources"
    },
    {
      "description": "Folders are identified by the identifier (id) and the unique identifier (uid).\nThe identifier (id) of a folder is an auto-incrementing numeric value and is only unique per Grafana install.\nThe unique identifier (uid) of a folder can be used for uniquely identify folders between multiple Grafana installs. It’s automatically generated if not provided when creating a folder. The uid allows having consistent URLs for accessing folders and when syncing folders between multiple Grafana installs. This means that changing the title of a folder will not break any bookmarked links to that folder.\nThe uid can have a maximum length of 40 characters.",
      "name": "folders"
    },
    {
      "description": "Permissions with `folderId=-1` are the default permissions for users with the Viewer and Editor roles. Permissions can be set for a user, a team or a role (Viewer or Editor). Permissions cannot be set for Admins - they always have access to everything.",
      "name": "folder_permissions"
    },
    {
      "description": "The Admin HTTP API does not currently work with an API Token. API Tokens are currently only linked to an organization and an organization role. They cannot be given the permission of server admin, only users can be given that permission. So in order to use these API calls you will have to use Basic Auth and the Grafana user must have the Grafana Admin permission. (The default admin user is called admin and has permission to use this API.)",
      "name": "admin"
    },
    {
      "description": "You can use the Alerting API to get information about legacy dashboard alerts and their states but this API cannot be used to modify the alert. To create new alerts or modify them you need to update the dashboard JSON that contains the alerts.\nThis topic is relevant for the legacy dashboard alerts only.\nYou can find Grafana 8 alerts API specification details [here](https://editor.swagger.io/?url=https://raw.githubusercontent.com/grafana/grafana/main/pkg/services/ngalert/api/tooling/post.json).",
      "name": "legacy_alerts"
    },
    {
      "description": "The identifier (id) of a notification channel is an auto-incrementing numeric value and is only unique per Grafana install.\nThe unique identifier (uid) of a notification channel can be used for uniquely identify a notification channel between multiple Grafana installs. It’s automatically generated if not provided when creating a notification channel. The uid allows having consistent URLs for accessing notification channels and when syncing notification channels between multiple Grafana installations, refer to alert notification channel provisioning.\nThe uid can have a maximum length of 40 characters.",
      "name": "legacy_alerts_notification_channels"
    },
    {
      "description": "Grafana Annotations feature released in Grafana 4.6. Annotations are saved in the Grafana database (sqlite, mysql or postgres). Annotations can be organization annotations that can be shown on any dashboard by configuring an annotation data source - they are filtered by tags. Or they can be tied to a panel on a dashboard and are then only shown on that panel.",
      "name": "annotations"
    },
    {
      "description": "The identifier (ID) of a library element is an auto-incrementing numeric value that is unique per Grafana install.\nThe unique identifier (UID) of a library element uniquely identifies library elements between multiple Grafana installs. It’s automatically generated unless you specify it during library element creation. The UID provides consistent URLs for accessing library elements and when syncing library elements between multiple Grafana installs.\nThe maximum length of a UID is 40 characters.",
      "name": "library_elements"
    },
    {
      "description": "The identifier (ID) of a query in query history is an auto-incrementing numeric value that is unique per Grafana install.\nThe unique identifier (UID) of a query history uniquely identifies queries in query history between multiple Grafana installs. It’s automatically generated. The UID provides consistent URLs for accessing queries in query history.",
      "name": "query_history"
    },
    {
      "description": "The Admin Organizations HTTP API does not currently work with an API Token. API Tokens are currently only linked to an organization and an organization role. They cannot be given the permission of server admin, only users can be given that permission. So in order to use these API calls you will have to use Basic Auth and the Grafana user must have the Grafana Admin permission (The default admin user is called `admin` and has permission to use this API).",
      "name": "orgs"
    },
    {
      "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "org"
    },
    {
      "description": "This API can be used to create/update/delete Teams and to add/remove users to Teams. All actions require that the user has the Admin role for the organization.",
      "name": "teams"
    },
    {
      "description": "This API can be used to enable, disable, list, add and remove permissions for a data source.\nPermissions can be set for a user or a team. Permissions cannot be set for Admins - they always have access to everything.\nThis is only available in Grafana Enterprise\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "datasource_permissions"
    },
    {
      "description": "These are only available in Grafana Enterprise",
      "name": "enterprise"
    },
    {
      "description": "The API can be used to create, update, get and list roles, and create or remove built-in role assignments. To use the API, you would need to enable fine-grained access control.\nThis only available in Grafana Enterprise.\nThe API does not currently work with an API Token. So in order to use these API endpoints you will have to use Basic auth.",
      "name": "access_control"
    },
    {
      "description": "Licensing is only available in Grafana Enterprise. Read more about Grafana Enterprise.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "licensing"
    },
    {
      "description": "This API allows you to interact programmatically with the Reporting feature.\nReporting is only available in Grafana Enterprise. Read more about Grafana Enterprise.\nIf you have Fine-grained access Control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "reports"
    },
    {
      "description": "Grafana Alerting Alertmanager-compatible endpoints",
      "name": "alertmanager"
    },
    {
      "description": "Grafana Alerting endpoints for managing rules",
      "name": "ruler"
    },
    {
      "description": "Grafana Alerting testing endpoints",
      "name": "testing"
    },
    {
      "description": "Grafana Alerting Prometheus-compatible endpoints",
      "name": "prometheus"
    },
    {
      "description": "If you are running Grafana Enterprise, for some endpoints you'll need to have specific permissions. Refer to [Role-based access control permissions](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/custom-role-actions-scopes/) for more information.",
      "name": "service_accounts"
    }
  ]
}