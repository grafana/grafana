import { Trans } from '@grafana/i18n';
import { Button, Stack } from '@grafana/ui';
import { RuleWithLocation } from 'app/types/unified-alerting';

import { AIFeedbackButtonComponent } from '../../../enterprise-components/AI/addAIFeedbackButton';
import { RuleFormType } from '../../../types/rule-form';
import {
  isCloudAlertingRuleByType,
  isCloudRecordingRuleByType,
  isGrafanaManagedRuleByType,
  isRecordingRuleByType,
} from '../../../utils/rules';
import { AlertRuleNameAndMetric } from '../AlertRuleNameInput';
import AnnotationsStep from '../AnnotationsStep';
import { CloudEvaluationBehavior } from '../CloudEvaluationBehavior';
import { GrafanaEvaluationBehaviorStep } from '../GrafanaEvaluationBehavior';
import { GrafanaFolderAndLabelsStep } from '../GrafanaFolderAndLabelsStep';
import { NotificationsStep } from '../NotificationsStep';
import { RecordingRulesNameSpaceAndGroupStep } from '../RecordingRulesNameSpaceAndGroupStep';
import { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';

type Props = {
  existing?: RuleWithLocation;
  type: RuleFormType;
  uidFromParams?: string;
  showDataSourceDependantStep: boolean;
  isSubmitting: boolean;
  onSaveClick: () => void;
  onCancelClick: () => void;
  showEditYamlButton: boolean;
  onClickEditYaml: () => void;
  checkAlertCondition: (msg?: string) => void;
};

export function AlertRuleFormContents({
  existing,
  type,
  uidFromParams,
  showDataSourceDependantStep,
  isSubmitting,
  onSaveClick,
  onCancelClick,
  showEditYamlButton,
  onClickEditYaml,
  checkAlertCondition,
}: Props) {
  return (
    <Stack direction="column" gap={3}>
      {/* Step 1 */}
      <AlertRuleNameAndMetric />

      {/* AI Feedback: automatically shown for rules generated by AI */}
      <AIFeedbackButtonComponent origin="alert-rule" shouldShowFeedbackButton={true} useRouteDetection={true} />

      {/* Step 2 */}
      <QueryAndExpressionsStep editingExistingRule={!!existing} onDataChange={checkAlertCondition} mode="edit" />

      {/* Step 3-4-5 */}
      {showDataSourceDependantStep && (
        <>
          {/* Step 3 */}
          {isGrafanaManagedRuleByType(type) && <GrafanaFolderAndLabelsStep />}

          {isCloudAlertingRuleByType(type) && <CloudEvaluationBehavior />}

          {isCloudRecordingRuleByType(type) && <RecordingRulesNameSpaceAndGroupStep />}

          {/* Step 4 & 5 & 6*/}
          {isGrafanaManagedRuleByType(type) && (
            <GrafanaEvaluationBehaviorStep existing={Boolean(existing)} enableProvisionedGroups={false} />
          )}
          {/* Notifications step*/}
          <NotificationsStep alertUid={uidFromParams} />
          {/* Annotations only for alerting rules */}
          {!isRecordingRuleByType(type) && <AnnotationsStep />}
        </>
      )}

      {/* actions */}
      <Stack direction="row" alignItems="center">
        <Button
          data-testid="save-rule"
          variant="primary"
          type="button"
          onClick={onSaveClick}
          disabled={isSubmitting}
          icon={isSubmitting ? 'spinner' : undefined}
        >
          <Trans i18nKey="alerting.alert-rule-form.action-buttons.save">Save</Trans>
        </Button>

        <Button variant="secondary" disabled={isSubmitting} type="button" onClick={onCancelClick}>
          <Trans i18nKey="alerting.common.cancel">Cancel</Trans>
        </Button>

        {showEditYamlButton && (
          <Button variant="secondary" type="button" onClick={onClickEditYaml} disabled={isSubmitting}>
            <Trans i18nKey="alerting.alert-rule-form.action-buttons.edit-yaml">Edit YAML</Trans>
          </Button>
        )}
      </Stack>
    </Stack>
  );
}

export default AlertRuleFormContents;
