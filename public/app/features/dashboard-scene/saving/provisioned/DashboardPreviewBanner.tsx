import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';

import { textUtil } from '@grafana/data';
import { Trans, t } from '@grafana/i18n';
import { config } from '@grafana/runtime';
import { Alert, Button, Field, Icon, Input, Label, Modal, Stack, TextArea } from '@grafana/ui';
import {
  useCreateRepositoryPrMutation,
  useGetRepositoryDiffQuery,
  useGetRepositoryFilesWithPathQuery,
} from 'app/api/clients/provisioning/v0alpha1';
import { GenAIButton } from 'app/features/dashboard/components/GenAI/GenAIButton';
import { EventTrackingSrc } from 'app/features/dashboard/components/GenAI/tracking';
import { Message, Role } from 'app/features/dashboard/components/GenAI/utils';
import { DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';
import { usePullRequestParam } from 'app/features/provisioning/hooks/usePullRequestParam';
import { DashboardRoutes } from 'app/types';

interface CommonBannerProps {
  queryParams: DashboardPageRouteSearchParams;
  path?: string;
  slug?: string;
}

interface DashboardPreviewBannerProps extends CommonBannerProps {
  route?: string;
}

interface DashboardPreviewBannerContentProps extends Required<Omit<CommonBannerProps, 'route'>> {}

const commonAlertProps = {
  severity: 'info' as const,
  style: { flex: 0 } as const,
};

interface GitHubPRForm {
  title: string;
  description: string;
  baseBranch: string;
}

const LOCAL_STORAGE_ALWAYS_AUTOGEN_PR_KEY = 'provisioning_pr_always_autogen';

const CreatePullRequestModal = ({
  slug,
  branch,
  isOpen,
  onDismiss,
}: {
  slug: string;
  branch: string;
  isOpen: boolean;
  onDismiss: () => void;
}) => {
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<GitHubPRForm>();

  const { data: diffData, isLoading: isDiffLoading } = useGetRepositoryDiffQuery(
    {
      name: slug,
      ref: branch,
    },
    {
      skip: !isOpen,
    }
  );

  const [showAutoGenCheckbox, setShowAutoGenCheckbox] = useState(false);
  const [alwaysAutoGenAll, setAlwaysAutoGenAll] = useState(() => {
    return localStorage.getItem(LOCAL_STORAGE_ALWAYS_AUTOGEN_PR_KEY) === 'true';
  });
  const [hasAutoGeneratedAll, setHasAutoGeneratedAll] = useState(false);

  // Auto-generate all fields (trigger all GenAIButtons)
  const autoGenerateAll = () => {
    // Retry logic for each field
    const ids = ['title-ai-button-container', 'description-ai-button-container'];
    ids.forEach((id) => {
      let retries = 0;
      const maxRetries = 5;
      const retryDelay = 120;
      function tryClick() {
        const btn = document.getElementById(id)?.querySelector('button');
        if (btn) {
          btn.click();
          return true;
        }
        return false;
      }
      function clickWithRetry() {
        if (tryClick()) {
          return
        };
        if (retries < maxRetries) {
          retries++;
          setTimeout(clickWithRetry, retryDelay);
        } else {
          console.warn(`GenAIButton for ${id} not found after ${maxRetries} retries`);
        }
      }
      clickWithRetry();
    });
    setShowAutoGenCheckbox(true);
    setHasAutoGeneratedAll(true);
  };

  // Auto-generate on modal open if alwaysAutoGenAll is set
  useEffect(() => {
    if (isOpen && alwaysAutoGenAll && !hasAutoGeneratedAll && !isDiffLoading) {
      autoGenerateAll();
    }
  }, [isOpen, alwaysAutoGenAll, hasAutoGeneratedAll, isDiffLoading]);

  // Reset when modal closes
  useEffect(() => {
    if (!isOpen) {
      setHasAutoGeneratedAll(false);
    }
  }, [isOpen]);

  const handleAutoGenCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAlwaysAutoGenAll(e.target.checked);
    localStorage.setItem(LOCAL_STORAGE_ALWAYS_AUTOGEN_PR_KEY, e.target.checked ? 'true' : 'false');
  };

  const [
    createPullRequest,
    { isLoading: isCreatingPullRequest },
  ] = useCreateRepositoryPrMutation();

  const onSubmit = async (data: GitHubPRForm) => {
    createPullRequest({
      name: slug,
      ref: branch,
      title: data.title,
      content: data.description,
    });
  };

  const titleMessage: Message[] = [
    {
      role: Role.system,
      content: `You are an expert in creating pull request in Github and titles for them.
  Your goal is to write a short but descriptive title for a pull request.
  The title should explain the purpose of the pull request.
  It should be between 10-30 characters and be helpful for users to understand the pull request's value.
  Do not include quotes in your response.
  The response should contain ONLY the proposed title, no other text.
  `,
    },
    {
      role: Role.user,
      content: `Create a title for a pull request."
  These are the changes between the current branch and the master branch: ${JSON.stringify(diffData?.diff?.files)}
  These are the commits of the current branch:
  ${JSON.stringify(diffData?.diff?.commits)}
  `,
    },
  ];

  const descriptionMessage: Message[] = [
    {
      role: Role.system,
      content: `You are an expert in creating pull request in Github and descriptions for them.
  Your goal is to write a descriptive and informative pull request description.
  The description should explain the purpose of the pull request.
  The response should contain ONLY the proposed description, no other text.
  `,
    },
    {
      role: Role.user,
      content: `Create a description for a pull request"
These are the changes between the current branch and the master branch: ${JSON.stringify(diffData?.diff?.files)}
These are the commits of the current branch:
${JSON.stringify(diffData?.diff?.commits)}
`,
    },
  ];

  return (
    <Modal
      isOpen
      title={t('dashboard-scene.dashboard-preview-banner.create-pull-request', 'Create pull request')}
      onDismiss={onDismiss}
    >
      <fieldset disabled={isCreatingPullRequest}>
        <form onSubmit={handleSubmit(onSubmit)}>
          <Stack direction="column" gap={2}>
            <Field
              noMargin
              invalid={!!errors.title}
              error={errors.title?.message}
              label={
                <Stack direction="row" justifyContent="space-between" alignItems="center" gap={1}>
                  <Label>{t('dashboard-scene.dashboard-preview-banner.title', 'Title')}</Label>
                  <Stack direction="row" alignItems="center" gap={0.5}>
                    {/* {isDiffLoading && <Spinner />} */}
                    <div id="title-ai-button-container"> 
                    <GenAIButton
                      tooltip={t(
                        'provisioned-resource-form.save-or-delete-resource-shared-fields.ai-fill-path',
                        'AI autofill title'
                      )}
                      messages={titleMessage}
                      disabled={isDiffLoading}
                      onGenerate={(response) => setValue('title', response, { shouldDirty: true })}
                      eventTrackingSrc={EventTrackingSrc.unknown}
                    />
                    </div>
                  </Stack>
                </Stack>
              }
            >
              <Input
                {...register('title', {
                  required: t('dashboard-scene.dashboard-preview-banner.title-required', 'Title is required'),
                })}
              />
            </Field>
            <Field
              noMargin
              invalid={!!errors.description}
              error={errors.description?.message}
              label={
                <Stack direction="row" justifyContent="space-between" alignItems="center" gap={1}>
                  <Label>{t('dashboard-scene.dashboard-preview-banner.description', 'Description')}</Label>
                  <Stack direction="row" alignItems="center" gap={0.5}>
                    {/* {isDiffLoading && <Spinner />} */}
                    <div id="description-ai-button-container">
                      <GenAIButton
                        tooltip={t(
                          'provisioned-resource-form.save-or-delete-resource-shared-fields.ai-fill-description',
                          'AI autofill description'
                        )}
                        messages={descriptionMessage}
                        disabled={isDiffLoading}
                        onGenerate={(response) => setValue('description', response, { shouldDirty: true })}
                        eventTrackingSrc={EventTrackingSrc.unknown}
                      />
                    </div>
                  </Stack>
                </Stack>
              }
            >
              <TextArea
                {...register('description', {
                  required: t(
                    'dashboard-scene.dashboard-preview-banner.description-required',
                    'Description is required'
                  ),
                })}
                rows={10}
              />
            </Field>
            <Stack gap={2} direction="row" justifyContent="flex-start">
              <Button
                variant="secondary"
                icon={isDiffLoading ? 'spinner' : 'ai-sparkle'}
                onClick={autoGenerateAll}
                disabled={isDiffLoading || hasAutoGeneratedAll}
                tooltip={t(
                  'dashboard-scene.save-provisioned-dashboard-form.magic-save-tooltip',
                  'Auto-generate all fields'
                )}
              >
                {isDiffLoading
                  ? t('dashboard-scene.save-provisioned-dashboard-form.magic-saving', 'Auto-generating...')
                  : t('dashboard-scene.save-provisioned-dashboard-form.magic-save', 'Auto generate all')}
              </Button>
              <Button
                variant="primary"
                type="submit"
                icon={isCreatingPullRequest ? 'spinner' : undefined}
                disabled={isDiffLoading}
              >
                {isCreatingPullRequest
                  ? t('dashboard-scene.dashboard-preview-banner.creating-pull-request', 'Creating pull request')
                  : t('dashboard-scene.dashboard-preview-banner.create-pull-request', 'Create pull request')}
              </Button>
            </Stack>
            {showAutoGenCheckbox && (
              <label style={{ display: 'flex', alignItems: 'center', marginTop: 8 }}>
                <input
                  type="checkbox"
                  checked={alwaysAutoGenAll}
                  onChange={handleAutoGenCheckboxChange}
                  style={{ marginRight: 8 }}
                />
                {t(
                  'dashboard-scene.save-provisioned-dashboard-form.always-autogen-checkbox',
                  'Always auto-generate all fields when opening this dialog'
                )}
              </label>
            )}
          </Stack>
        </form>
      </fieldset>
    </Modal>
  );
};

function DashboardPreviewBannerContent({ queryParams, slug, path }: DashboardPreviewBannerContentProps) {
  const prParam = usePullRequestParam();
  const file = useGetRepositoryFilesWithPathQuery({ name: slug, path, ref: queryParams.ref });
  const [showPRModal, setShowPRModal] = useState(false);

  if (file.data?.errors) {
    return (
      <Alert
        title={t('dashboard-scene.dashboard-preview-banner.title-error-loading-dashboard', 'Error loading dashboard')}
        severity="error"
        style={{ flex: 0 }}
      >
        {file.data.errors.map((error, index) => (
          <div key={index}>{error}</div>
        ))}
      </Alert>
    );
  }

  // This page was loaded with a `pull_request_url` in the URL
  if (prParam?.length) {
    return (
      <Alert
        {...commonAlertProps}
        title={t(
          'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-request-git-hub',
          'This dashboard is loaded from a pull request in GitHub.'
        )}
        buttonContent={
          <Stack alignItems="center">
            <Trans i18nKey="dashboard-scene.dashboard-preview-banner.view-pull-request-in-git-hub">
              View pull request in GitHub
            </Trans>
            <Icon name="external-link-alt" />
          </Stack>
        }
        onRemove={() => window.open(textUtil.sanitizeUrl(prParam), '_blank')}
      >
        <Trans i18nKey="dashboard-scene.dashboard-preview-banner.value-not-saved">
          The value is not yet saved in the Grafana database
        </Trans>
      </Alert>
    );
  }

  // Check if this is a GitHub link
  const githubURL = file.data?.urls?.newPullRequestURL ?? file.data?.urls?.compareURL;
  const existingPullRequestURL = file.data?.urls?.pullRequestURL;
  console.log('githubURL', file.data);

  if (githubURL) {
    return (
      <>
        <Alert
          {...commonAlertProps}
          title={t(
            'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-branch-git-hub',
            'This dashboard is loaded from a branch in GitHub.'
          )}
          buttonContent={
            existingPullRequestURL ? (
              <Stack alignItems="center">
                <Trans i18nKey="dashboard-scene.dashboard-preview-banner.view-pull-request-in-git-hub">
                  View pull request in GitHub
                </Trans>
                <Icon name="external-link-alt" />
              </Stack>
            ) : (
              <Trans i18nKey="dashboard-scene.dashboard-preview-banner.create-pull-request-in-git-hub">
                Create pull request
              </Trans>
            )
          }
          onRemove={() => {
            if (existingPullRequestURL) {
              window.open(textUtil.sanitizeUrl(existingPullRequestURL), '_blank');
            } else {
              setShowPRModal(true);
            }
          }}
        >
          <Trans i18nKey="dashboard-scene.dashboard-preview-banner.not-saved">
            The value is not yet saved in the Grafana database
          </Trans>
        </Alert>
        {showPRModal && (
          <CreatePullRequestModal
            slug={slug}
            branch={queryParams.ref ?? 'master'}
            isOpen={showPRModal}
            onDismiss={() => setShowPRModal(false)}
          />
        )}
      </>
    );
  }

  return (
    <Alert
      {...commonAlertProps}
      title={t(
        'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-external-repository',
        'This dashboard is loaded from an external repository'
      )}
    >
      <Trans i18nKey="dashboard-scene.dashboard-preview-banner.not-yet-saved">
        The value is not saved in the Grafana database
      </Trans>
    </Alert>
  );
}

export function DashboardPreviewBanner({ queryParams, route, slug, path }: DashboardPreviewBannerProps) {
  const provisioningEnabled = config.featureToggles.provisioning;
  if (!provisioningEnabled || 'kiosk' in queryParams || !path || route !== DashboardRoutes.Provisioning || !slug) {
    return null;
  }

  return <DashboardPreviewBannerContent queryParams={queryParams} slug={slug} path={path} />;
}
